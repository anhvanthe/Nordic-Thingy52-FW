<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\_build\CUSTOM-SR3_nRF52832_Custom_Board.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\_build\CUSTOM-SR3_nRF52832_Custom_Board.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Tue May 22 00:15:38 2018
<BR><P>
<H3>Maximum Stack Usage =       3096 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
m_audio_process &rArr; drv_audio_codec_encode &rArr; opus_encode &rArr; opus_encode_native &rArr; celt_encode_with_ec &rArr; quant_all_bands &rArr; quant_band_stereo &rArr; quant_band &rArr; quant_partition &rArr;  quant_partition (Cycle)
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[6]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">NMI_Handler</a><BR>
 <LI><a href="#[8]">MemoryManagement_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">MemoryManagement_Handler</a><BR>
 <LI><a href="#[9]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">BusFault_Handler</a><BR>
 <LI><a href="#[a]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">UsageFault_Handler</a><BR>
 <LI><a href="#[b]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">SVC_Handler</a><BR>
 <LI><a href="#[c]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">DebugMon_Handler</a><BR>
 <LI><a href="#[d]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">PendSV_Handler</a><BR>
 <LI><a href="#[e]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">SysTick_Handler</a><BR>
 <LI><a href="#[1e]">CCM_AAR_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1e]">CCM_AAR_IRQHandler</a><BR>
 <LI><a href="#[1d3]">nrf_memobj_write</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[139]">assert_nrf_callback</a><BR>
 <LI><a href="#[148]">app_error_handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[83]">app_error_fault_handler</a><BR>
 <LI><a href="#[172]">nrf_balloc_free</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[139]">assert_nrf_callback</a><BR>
 <LI><a href="#[13e]">nrf_log_frontend_std_4</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[366]">std_n</a><BR>
 <LI><a href="#[164]">nrf_log_frontend_std_2</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[366]">std_n</a><BR>
 <LI><a href="#[173]">nrf_balloc_alloc</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[139]">assert_nrf_callback</a><BR>
 <LI><a href="#[366]">std_n</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[139]">assert_nrf_callback</a><BR>
 <LI><a href="#[19c]">buf_prealloc</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[139]">assert_nrf_callback</a><BR>
 <LI><a href="#[10d]">__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_wspace_close</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10d]">__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_wspace_close</a><BR>
 <LI><a href="#[10e]">__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_rspace_close</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10e]">__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_rspace_close</a><BR>
 <LI><a href="#[112]">qsort</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[112]">qsort</a><BR>
 <LI><a href="#[103]">nrf_fstorage_sys_evt_handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[22e]">queue_process</a><BR>
 <LI><a href="#[3bb]">quant_partition</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3bb]">quant_partition</a><BR>
 <LI><a href="#[226]">encode_multiframe_packet</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[228]">opus_encode_native</a><BR>
 <LI><a href="#[130]">uECC_vli_numBits</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[130]">uECC_vli_numBits</a><BR>
 <LI><a href="#[12b]">bcopy</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12b]">bcopy</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[9]">BusFault_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1e]">CCM_AAR_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[22]">COMP_LPCOMP_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[c]">DebugMon_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1d]">ECB_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[33]">FPU_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[15]">GPIOTE_IRQHandler</a> from nrf_drv_gpiote.o(i.GPIOTE_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[7]">HardFault_Handler</a> from hardfault_handler_keil.o(.emb_text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[35]">HardFault_c_handler</a> from hardfault_implementation.o(i.HardFault_c_handler) referenced from hardfault_handler_keil.o(.emb_text)
 <LI><a href="#[32]">I2S_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2d]">MWU_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[8]">MemoryManagement_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[14]">NFCT_IRQHandler</a> from hal_nfc_t2t.o(i.NFCT_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[6]">NMI_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2c]">PDM_IRQHandler</a> from nrf_drv_pdm.o(i.PDM_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[f]">POWER_CLOCK_IRQHandler</a> from nrf_drv_clock.o(i.POWER_CLOCK_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2b]">PWM0_IRQHandler</a> from nrf_drv_pwm.o(i.PWM0_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2e]">PWM1_IRQHandler</a> from nrf_drv_pwm.o(i.PWM1_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2f]">PWM2_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[d]">PendSV_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[21]">QDEC_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[10]">RADIO_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1c]">RNG_IRQHandler</a> from nrf_drv_rng.o(i.RNG_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1a]">RTC0_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[20]">RTC1_IRQHandler</a> from app_timer.o(i.RTC1_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[31]">RTC2_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[5]">Reset_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[16]">SAADC_IRQHandler</a> from nrf_drv_saadc.o(i.SAADC_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[12]">SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler</a> from nrf_drv_twi.o(i.SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[13]">SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler</a> from nrf_drv_twi.o(i.SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[30]">SPIM2_SPIS2_SPI2_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[b]">SVC_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[23]">SWI0_EGU0_IRQHandler</a> from app_timer.o(i.SWI0_EGU0_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[24]">SWI1_EGU1_IRQHandler</a> from main.o(i.SWI1_EGU1_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[25]">SWI2_EGU2_IRQHandler</a> from nrf_sdh.o(i.SWI2_EGU2_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[26]">SWI3_EGU3_IRQHandler</a> from main.o(i.SWI3_EGU3_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[27]">SWI4_EGU4_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[28]">SWI5_EGU5_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[e]">SysTick_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[37]">SystemInit</a> from system_nrf52.o(i.SystemInit) referenced from arm_startup_nrf52.o(.text)
 <LI><a href="#[1b]">TEMP_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[17]">TIMER0_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[18]">TIMER1_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[19]">TIMER2_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[29]">TIMER3_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2a]">TIMER4_IRQHandler</a> from hal_nfc_t2t.o(i.TIMER4_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[11]">UARTE0_UART0_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[a]">UsageFault_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1f]">WDT_IRQHandler</a> from nrf_drv_wdt.o(i.WDT_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[38]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from arm_startup_nrf52.o(.text)
 <LI><a href="#[56]">adv_start_handler</a> from m_coms_ble_adv.o(i.adv_start_handler) referenced from m_coms_ble_adv.o(i.m_coms_ble_adv_on_ble_evt)
 <LI><a href="#[56]">adv_start_handler</a> from m_coms_ble_adv.o(i.adv_start_handler) referenced from m_coms_ble_adv.o(i.m_coms_ble_adv_on_sys_evt)
 <LI><a href="#[56]">adv_start_handler</a> from m_coms_ble_adv.o(i.adv_start_handler) referenced from m_coms_ble_adv.o(i.m_coms_ble_adv_pm_evt_handler)
 <LI><a href="#[56]">adv_start_handler</a> from m_coms_ble_adv.o(i.adv_start_handler) referenced from m_coms_ble_adv.o(i.set_lesc_key)
 <LI><a href="#[83]">app_error_fault_handler</a> from app_error_handler.o(i.app_error_fault_handler) referenced from nrf_sdh.o(i.nrf_sdh_enable_request)
 <LI><a href="#[3c]">app_sched_event_handler</a> from app_scheduler.o(i.app_sched_event_handler) referenced from app_scheduler.o(i.app_sched_event_put)
 <LI><a href="#[79]">app_timer_cnt_get</a> from app_timer.o(i.app_timer_cnt_get) referenced from main.o(i.main)
 <LI><a href="#[3a]">appsh_events_poll</a> from nrf_sdh.o(i.appsh_events_poll) referenced from nrf_sdh.o(i.SWI2_EGU2_IRQHandler)
 <LI><a href="#[78]">bg_scheduler_post_put_hook</a> from main.o(i.bg_scheduler_post_put_hook) referenced from main.o(i.main)
 <LI><a href="#[f9]">ble_bas_on_ble_evt</a> from ble_bas.o(i.ble_bas_on_ble_evt) referenced from m_coms_ble.o(sdh_ble_observers1)
 <LI><a href="#[f7]">ble_evt_handler</a> from ble_conn_params.o(i.ble_evt_handler) referenced 2 times from ble_conn_params.o(sdh_ble_observers0)
 <LI><a href="#[fe]">ble_evt_handler</a> from peer_manager.o(i.ble_evt_handler) referenced from peer_manager.o(sdh_ble_observers1)
 <LI><a href="#[5a]">ble_hids_error_handler</a> from m_coms_ble.o(i.ble_hids_error_handler) referenced from m_coms_ble.o(i.m_coms_ble_init)
 <LI><a href="#[59]">ble_hids_evt_handler</a> from m_coms_ble.o(i.ble_hids_evt_handler) referenced from m_coms_ble.o(i.m_coms_ble_init)
 <LI><a href="#[fa]">ble_ias_on_ble_evt</a> from ble_ias.o(i.ble_ias_on_ble_evt) referenced from m_coms_ble.o(sdh_ble_observers1)
 <LI><a href="#[ff]">ble_nus_on_ble_evt</a> from ble_nus.o(i.ble_nus_on_ble_evt) referenced from nrf_cli_ble_uart.o(sdh_ble_observers1)
 <LI><a href="#[63]">ble_stack_disable</a> from m_coms_ble.o(i.ble_stack_disable) referenced from m_coms_ble.o(i.m_coms_ble_shutdown)
 <LI><a href="#[f4]">board_shutdown</a> from m_init.o(i.board_shutdown) referenced from m_init.o(pwr_mgmt_data4)
 <LI><a href="#[c2]">cli_ble_uart_enable</a> from nrf_cli_ble_uart.o(i.cli_ble_uart_enable) referenced from nrf_cli_ble_uart.o(.constdata)
 <LI><a href="#[c0]">cli_ble_uart_init</a> from nrf_cli_ble_uart.o(i.cli_ble_uart_init) referenced from nrf_cli_ble_uart.o(.constdata)
 <LI><a href="#[c4]">cli_ble_uart_read</a> from nrf_cli_ble_uart.o(i.cli_ble_uart_read) referenced from nrf_cli_ble_uart.o(.constdata)
 <LI><a href="#[c1]">cli_ble_uart_uninit</a> from nrf_cli_ble_uart.o(i.cli_ble_uart_uninit) referenced from nrf_cli_ble_uart.o(.constdata)
 <LI><a href="#[c3]">cli_ble_uart_write</a> from nrf_cli_ble_uart.o(i.cli_ble_uart_write) referenced from nrf_cli_ble_uart.o(.constdata)
 <LI><a href="#[c7]">cli_rtt_enable</a> from nrf_cli_rtt.o(i.cli_rtt_enable) referenced from nrf_cli_rtt.o(.constdata)
 <LI><a href="#[c5]">cli_rtt_init</a> from nrf_cli_rtt.o(i.cli_rtt_init) referenced from nrf_cli_rtt.o(.constdata)
 <LI><a href="#[c9]">cli_rtt_read</a> from nrf_cli_rtt.o(i.cli_rtt_read) referenced from nrf_cli_rtt.o(.constdata)
 <LI><a href="#[c6]">cli_rtt_uninit</a> from nrf_cli_rtt.o(i.cli_rtt_uninit) referenced from nrf_cli_rtt.o(.constdata)
 <LI><a href="#[c8]">cli_rtt_write</a> from nrf_cli_rtt.o(i.cli_rtt_write) referenced from nrf_cli_rtt.o(.constdata)
 <LI><a href="#[7d]">cli_transport_evt_handler</a> from nrf_cli.o(i.cli_transport_evt_handler) referenced from nrf_cli.o(i.nrf_cli_init)
 <LI><a href="#[5e]">conn_params_error_handler</a> from m_coms_ble.o(i.conn_params_error_handler) referenced from m_coms_ble.o(i.m_coms_ble_init)
 <LI><a href="#[7f]">console_task</a> from nrf_cli.o(i.console_task) referenced from nrf_cli.o(i.nrf_cli_task_create)
 <LI><a href="#[df]">double_jacobian_default</a> from uECC.c.o(.text.double_jacobian_default) referenced from uECC.c.o(.rodata.curve_secp160r1)
 <LI><a href="#[df]">double_jacobian_default</a> from uECC.c.o(.text.double_jacobian_default) referenced from uECC.c.o(.rodata.curve_secp192r1)
 <LI><a href="#[df]">double_jacobian_default</a> from uECC.c.o(.text.double_jacobian_default) referenced from uECC.c.o(.rodata.curve_secp224r1)
 <LI><a href="#[df]">double_jacobian_default</a> from uECC.c.o(.text.double_jacobian_default) referenced from uECC.c.o(.rodata.curve_secp256r1)
 <LI><a href="#[85]">downmix_int</a> from opus_encoder.o(i.downmix_int) referenced from opus_encoder.o(i.opus_encode)
 <LI><a href="#[8b]">drv_audio_codec_info_cmd</a> from drv_audio_codec_opus.o(i.drv_audio_codec_info_cmd) referenced from drv_audio_codec_opus.o(.constdata)
 <LI><a href="#[89]">drv_audio_codec_set_bitrate_cmd</a> from drv_audio_codec_opus.o(i.drv_audio_codec_set_bitrate_cmd) referenced from drv_audio_codec_opus.o(.constdata)
 <LI><a href="#[8c]">drv_audio_codec_set_cmd</a> from drv_audio_codec_opus.o(i.drv_audio_codec_set_cmd) referenced from drv_audio_codec_opus.o(.constdata)
 <LI><a href="#[8a]">drv_audio_codec_set_complexity_cmd</a> from drv_audio_codec_opus.o(i.drv_audio_codec_set_complexity_cmd) referenced from drv_audio_codec_opus.o(.constdata)
 <LI><a href="#[8e]">drv_audio_info_cmd</a> from drv_audio_pdm.o(i.drv_audio_info_cmd) referenced from drv_audio_pdm.o(.constdata)
 <LI><a href="#[41]">drv_audio_pdm_event_handler</a> from drv_audio_pdm.o(i.drv_audio_pdm_event_handler) referenced from drv_audio_pdm.o(i.drv_audio_init)
 <LI><a href="#[8f]">drv_audio_set_cmd</a> from drv_audio_pdm.o(i.drv_audio_set_cmd) referenced from drv_audio_pdm.o(.constdata)
 <LI><a href="#[8d]">drv_audio_set_gain_cmd</a> from drv_audio_pdm.o(i.drv_audio_set_gain_cmd) referenced from drv_audio_pdm.o(.constdata)
 <LI><a href="#[42]">drv_buzzer_pwm_event_handler</a> from drv_buzzer.o(i.drv_buzzer_pwm_event_handler) referenced from drv_buzzer.o(i.drv_buzzer_init)
 <LI><a href="#[46]">drv_keyboard_interrupt_handler</a> from drv_keyboard_matrix.o(i.drv_keyboard_interrupt_handler) referenced from drv_keyboard_matrix.o(i.drv_keyboard_init)
 <LI><a href="#[45]">drv_keyboard_scan</a> from drv_keyboard_matrix.o(i.drv_keyboard_scan) referenced from drv_keyboard_matrix.o(i.drv_keyboard_init)
 <LI><a href="#[45]">drv_keyboard_scan</a> from drv_keyboard_matrix.o(i.drv_keyboard_scan) referenced from drv_keyboard_matrix.o(i.drv_keyboard_interrupt_handler)
 <LI><a href="#[44]">drv_keyboard_scan_handler</a> from drv_keyboard_matrix.o(i.drv_keyboard_scan_handler) referenced from drv_keyboard_matrix.o(i.drv_keyboard_enable)
 <LI><a href="#[44]">drv_keyboard_scan_handler</a> from drv_keyboard_matrix.o(i.drv_keyboard_scan_handler) referenced from drv_keyboard_matrix.o(i.drv_keyboard_interrupt_handler)
 <LI><a href="#[44]">drv_keyboard_scan_handler</a> from drv_keyboard_matrix.o(i.drv_keyboard_scan_handler) referenced from drv_keyboard_matrix.o(i.drv_keyboard_scan_handler)
 <LI><a href="#[ce]">erase</a> from nrf_fstorage_sd.o(i.erase) referenced from nrf_fstorage_sd.o(.constdata)
 <LI><a href="#[f0]">event_bus_log_statistics</a> from event_bus.o(i.event_bus_log_statistics) referenced from event_bus.o(pwr_mgmt_data3)
 <LI><a href="#[47]">event_process</a> from event_bus.o(i.event_process) referenced from event_bus.o(i.event_send)
 <LI><a href="#[86]">fds_evt_handler</a> from peer_data_storage.o(i.fds_evt_handler) referenced from peer_data_storage.o(i.pds_init)
 <LI><a href="#[77]">fg_scheduler_post_put_hook</a> from main.o(i.fg_scheduler_post_put_hook) referenced from main.o(i.main)
 <LI><a href="#[4]">fs_event_handler</a> from fds.o(i.fs_event_handler) referenced 2 times from fds.o(fs_data)
 <LI><a href="#[5c]">gatt_evt_handler</a> from m_coms_ble.o(i.gatt_evt_handler) referenced from m_coms_ble.o(i.m_coms_ble_init)
 <LI><a href="#[a5]">gcm_im_evt_handler</a> from gatt_cache_manager.o(i.gcm_im_evt_handler) referenced from id_manager.o(.constdata)
 <LI><a href="#[aa]">gcm_pdb_evt_handler</a> from gatt_cache_manager.o(i.gcm_pdb_evt_handler) referenced from peer_database.o(.constdata)
 <LI><a href="#[3b]">gpiote_handler</a> from app_gpiote.o(i.gpiote_handler) referenced from app_gpiote.o(i.app_gpiote_user_register)
 <LI><a href="#[a9]">gscm_pdb_evt_handler</a> from gatts_cache_manager.o(i.gscm_pdb_evt_handler) referenced from peer_database.o(.constdata)
 <LI><a href="#[7b]">halNfcCallback</a> from nfc_t2t_lib.o(i.halNfcCallback) referenced from nfc_t2t_lib.o(i.nfc_t2t_setup)
 <LI><a href="#[5d]">ias_evt_handler</a> from m_coms_ble.o(i.ias_evt_handler) referenced from m_coms_ble.o(i.m_coms_ble_init)
 <LI><a href="#[7a]">idle_task</a> from main.o(i.idle_task) referenced from main.o(i.main)
 <LI><a href="#[ca]">init</a> from nrf_fstorage_sd.o(i.init) referenced from nrf_fstorage_sd.o(.constdata)
 <LI><a href="#[d2]">internal_transaction_cb</a> from nrf_twi_mngr.o(i.internal_transaction_cb) referenced from nrf_twi_mngr.o(.constdata)
 <LI><a href="#[d1]">is_busy</a> from nrf_fstorage_sd.o(i.is_busy) referenced from nrf_fstorage_sd.o(.constdata)
 <LI><a href="#[a2]">key_combo_util_key_process</a> from key_combo_util.o(i.key_combo_util_key_process) referenced from m_init.o(.constdata)
 <LI><a href="#[da]">log_cmd</a> from nrf_log_frontend.o(i.log_cmd) referenced from nrf_log_frontend.o(.constdata)
 <LI><a href="#[d6]">log_ctrl</a> from nrf_log_frontend.o(i.log_ctrl) referenced 2 times from nrf_log_frontend.o(.constdata)
 <LI><a href="#[d7]">log_go</a> from nrf_log_frontend.o(i.log_go) referenced from nrf_log_frontend.o(.constdata)
 <LI><a href="#[d8]">log_halt</a> from nrf_log_frontend.o(i.log_halt) referenced from nrf_log_frontend.o(.constdata)
 <LI><a href="#[d9]">log_status</a> from nrf_log_frontend.o(i.log_status) referenced from nrf_log_frontend.o(.constdata)
 <LI><a href="#[49]">m_acc_click_handler</a> from m_acc.o(i.m_acc_click_handler) referenced from m_acc.o(i.m_acc_init)
 <LI><a href="#[40]">m_acc_interupt_handler</a> from drv_acc_lis3dh.o(i.m_acc_interupt_handler) referenced from drv_acc_lis3dh.o(i.drv_acc_init)
 <LI><a href="#[ed]">m_acc_shutdown</a> from m_acc.o(i.m_acc_shutdown) referenced from m_acc.o(pwr_mgmt_data2)
 <LI><a href="#[4d]">m_audio_buffer_handler</a> from m_audio.o(i.m_audio_buffer_handler) referenced from m_audio.o(i.m_audio_init)
 <LI><a href="#[90]">m_audio_cmd</a> from m_audio.o(i.m_audio_cmd) referenced 3 times from m_audio.o(.constdata)
 <LI><a href="#[91]">m_audio_info_cmd</a> from m_audio.o(i.m_audio_info_cmd) referenced from m_audio.o(.constdata)
 <LI><a href="#[4b]">m_audio_log_gauges</a> from m_audio.o(i.m_audio_log_gauges) referenced from m_audio.o(i.m_audio_disable)
 <LI><a href="#[4b]">m_audio_log_gauges</a> from m_audio.o(i.m_audio_log_gauges) referenced from m_audio.o(i.m_audio_shutdown)
 <LI><a href="#[f1]">m_audio_log_statistics</a> from m_audio.o(i.m_audio_log_statistics) referenced from m_audio.o(pwr_mgmt_data3)
 <LI><a href="#[4a]">m_audio_process</a> from m_audio.o(i.m_audio_process) referenced from m_audio.o(i.m_audio_buffer_handler)
 <LI><a href="#[4c]">m_audio_reset_gauges</a> from m_audio.o(i.m_audio_reset_gauges) referenced from m_audio.o(i.m_audio_enable)
 <LI><a href="#[4e]">m_audio_send</a> from m_audio.o(i.m_audio_send) referenced from m_audio.o(i.m_audio_process)
 <LI><a href="#[e7]">m_audio_shutdown</a> from m_audio.o(i.m_audio_shutdown) referenced from m_audio.o(pwr_mgmt_data1)
 <LI><a href="#[51]">m_batt_meas_process</a> from m_batt_meas.o(i.m_batt_meas_process) referenced from m_batt_meas.o(i.m_batt_meas_saadc_event_handler)
 <LI><a href="#[4f]">m_batt_meas_saadc_event_handler</a> from m_batt_meas.o(i.m_batt_meas_saadc_event_handler) referenced from m_batt_meas.o(i.m_batt_meas_init)
 <LI><a href="#[e8]">m_batt_meas_shutdown</a> from m_batt_meas.o(i.m_batt_meas_shutdown) referenced from m_batt_meas.o(pwr_mgmt_data1)
 <LI><a href="#[50]">m_batt_meas_timeout_handler</a> from m_batt_meas.o(i.m_batt_meas_timeout_handler) referenced from m_batt_meas.o(i.m_batt_meas_init)
 <LI><a href="#[50]">m_batt_meas_timeout_handler</a> from m_batt_meas.o(i.m_batt_meas_timeout_handler) referenced from m_batt_meas.o(i.m_batt_meas_saadc_event_handler)
 <LI><a href="#[52]">m_buzzer_ack</a> from m_buzzer.o(i.m_buzzer_ack) referenced from m_buzzer.o(i.m_buzzer_ack_handler)
 <LI><a href="#[53]">m_buzzer_ack_handler</a> from m_buzzer.o(i.m_buzzer_ack_handler) referenced from m_buzzer.o(i.m_buzzer_init)
 <LI><a href="#[a1]">m_buzzer_event_handler</a> from m_buzzer.o(i.m_buzzer_event_handler) referenced from m_init.o(.constdata)
 <LI><a href="#[e9]">m_buzzer_shutdown</a> from m_buzzer.o(i.m_buzzer_shutdown) referenced from m_buzzer.o(pwr_mgmt_data1)
 <LI><a href="#[68]">m_coms_audio_frame_free_func</a> from m_coms.o(i.m_coms_audio_frame_free_func) referenced from m_coms.o(i.m_coms_send_audio)
 <LI><a href="#[fb]">m_coms_ble_adv_on_ble_evt</a> from m_coms_ble_adv.o(i.m_coms_ble_adv_on_ble_evt) referenced from m_coms_ble_adv.o(sdh_ble_observers1)
 <LI><a href="#[105]">m_coms_ble_adv_on_sys_evt</a> from m_coms_ble_adv.o(i.m_coms_ble_adv_on_sys_evt) referenced from m_coms_ble_adv.o(sdh_soc_observers1)
 <LI><a href="#[55]">m_coms_ble_adv_pm_evt_handler</a> from m_coms_ble_adv.o(i.m_coms_ble_adv_pm_evt_handler) referenced from m_coms_ble_adv.o(i.m_coms_ble_adv_init)
 <LI><a href="#[9a]">m_coms_ble_cmd</a> from m_coms_ble.o(i.m_coms_ble_cmd) referenced 2 times from m_coms_ble.o(.constdata)
 <LI><a href="#[3]">m_coms_ble_dfu_fs_evt_handler</a> from m_coms_ble_dfu.o(i.m_coms_ble_dfu_fs_evt_handler) referenced 2 times from m_coms_ble_dfu.o(fs_data)
 <LI><a href="#[fc]">m_coms_ble_dfu_on_ble_evt</a> from m_coms_ble_dfu.o(i.m_coms_ble_dfu_on_ble_evt) referenced from m_coms_ble_dfu.o(sdh_ble_observers1)
 <LI><a href="#[e5]">m_coms_ble_dfu_shutdown</a> from m_coms_ble_dfu.o(i.m_coms_ble_dfu_shutdown) referenced from m_coms_ble_dfu.o(pwr_mgmt_data0)
 <LI><a href="#[92]">m_coms_ble_evt_handler</a> from m_coms.o(i.m_coms_ble_evt_handler) referenced from m_coms.o(.constdata)
 <LI><a href="#[fd]">m_coms_ble_hid_on_ble_evt</a> from m_coms_ble_hid.o(i.m_coms_ble_hid_on_ble_evt) referenced from m_coms_ble_hid.o(sdh_ble_observers1)
 <LI><a href="#[60]">m_coms_ble_lesc_calc_dh_key</a> from m_coms_ble_lesc.o(i.m_coms_ble_lesc_calc_dh_key) referenced from m_coms_ble_lesc.o(i.m_coms_ble_lesc_gen_data)
 <LI><a href="#[61]">m_coms_ble_lesc_calc_keys</a> from m_coms_ble_lesc.o(i.m_coms_ble_lesc_calc_keys) referenced from m_coms_ble_lesc.o(i.m_coms_ble_lesc_gen_data)
 <LI><a href="#[62]">m_coms_ble_lesc_gen_data</a> from m_coms_ble_lesc.o(i.m_coms_ble_lesc_gen_data) referenced from m_coms_ble_lesc.o(i.m_coms_ble_lesc_generate_key)
 <LI><a href="#[62]">m_coms_ble_lesc_gen_data</a> from m_coms_ble_lesc.o(i.m_coms_ble_lesc_gen_data) referenced from m_coms_ble_lesc.o(i.m_coms_ble_lesc_on_ble_evt)
 <LI><a href="#[5f]">m_coms_ble_lesc_notify</a> from m_coms_ble_lesc.o(i.m_coms_ble_lesc_notify) referenced from m_coms_ble_lesc.o(i.m_coms_ble_lesc_calc_keys)
 <LI><a href="#[f6]">m_coms_ble_lesc_on_ble_evt</a> from m_coms_ble_lesc.o(i.m_coms_ble_lesc_on_ble_evt) referenced from m_coms_ble_lesc.o(sdh_ble_observers0)
 <LI><a href="#[100]">m_coms_ble_on_ble_evt</a> from m_coms_ble.o(i.m_coms_ble_on_ble_evt) referenced from m_coms_ble.o(sdh_ble_observers2)
 <LI><a href="#[104]">m_coms_ble_on_sys_evt</a> from m_coms_ble.o(i.m_coms_ble_on_sys_evt) referenced from m_coms_ble.o(sdh_soc_observers1)
 <LI><a href="#[99]">m_coms_ble_sl_disable_cmd</a> from m_coms_ble.o(i.m_coms_ble_sl_disable_cmd) referenced from m_coms_ble.o(.constdata)
 <LI><a href="#[98]">m_coms_ble_sl_enable_cmd</a> from m_coms_ble.o(i.m_coms_ble_sl_enable_cmd) referenced from m_coms_ble.o(.constdata)
 <LI><a href="#[67]">m_coms_create_consumer_ctrl_report</a> from m_coms.o(i.m_coms_create_consumer_ctrl_report) referenced from m_coms.o(i.m_coms_event_handler)
 <LI><a href="#[65]">m_coms_create_keyboard_report</a> from m_coms.o(i.m_coms_create_keyboard_report) referenced from m_coms.o(i.m_coms_event_handler)
 <LI><a href="#[66]">m_coms_create_mouse_btn_report</a> from m_coms.o(i.m_coms_create_mouse_btn_report) referenced from m_coms.o(i.m_coms_event_handler)
 <LI><a href="#[9e]">m_coms_event_handler</a> from m_coms.o(i.m_coms_event_handler) referenced from m_init.o(.constdata)
 <LI><a href="#[93]">m_coms_hid_boot_mode_callback</a> from m_coms.o(i.m_coms_hid_boot_mode_callback) referenced from m_coms.o(.constdata)
 <LI><a href="#[f2]">m_coms_log_statistics</a> from m_coms.o(i.m_coms_log_statistics) referenced from m_coms.o(pwr_mgmt_data3)
 <LI><a href="#[94]">m_coms_process_audio_hid</a> from m_coms.o(i.m_coms_process_audio_hid) referenced from m_coms.o(.constdata)
 <LI><a href="#[96]">m_coms_process_keys</a> from m_coms.o(i.m_coms_process_keys) referenced from m_coms.o(.constdata)
 <LI><a href="#[97]">m_coms_process_wp_motion</a> from m_coms.o(i.m_coms_process_wp_motion) referenced from m_coms.o(.constdata)
 <LI><a href="#[95]">m_coms_process_xy_motion</a> from m_coms.o(i.m_coms_process_xy_motion) referenced 2 times from m_coms.o(.constdata)
 <LI><a href="#[64]">m_coms_report_free_func</a> from m_coms.o(i.m_coms_report_free_func) referenced from m_coms.o(i.m_coms_enqueue_report)
 <LI><a href="#[ea]">m_coms_shutdown</a> from m_coms.o(i.m_coms_shutdown) referenced from m_coms.o(pwr_mgmt_data1)
 <LI><a href="#[69]">m_ir_tx_ack_symbol</a> from m_ir_tx.o(i.m_ir_tx_ack_symbol) referenced from m_ir_tx.o(i.m_ir_tx_drv_ack_handler)
 <LI><a href="#[69]">m_ir_tx_ack_symbol</a> from m_ir_tx.o(i.m_ir_tx_ack_symbol) referenced from m_ir_tx.o(i.m_ir_tx_init)
 <LI><a href="#[6a]">m_ir_tx_drv_ack_handler</a> from m_ir_tx.o(i.m_ir_tx_drv_ack_handler) referenced from m_ir_tx.o(i.m_ir_tx_init)
 <LI><a href="#[a0]">m_ir_tx_event_handler</a> from m_ir_tx.o(i.m_ir_tx_event_handler) referenced from m_init.o(.constdata)
 <LI><a href="#[eb]">m_ir_tx_shutdown</a> from m_ir_tx.o(i.m_ir_tx_shutdown) referenced from m_ir_tx.o(pwr_mgmt_data1)
 <LI><a href="#[6c]">m_keyboard_event_handler</a> from m_keyboard.o(i.m_keyboard_event_handler) referenced from m_keyboard.o(i.m_keyboard_init)
 <LI><a href="#[6d]">m_keyboard_held_timer_timeout_handler</a> from m_keyboard.o(i.m_keyboard_held_timer_timeout_handler) referenced from m_keyboard.o(i.m_keyboard_init)
 <LI><a href="#[6b]">m_keyboard_process</a> from m_keyboard.o(i.m_keyboard_process) referenced from m_keyboard.o(i.m_keyboard_event_handler)
 <LI><a href="#[6b]">m_keyboard_process</a> from m_keyboard.o(i.m_keyboard_process) referenced from m_keyboard.o(i.m_keyboard_init)
 <LI><a href="#[ec]">m_keyboard_shutdown</a> from m_keyboard.o(i.m_keyboard_shutdown) referenced from m_keyboard.o(pwr_mgmt_data1)
 <LI><a href="#[6f]">m_nfc_callback</a> from m_nfc.o(i.m_nfc_callback) referenced from m_nfc.o(i.m_nfc_init)
 <LI><a href="#[9f]">m_nfc_event_handler</a> from m_nfc.o(i.m_nfc_event_handler) referenced from m_init.o(.constdata)
 <LI><a href="#[6e]">m_nfc_handler</a> from m_nfc.o(i.m_nfc_handler) referenced from m_nfc.o(i.m_nfc_callback)
 <LI><a href="#[70]">m_nfc_prepare_pairing_keys</a> from m_nfc.o(i.m_nfc_prepare_pairing_keys) referenced from m_nfc.o(i.m_nfc_prepare_pairing_keys)
 <LI><a href="#[e6]">m_nfc_shutdown</a> from m_nfc.o(i.m_nfc_shutdown) referenced from m_nfc.o(pwr_mgmt_data0)
 <LI><a href="#[9c]">m_protocol_hid_event_handler</a> from m_protocol_hid.o(i.m_protocol_hid_event_handler) referenced from m_init.o(.constdata)
 <LI><a href="#[71]">m_protocol_hid_keymap_compare</a> from m_protocol_hid.o(i.m_protocol_hid_keymap_compare) referenced from m_protocol_hid.o(i.m_protocol_hid_key_event_handler)
 <LI><a href="#[f3]">m_protocol_hid_state_log_statistics</a> from m_protocol_hid_state.o(i.m_protocol_hid_state_log_statistics) referenced from m_protocol_hid_state.o(pwr_mgmt_data3)
 <LI><a href="#[72]">m_protocol_hid_state_report_issued</a> from m_protocol_hid_state.o(i.m_protocol_hid_state_report_issued) referenced from m_protocol_hid_state.o(i.m_protocol_hid_state_connect)
 <LI><a href="#[72]">m_protocol_hid_state_report_issued</a> from m_protocol_hid_state.o(i.m_protocol_hid_state_report_issued) referenced from m_protocol_hid_state.o(i.m_protocol_hid_state_report_issued)
 <LI><a href="#[72]">m_protocol_hid_state_report_issued</a> from m_protocol_hid_state.o(i.m_protocol_hid_state_report_issued) referenced from m_protocol_hid_state.o(i.m_protocol_hid_state_update)
 <LI><a href="#[73]">m_protocol_hid_state_usage_compare</a> from m_protocol_hid_state.o(i.m_protocol_hid_state_usage_compare) referenced from m_protocol_hid_state.o(i.m_protocol_hid_state_get)
 <LI><a href="#[73]">m_protocol_hid_state_usage_compare</a> from m_protocol_hid_state.o(i.m_protocol_hid_state_usage_compare) referenced from m_protocol_hid_state.o(i.m_protocol_hid_state_set_value)
 <LI><a href="#[74]">m_protocol_hid_state_usage_page_compare</a> from m_protocol_hid_state.o(i.m_protocol_hid_state_usage_page_compare) referenced from m_protocol_hid_state.o(i.m_protocol_hid_state_page_it_init)
 <LI><a href="#[9d]">m_protocol_ir_event_handler</a> from m_protocol_ir.o(i.m_protocol_ir_event_handler) referenced from m_init.o(.constdata)
 <LI><a href="#[75]">m_protocol_ir_keymap_compare</a> from m_protocol_ir.o(i.m_protocol_ir_keymap_compare) referenced from m_protocol_ir.o(i.m_protocol_ir_event_handler)
 <LI><a href="#[9b]">m_system_state_event_handler</a> from m_system_state.o(i.m_system_state_event_handler) referenced from m_init.o(.constdata)
 <LI><a href="#[34]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[d4]">module_name_get</a> from nrf_log_frontend.o(i.module_name_get) referenced from nrf_log_frontend.o(.constdata)
 <LI><a href="#[dd]">nfc_ac_rec_payload_constructor</a> from nfc_ac_rec.o(i.nfc_ac_rec_payload_constructor) referenced 2 times from nfc_ble_pair_msg.o(.constdata)
 <LI><a href="#[dc]">nfc_ep_oob_payload_constructor</a> from nfc_ep_oob_rec.o(i.nfc_ep_oob_payload_constructor) referenced 2 times from nfc_ble_pair_msg.o(.constdata)
 <LI><a href="#[de]">nfc_hs_rec_payload_constructor</a> from nfc_hs_rec.o(i.nfc_hs_rec_payload_constructor) referenced from nfc_ble_pair_msg.o(.constdata)
 <LI><a href="#[db]">nfc_le_oob_payload_constructor</a> from nfc_le_oob_rec.o(i.nfc_le_oob_payload_constructor) referenced 2 times from nfc_ble_pair_msg.o(.constdata)
 <LI><a href="#[a3]">nfc_text_rec_payload_constructor</a> from nfc_text_rec.o(i.nfc_text_rec_payload_constructor) referenced from m_nfc.o(.constdata)
 <LI><a href="#[f5]">nrf_ble_gatt_on_ble_evt</a> from nrf_ble_gatt.o(i.nrf_ble_gatt_on_ble_evt) referenced from m_coms_ble.o(sdh_ble_observers0)
 <LI><a href="#[b3]">nrf_cli_cmd_clear</a> from nrf_cli.o(i.nrf_cli_cmd_clear) referenced from nrf_cli.o(.constdata)
 <LI><a href="#[bf]">nrf_cli_cmd_cli_stats</a> from nrf_cli.o(i.nrf_cli_cmd_cli_stats) referenced from nrf_cli.o(.constdata)
 <LI><a href="#[bd]">nrf_cli_cmd_cli_stats_get</a> from nrf_cli.o(i.nrf_cli_cmd_cli_stats_get) referenced from nrf_cli.o(.constdata)
 <LI><a href="#[be]">nrf_cli_cmd_cli_stats_reset</a> from nrf_cli.o(i.nrf_cli_cmd_cli_stats_reset) referenced from nrf_cli.o(.constdata)
 <LI><a href="#[b6]">nrf_cli_cmd_colors</a> from nrf_cli.o(i.nrf_cli_cmd_colors) referenced from nrf_cli.o(.constdata)
 <LI><a href="#[b4]">nrf_cli_cmd_colors_off</a> from nrf_cli.o(i.nrf_cli_cmd_colors_off) referenced from nrf_cli.o(.constdata)
 <LI><a href="#[b5]">nrf_cli_cmd_colors_on</a> from nrf_cli.o(i.nrf_cli_cmd_colors_on) referenced from nrf_cli.o(.constdata)
 <LI><a href="#[b9]">nrf_cli_cmd_echo</a> from nrf_cli.o(i.nrf_cli_cmd_echo) referenced from nrf_cli.o(.constdata)
 <LI><a href="#[b7]">nrf_cli_cmd_echo_off</a> from nrf_cli.o(i.nrf_cli_cmd_echo_off) referenced from nrf_cli.o(.constdata)
 <LI><a href="#[b8]">nrf_cli_cmd_echo_on</a> from nrf_cli.o(i.nrf_cli_cmd_echo_on) referenced from nrf_cli.o(.constdata)
 <LI><a href="#[ba]">nrf_cli_cmd_history</a> from nrf_cli.o(i.nrf_cli_cmd_history) referenced from nrf_cli.o(.constdata)
 <LI><a href="#[bc]">nrf_cli_cmd_resize</a> from nrf_cli.o(i.nrf_cli_cmd_resize) referenced from nrf_cli.o(.constdata)
 <LI><a href="#[bb]">nrf_cli_cmd_resize_default</a> from nrf_cli.o(i.nrf_cli_cmd_resize_default) referenced from nrf_cli.o(.constdata)
 <LI><a href="#[1]">nrf_cli_print_stream</a> from nrf_cli.o(i.nrf_cli_print_stream) referenced 4 times from main.o(.data)
 <LI><a href="#[101]">nrf_fstorage_sdh_req_handler</a> from nrf_fstorage_sd.o(i.nrf_fstorage_sdh_req_handler) referenced from nrf_fstorage_sd.o(sdh_req_observers0)
 <LI><a href="#[10a]">nrf_fstorage_sdh_state_handler</a> from nrf_fstorage_sd.o(i.nrf_fstorage_sdh_state_handler) referenced from nrf_fstorage_sd.o(sdh_state_observers0)
 <LI><a href="#[103]">nrf_fstorage_sys_evt_handler</a> from nrf_fstorage_sd.o(i.nrf_fstorage_sys_evt_handler) referenced from nrf_fstorage_sd.o(sdh_soc_observers0)
 <LI><a href="#[b2]">nrf_log_backend_cli_flush</a> from nrf_cli.o(i.nrf_log_backend_cli_flush) referenced from nrf_cli.o(.constdata)
 <LI><a href="#[b1]">nrf_log_backend_cli_panic_set</a> from nrf_cli.o(i.nrf_log_backend_cli_panic_set) referenced from nrf_cli.o(.constdata)
 <LI><a href="#[b0]">nrf_log_backend_cli_put</a> from nrf_cli.o(i.nrf_log_backend_cli_put) referenced from nrf_cli.o(.constdata)
 <LI><a href="#[ad]">nrf_mpu_cmd_dump</a> from nrf_mpu.o(i.nrf_mpu_cmd_dump) referenced from nrf_mpu.o(.constdata)
 <LI><a href="#[ae]">nrf_mpu_cmd_info</a> from nrf_mpu.o(i.nrf_mpu_cmd_info) referenced from nrf_mpu.o(.constdata)
 <LI><a href="#[af]">nrf_mpu_cmd_unknown</a> from nrf_mpu.o(i.nrf_mpu_cmd_unknown) referenced from nrf_mpu.o(.constdata)
 <LI><a href="#[48]">nrf_nfct_clock_event_handler</a> from hal_nfc_t2t.o(i.nrf_nfct_clock_event_handler) referenced from hal_nfc_t2t.o(i.hal_nfc_setup)
 <LI><a href="#[88]">nrf_pwr_mgmt_run</a> from nrf_pwr_mgmt.o(i.nrf_pwr_mgmt_run) referenced from twi_common.o(i.twi_perform)
 <LI><a href="#[81]">nrf_pwr_mgmt_timeout_handler</a> from nrf_pwr_mgmt.o(i.nrf_pwr_mgmt_timeout_handler) referenced from nrf_pwr_mgmt.o(i.nrf_pwr_mgmt_init)
 <LI><a href="#[106]">nrf_sdh_ble_evts_poll</a> from nrf_sdh_ble.o(i.nrf_sdh_ble_evts_poll) referenced from nrf_sdh_ble.o(sdh_stack_observers0)
 <LI><a href="#[107]">nrf_sdh_soc_evts_poll</a> from nrf_sdh_soc.o(i.nrf_sdh_soc_evts_poll) referenced from nrf_sdh_soc.o(sdh_stack_observers0)
 <LI><a href="#[7c]">nus_data_handler</a> from nrf_cli_ble_uart.o(i.nus_data_handler) referenced from nrf_cli_ble_uart.o(i.nrf_cli_ble_uart_service_init)
 <LI><a href="#[58]">on_encrypt_timeout</a> from m_coms_ble.o(i.on_encrypt_timeout) referenced from m_coms_ble.o(i.m_coms_ble_init)
 <LI><a href="#[57]">on_hids_evt</a> from m_coms_ble_hid.o(i.on_hids_evt) referenced from m_coms_ble_hid.o(i.m_coms_ble_hid_init)
 <LI><a href="#[a6]">pdb_pds_evt_handler</a> from peer_database.o(i.pdb_pds_evt_handler) referenced from peer_data_storage.o(.constdata)
 <LI><a href="#[5b]">peer_manager_evt_handler</a> from m_coms_ble.o(i.peer_manager_evt_handler) referenced from m_coms_ble.o(i.m_coms_ble_init)
 <LI><a href="#[2]">pm_gcm_evt_handler</a> from peer_manager.o(i.pm_gcm_evt_handler) referenced 2 times from gatt_cache_manager.o(.data)
 <LI><a href="#[a4]">pm_im_evt_handler</a> from peer_manager.o(i.pm_im_evt_handler) referenced from id_manager.o(.constdata)
 <LI><a href="#[a7]">pm_pdb_evt_handler</a> from peer_manager.o(i.pm_pdb_evt_handler) referenced from peer_database.o(.constdata)
 <LI><a href="#[ac]">pm_sm_evt_handler</a> from peer_manager.o(i.pm_sm_evt_handler) referenced from security_manager.o(.constdata)
 <LI><a href="#[43]">pwm_handler</a> from drv_ir_sirc.o(i.pwm_handler) referenced from drv_ir_sirc.o(i.drv_ir_init)
 <LI><a href="#[cc]">read</a> from nrf_fstorage_sd.o(i.read) referenced from nrf_fstorage_sd.o(.constdata)
 <LI><a href="#[cf]">rmap</a> from nrf_fstorage_sd.o(i.rmap) referenced from nrf_fstorage_sd.o(.constdata)
 <LI><a href="#[80]">rng_func</a> from nrf_crypto_sw_rng.o(i.rng_func) referenced from nrf_crypto_sw_rng.o(i.nrf_crypto_rng_init)
 <LI><a href="#[87]">rng_monitor_process_requests</a> from rng_monitor.o(i.rng_monitor_process_requests) referenced from rng_monitor.o(i.rng_monitor_init)
 <LI><a href="#[87]">rng_monitor_process_requests</a> from rng_monitor.o(i.rng_monitor_process_requests) referenced from rng_monitor.o(i.rng_monitor_request)
 <LI><a href="#[82]">scheduler_shutdown_handler</a> from nrf_pwr_mgmt.o(i.scheduler_shutdown_handler) referenced from nrf_pwr_mgmt.o(i.nrf_pwr_mgmt_shutdown)
 <LI><a href="#[108]">sd_state_evt_handler</a> from nrf_drv_clock.o(i.sd_state_evt_handler) referenced 2 times from nrf_drv_clock.o(sdh_state_observers0)
 <LI><a href="#[54]">set_lesc_key</a> from m_coms_ble_adv.o(i.set_lesc_key) referenced from m_coms_ble_adv.o(i.m_coms_ble_adv_determine)
 <LI><a href="#[54]">set_lesc_key</a> from m_coms_ble_adv.o(i.set_lesc_key) referenced from m_coms_ble_adv.o(i.m_coms_ble_adv_pm_evt_handler)
 <LI><a href="#[d5]">severity_lvl_get</a> from nrf_log_frontend.o(i.severity_lvl_get) referenced from nrf_log_frontend.o(.constdata)
 <LI><a href="#[a8]">sm_pdb_evt_handler</a> from security_manager.o(i.sm_pdb_evt_handler) referenced from peer_database.o(.constdata)
 <LI><a href="#[ab]">sm_smd_evt_handler</a> from security_manager.o(i.sm_smd_evt_handler) referenced from security_dispatcher.o(.constdata)
 <LI><a href="#[102]">soc_evt_handler</a> from nrf_drv_clock.o(i.soc_evt_handler) referenced from nrf_drv_clock.o(sdh_soc_observers0)
 <LI><a href="#[ee]">sr3_core_log_statistics</a> from main.o(i.sr3_core_log_statistics) referenced from main.o(pwr_mgmt_data3)
 <LI><a href="#[7e]">string_cmp</a> from nrf_cli.o(i.string_cmp) referenced from nrf_cli.o(i.nrf_cli_init)
 <LI><a href="#[d3]">task_mnanager_info</a> from task_manager.o(i.task_mnanager_info) referenced from task_manager.o(.constdata)
 <LI><a href="#[36]">task_schedule</a> from task_manager.o(i.task_schedule) referenced from task_manager_core_keil.o(.text)
 <LI><a href="#[39]">timeout_handler_scheduled_exec</a> from app_timer.o(i.timeout_handler_scheduled_exec) referenced from app_timer.o(i.RTC1_IRQHandler)
 <LI><a href="#[3e]">timer_handler</a> from nrf_cli_ble_uart.o(i.timer_handler) referenced from nrf_cli_ble_uart.o(i.cli_ble_uart_enable)
 <LI><a href="#[3f]">timer_handler</a> from nrf_cli_rtt.o(i.timer_handler) referenced from nrf_cli_rtt.o(i.cli_rtt_enable)
 <LI><a href="#[84]">twi_event_handler</a> from nrf_twi_mngr.o(i.twi_event_handler) referenced from nrf_twi_mngr.o(i.nrf_twi_mngr_init)
 <LI><a href="#[84]">twi_event_handler</a> from nrf_twi_mngr.o(i.twi_event_handler) referenced from nrf_twi_mngr.o(i.start_pending_transaction)
 <LI><a href="#[ef]">twi_shutdown</a> from twi_common.o(i.twi_shutdown) referenced from twi_common.o(pwr_mgmt_data3)
 <LI><a href="#[cb]">uninit</a> from nrf_fstorage_sd.o(i.uninit) referenced from nrf_fstorage_sd.o(.constdata)
 <LI><a href="#[3d]">update_timeout_handler</a> from ble_conn_params.o(i.update_timeout_handler) referenced from ble_conn_params.o(i.ble_conn_params_init)
 <LI><a href="#[e1]">vli_mmod_fast_secp160r1</a> from uECC.c.o(.text.vli_mmod_fast_secp160r1) referenced from uECC.c.o(.rodata.curve_secp160r1)
 <LI><a href="#[e2]">vli_mmod_fast_secp192r1</a> from uECC.c.o(.text.vli_mmod_fast_secp192r1) referenced from uECC.c.o(.rodata.curve_secp192r1)
 <LI><a href="#[e3]">vli_mmod_fast_secp224r1</a> from uECC.c.o(.text.vli_mmod_fast_secp224r1) referenced from uECC.c.o(.rodata.curve_secp224r1)
 <LI><a href="#[e4]">vli_mmod_fast_secp256r1</a> from uECC.c.o(.text.vli_mmod_fast_secp256r1) referenced from uECC.c.o(.rodata.curve_secp256r1)
 <LI><a href="#[76]">watchdog_event_handler</a> from main.o(i.watchdog_event_handler) referenced from main.o(i.main)
 <LI><a href="#[d0]">wmap</a> from nrf_fstorage_sd.o(i.wmap) referenced from nrf_fstorage_sd.o(.constdata)
 <LI><a href="#[cd]">write</a> from nrf_fstorage_sd.o(i.write) referenced from nrf_fstorage_sd.o(.constdata)
 <LI><a href="#[e0]">x_side_default</a> from uECC.c.o(.text.x_side_default) referenced from uECC.c.o(.rodata.curve_secp160r1)
 <LI><a href="#[e0]">x_side_default</a> from uECC.c.o(.text.x_side_default) referenced from uECC.c.o(.rodata.curve_secp192r1)
 <LI><a href="#[e0]">x_side_default</a> from uECC.c.o(.text.x_side_default) referenced from uECC.c.o(.rodata.curve_secp224r1)
 <LI><a href="#[e0]">x_side_default</a> from uECC.c.o(.text.x_side_default) referenced from uECC.c.o(.rodata.curve_secp256r1)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[38]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(.text)
</UL>
<P><STRONG><a name="[3d1]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[10b]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[11b]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[3d2]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[3d3]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[3d4]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[3d5]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[3d6]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[3d7]"></a>__asm___13_rng_monitor_c_93d8e032__nrf_atomic_internal_mov</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rng_monitor.o(.emb_text), UNUSED)

<P><STRONG><a name="[3c1]"></a>__asm___13_rng_monitor_c_93d8e032__nrf_atomic_internal_orr</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rng_monitor.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rng_monitor_request
</UL>

<P><STRONG><a name="[3c0]"></a>__asm___13_rng_monitor_c_93d8e032__nrf_atomic_internal_and</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rng_monitor.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rng_monitor_init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rng_monitor_process_requests
</UL>

<P><STRONG><a name="[3d8]"></a>__asm___13_rng_monitor_c_93d8e032__nrf_atomic_internal_eor</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rng_monitor.o(.emb_text), UNUSED)

<P><STRONG><a name="[3d9]"></a>__asm___13_rng_monitor_c_93d8e032__nrf_atomic_internal_add</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rng_monitor.o(.emb_text), UNUSED)

<P><STRONG><a name="[3da]"></a>__asm___13_rng_monitor_c_93d8e032__nrf_atomic_internal_sub</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rng_monitor.o(.emb_text), UNUSED)

<P><STRONG><a name="[3db]"></a>__asm___16_m_audio_gauges_c_ea2b1805__nrf_atomic_internal_mov</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, m_audio_gauges.o(.emb_text), UNUSED)

<P><STRONG><a name="[3dc]"></a>__asm___16_m_audio_gauges_c_ea2b1805__nrf_atomic_internal_orr</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, m_audio_gauges.o(.emb_text), UNUSED)

<P><STRONG><a name="[3dd]"></a>__asm___16_m_audio_gauges_c_ea2b1805__nrf_atomic_internal_and</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, m_audio_gauges.o(.emb_text), UNUSED)

<P><STRONG><a name="[3de]"></a>__asm___16_m_audio_gauges_c_ea2b1805__nrf_atomic_internal_eor</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, m_audio_gauges.o(.emb_text), UNUSED)

<P><STRONG><a name="[28d]"></a>__asm___16_m_audio_gauges_c_ea2b1805__nrf_atomic_internal_add</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, m_audio_gauges.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_audio_count_total
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_audio_count_lost
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_audio_count_discarded
</UL>

<P><STRONG><a name="[3df]"></a>__asm___16_m_audio_gauges_c_ea2b1805__nrf_atomic_internal_sub</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, m_audio_gauges.o(.emb_text), UNUSED)

<P><STRONG><a name="[2eb]"></a>__asm___12_m_coms_ble_c_51a43647__nrf_atomic_internal_mov</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, m_coms_ble.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_on_ble_evt
</UL>

<P><STRONG><a name="[3e0]"></a>__asm___12_m_coms_ble_c_51a43647__nrf_atomic_internal_orr</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, m_coms_ble.o(.emb_text), UNUSED)

<P><STRONG><a name="[3e1]"></a>__asm___12_m_coms_ble_c_51a43647__nrf_atomic_internal_and</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, m_coms_ble.o(.emb_text), UNUSED)

<P><STRONG><a name="[3e2]"></a>__asm___12_m_coms_ble_c_51a43647__nrf_atomic_internal_eor</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, m_coms_ble.o(.emb_text), UNUSED)

<P><STRONG><a name="[2e8]"></a>__asm___12_m_coms_ble_c_51a43647__nrf_atomic_internal_add</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, m_coms_ble.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_sl_disable
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_sl_disable_cmd
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_on_ble_evt
</UL>

<P><STRONG><a name="[2f1]"></a>__asm___12_m_coms_ble_c_51a43647__nrf_atomic_internal_sub</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, m_coms_ble.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_sl_enable
</UL>

<P><STRONG><a name="[3e3]"></a>__asm___16_m_coms_ble_dfu_c_d6932032__nrf_atomic_internal_mov</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, m_coms_ble_dfu.o(.emb_text), UNUSED)

<P><STRONG><a name="[2c3]"></a>__asm___16_m_coms_ble_dfu_c_d6932032__nrf_atomic_internal_orr</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, m_coms_ble_dfu.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_dfu_on_ble_evt
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_dfu_init
</UL>

<P><STRONG><a name="[2bf]"></a>__asm___16_m_coms_ble_dfu_c_d6932032__nrf_atomic_internal_and</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, m_coms_ble_dfu.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_dfu_on_ble_evt
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_dfu_fs_evt_handler
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_dfu_init
</UL>

<P><STRONG><a name="[3e4]"></a>__asm___16_m_coms_ble_dfu_c_d6932032__nrf_atomic_internal_eor</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, m_coms_ble_dfu.o(.emb_text), UNUSED)

<P><STRONG><a name="[3e5]"></a>__asm___16_m_coms_ble_dfu_c_d6932032__nrf_atomic_internal_add</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, m_coms_ble_dfu.o(.emb_text), UNUSED)

<P><STRONG><a name="[3e6]"></a>__asm___16_m_coms_ble_dfu_c_d6932032__nrf_atomic_internal_sub</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, m_coms_ble_dfu.o(.emb_text), UNUSED)

<P><STRONG><a name="[3e7]"></a>__asm___17_m_coms_ble_lesc_c_d078621f__nrf_atomic_internal_mov</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, m_coms_ble_lesc.o(.emb_text), UNUSED)

<P><STRONG><a name="[2e4]"></a>__asm___17_m_coms_ble_lesc_c_d078621f__nrf_atomic_internal_orr</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, m_coms_ble_lesc.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_lesc_generate_key
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_lesc_on_ble_evt
</UL>

<P><STRONG><a name="[2e1]"></a>__asm___17_m_coms_ble_lesc_c_d078621f__nrf_atomic_internal_and</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, m_coms_ble_lesc.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_lesc_generate_key
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_lesc_init
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_lesc_notify
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_lesc_calc_dh_key
</UL>

<P><STRONG><a name="[3e8]"></a>__asm___17_m_coms_ble_lesc_c_d078621f__nrf_atomic_internal_eor</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, m_coms_ble_lesc.o(.emb_text), UNUSED)

<P><STRONG><a name="[3e9]"></a>__asm___17_m_coms_ble_lesc_c_d078621f__nrf_atomic_internal_add</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, m_coms_ble_lesc.o(.emb_text), UNUSED)

<P><STRONG><a name="[3ea]"></a>__asm___17_m_coms_ble_lesc_c_d078621f__nrf_atomic_internal_sub</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, m_coms_ble_lesc.o(.emb_text), UNUSED)

<P><STRONG><a name="[3eb]"></a>__asm___5_fds_c_m_fs__nrf_atomic_internal_mov</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fds.o(.emb_text), UNUSED)

<P><STRONG><a name="[23c]"></a>__asm___5_fds_c_m_fs__nrf_atomic_internal_orr</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fds.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_init
</UL>

<P><STRONG><a name="[3ec]"></a>__asm___5_fds_c_m_fs__nrf_atomic_internal_and</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fds.o(.emb_text), UNUSED)

<P><STRONG><a name="[3ed]"></a>__asm___5_fds_c_m_fs__nrf_atomic_internal_eor</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fds.o(.emb_text), UNUSED)

<P><STRONG><a name="[238]"></a>__asm___5_fds_c_m_fs__nrf_atomic_internal_add</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fds.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_gc
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_register
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_open
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_init
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_file_delete
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
</UL>

<P><STRONG><a name="[3be]"></a>__asm___5_fds_c_m_fs__nrf_atomic_internal_sub</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fds.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[7]"></a>HardFault_Handler</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, hardfault_handler_keil.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[33f]"></a>__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_wspace_req</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, nrf_atfifo.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_alloc
</UL>

<P><STRONG><a name="[10d]"></a>__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_wspace_close</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrf_atfifo.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_wspace_close
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_wspace_close
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_put
</UL>

<P><STRONG><a name="[342]"></a>__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_rspace_req</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, nrf_atfifo.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_get
</UL>

<P><STRONG><a name="[10e]"></a>__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_rspace_close</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrf_atfifo.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_rspace_close
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_rspace_close
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_free
</UL>

<P><STRONG><a name="[33e]"></a>__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_space_clear</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, nrf_atfifo.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_clear
</UL>

<P><STRONG><a name="[22d]"></a>__asm___17_nrf_fstorage_sd_c_6e7dbfe9__nrf_atomic_internal_mov</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nrf_fstorage_sd.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase
</UL>

<P><STRONG><a name="[281]"></a>__asm___17_nrf_fstorage_sd_c_6e7dbfe9__nrf_atomic_internal_orr</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_fstorage_sd.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[3ee]"></a>__asm___17_nrf_fstorage_sd_c_6e7dbfe9__nrf_atomic_internal_and</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_fstorage_sd.o(.emb_text), UNUSED)

<P><STRONG><a name="[3ef]"></a>__asm___17_nrf_fstorage_sd_c_6e7dbfe9__nrf_atomic_internal_eor</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_fstorage_sd.o(.emb_text), UNUSED)

<P><STRONG><a name="[3f0]"></a>__asm___17_nrf_fstorage_sd_c_6e7dbfe9__nrf_atomic_internal_add</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_fstorage_sd.o(.emb_text), UNUSED)

<P><STRONG><a name="[3f1]"></a>__asm___17_nrf_fstorage_sd_c_6e7dbfe9__nrf_atomic_internal_sub</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_fstorage_sd.o(.emb_text), UNUSED)

<P><STRONG><a name="[3f2]"></a>__asm___12_nrf_memobj_c_9bb9f865__nrf_atomic_internal_mov</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nrf_memobj.o(.emb_text), UNUSED)

<P><STRONG><a name="[3f3]"></a>__asm___12_nrf_memobj_c_9bb9f865__nrf_atomic_internal_orr</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_memobj.o(.emb_text), UNUSED)

<P><STRONG><a name="[3f4]"></a>__asm___12_nrf_memobj_c_9bb9f865__nrf_atomic_internal_and</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_memobj.o(.emb_text), UNUSED)

<P><STRONG><a name="[3f5]"></a>__asm___12_nrf_memobj_c_9bb9f865__nrf_atomic_internal_eor</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_memobj.o(.emb_text), UNUSED)

<P><STRONG><a name="[368]"></a>__asm___12_nrf_memobj_c_9bb9f865__nrf_atomic_internal_add</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_memobj.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_get
</UL>

<P><STRONG><a name="[369]"></a>__asm___12_nrf_memobj_c_9bb9f865__nrf_atomic_internal_sub</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_memobj.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_put
</UL>

<P><STRONG><a name="[36c]"></a>__asm___14_nrf_pwr_mgmt_c_f22138a6__nrf_atomic_internal_mov</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nrf_pwr_mgmt.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwr_mgmt_shutdown
</UL>

<P><STRONG><a name="[3f6]"></a>__asm___14_nrf_pwr_mgmt_c_f22138a6__nrf_atomic_internal_orr</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_pwr_mgmt.o(.emb_text), UNUSED)

<P><STRONG><a name="[3f7]"></a>__asm___14_nrf_pwr_mgmt_c_f22138a6__nrf_atomic_internal_and</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_pwr_mgmt.o(.emb_text), UNUSED)

<P><STRONG><a name="[3f8]"></a>__asm___14_nrf_pwr_mgmt_c_f22138a6__nrf_atomic_internal_eor</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_pwr_mgmt.o(.emb_text), UNUSED)

<P><STRONG><a name="[3f9]"></a>__asm___14_nrf_pwr_mgmt_c_f22138a6__nrf_atomic_internal_add</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_pwr_mgmt.o(.emb_text), UNUSED)

<P><STRONG><a name="[3fa]"></a>__asm___14_nrf_pwr_mgmt_c_f22138a6__nrf_atomic_internal_sub</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_pwr_mgmt.o(.emb_text), UNUSED)

<P><STRONG><a name="[3fb]"></a>__asm___13_nrf_ringbuf_c_bac3c598__nrf_atomic_internal_mov</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nrf_ringbuf.o(.emb_text), UNUSED)

<P><STRONG><a name="[36d]"></a>__asm___13_nrf_ringbuf_c_bac3c598__nrf_atomic_internal_orr</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_ringbuf.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ringbuf_get
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ringbuf_cpy_put
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ringbuf_cpy_get
</UL>

<P><STRONG><a name="[36e]"></a>__asm___13_nrf_ringbuf_c_bac3c598__nrf_atomic_internal_and</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_ringbuf.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ringbuf_get
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ringbuf_free
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ringbuf_cpy_put
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ringbuf_cpy_get
</UL>

<P><STRONG><a name="[3fc]"></a>__asm___13_nrf_ringbuf_c_bac3c598__nrf_atomic_internal_eor</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_ringbuf.o(.emb_text), UNUSED)

<P><STRONG><a name="[3fd]"></a>__asm___13_nrf_ringbuf_c_bac3c598__nrf_atomic_internal_add</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_ringbuf.o(.emb_text), UNUSED)

<P><STRONG><a name="[3fe]"></a>__asm___13_nrf_ringbuf_c_bac3c598__nrf_atomic_internal_sub</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_ringbuf.o(.emb_text), UNUSED)

<P><STRONG><a name="[3ff]"></a>__asm___14_task_manager_c_fb9fd7a8__nrf_atomic_internal_mov</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, task_manager.o(.emb_text), UNUSED)

<P><STRONG><a name="[3ca]"></a>__asm___14_task_manager_c_fb9fd7a8__nrf_atomic_internal_orr</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, task_manager.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_events_set
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_create
</UL>

<P><STRONG><a name="[3cb]"></a>__asm___14_task_manager_c_fb9fd7a8__nrf_atomic_internal_and</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, task_manager.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_events_wait
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_schedule
</UL>

<P><STRONG><a name="[400]"></a>__asm___14_task_manager_c_fb9fd7a8__nrf_atomic_internal_eor</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, task_manager.o(.emb_text), UNUSED)

<P><STRONG><a name="[401]"></a>__asm___14_task_manager_c_fb9fd7a8__nrf_atomic_internal_add</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, task_manager.o(.emb_text), UNUSED)

<P><STRONG><a name="[402]"></a>__asm___14_task_manager_c_fb9fd7a8__nrf_atomic_internal_sub</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, task_manager.o(.emb_text), UNUSED)

<P><STRONG><a name="[403]"></a>__asm___18_nrf_log_frontend_c_bc460776__nrf_atomic_internal_mov</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nrf_log_frontend.o(.emb_text), UNUSED)

<P><STRONG><a name="[19d]"></a>__asm___18_nrf_log_frontend_c_bc460776__nrf_atomic_internal_orr</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_log_frontend.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
</UL>

<P><STRONG><a name="[19e]"></a>__asm___18_nrf_log_frontend_c_bc460776__nrf_atomic_internal_and</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_log_frontend.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
</UL>

<P><STRONG><a name="[404]"></a>__asm___18_nrf_log_frontend_c_bc460776__nrf_atomic_internal_eor</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_log_frontend.o(.emb_text), UNUSED)

<P><STRONG><a name="[405]"></a>__asm___18_nrf_log_frontend_c_bc460776__nrf_atomic_internal_add</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_log_frontend.o(.emb_text), UNUSED)

<P><STRONG><a name="[406]"></a>__asm___18_nrf_log_frontend_c_bc460776__nrf_atomic_internal_sub</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_log_frontend.o(.emb_text), UNUSED)

<P><STRONG><a name="[156]"></a>celt_pitch_xcorr_edsp</STRONG> (Thumb, 530 bytes, Stack size 0 bytes, celt_pitch_xcorr_arm_keil.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_celt_autocorr
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pitch_search
</UL>

<P><STRONG><a name="[31d]"></a>stack_profiler_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stack_profiler_keil.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3c8]"></a>stack_profiler_get_max_stack_usage</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stack_profiler_keil.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sr3_core_log_statistics
</UL>

<P><STRONG><a name="[3cc]"></a>task_switch</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, task_manager_core_keil.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_yield
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_manager_start
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_exit
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_events_wait
</UL>

<P><STRONG><a name="[5]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>MemoryManagement_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryManagement_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryManagement_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>CCM_AAR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCM_AAR_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCM_AAR_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>COMP_LPCOMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>ECB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>MWU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>PWM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>QDEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>RADIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>RTC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>RTC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>SPIM2_SPIS2_SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>SWI4_EGU4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>SWI5_EGU5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>TEMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>UARTE0_UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[10f]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_wdt_init
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_audio_cpu_gauge_log
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_audio_bitrate_gauge_log
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_audio_info_cmd
</UL>

<P><STRONG><a name="[111]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[407]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[117]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_audio_set_gain_cmd
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_hexdump_entry_process
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_argv
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_offset_string_print
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_state_collect
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[112]"></a>qsort</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, qsort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + In Cycle
<LI>Call Chain = qsort &rArr;  qsort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsort
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_init
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsort
</UL>

<P><STRONG><a name="[315]"></a>bsearch</STRONG> (Thumb, 70 bytes, Stack size 40 bytes, bsearch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bsearch
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_protocol_hid_state_page_it_init
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_protocol_hid_state_get
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_protocol_hid_state_set_value
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_protocol_hid_key_event_handler
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_protocol_ir_event_handler
</UL>

<P><STRONG><a name="[408]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[14c]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quant_all_bands
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quant_band_stereo
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quant_band
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interleave_hadamard
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deinterleave_hadamard
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quant_coarse_energy
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_encode_with_ec
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tf_analysis
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encode_native
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis3dh_write_regs
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sched_event_put
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_push
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_generic_pop
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_text_rec_payload_constructor
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_read
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_crypto_ecdh_shared_secret_compute
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_crypto_ecc_public_key_to_raw
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_crypto_ecc_public_key_from_raw
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_lesc_generate_oob_data
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hids_boot_mouse_inp_rep_send
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_read
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_whitelist_set
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_encode
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Read
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ringbuf_cpy_put
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ringbuf_cpy_get
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_write
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_read
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_ndef_record_encode
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_ac_rec_payload_constructor
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcAddBytesToBuffer
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteBlocking
</UL>

<P><STRONG><a name="[18d]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_prefilter
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_dfu_init
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_key_list_get
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_state_collect
</UL>

<P><STRONG><a name="[1c3]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_enc_shrink
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_repacketizer_out_range_impl
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_packet_pad
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encode_native
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_argv
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;completion_insert
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_state_collect
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_insert
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_ble_oob_adv_data_encode
</UL>

<P><STRONG><a name="[1e1]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove4
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_prefilter
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comb_filter
</UL>

<P><STRONG><a name="[409]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[114]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_init
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcAddFixedValueToBuffer
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[40a]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[40b]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[113]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quant_partition
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_enc_done
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_encode_with_ec
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encoder_ctl
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_init
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_init
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcPrepareTxBuffer
</UL>

<P><STRONG><a name="[158]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_init
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpiote_init
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_custom_encoder_ctl
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_encoder_init
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_encode_with_ec
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dynalloc_analysis
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_mdcts
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_celt_lpc
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encoder_init
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_hid_init
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_protocol_hid_state_enqueue
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_protocol_hid_state_init
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_protocol_hid_state_disconnect
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_device_identities_list_set
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_ble_evt_handler
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peers_id_keys_get
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_task
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_position_get
</UL>

<P><STRONG><a name="[40c]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[115]"></a>memset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memset
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_side_default
</UL>

<P><STRONG><a name="[199]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_print
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_ascii_to_utf8
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_nfc_event_handler
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_fmt
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiline_console_data_check
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_argv
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;history_handle
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_offset_string_print
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_position_synchronize
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;completion_insert
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_state_collect
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_insert
</UL>

<P><STRONG><a name="[1d1]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_audio_codec_set_bitrate_cmd
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_cmp
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_get
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_state_collect
</UL>

<P><STRONG><a name="[274]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_master_id
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_master_ids_compare
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_find_duplicate_bonding_data
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_ble_evt_handler
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pending_transaction
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_ble_oob_adv_data_encode
</UL>

<P><STRONG><a name="[26e]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;history_handle
</UL>

<P><STRONG><a name="[1d7]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_init
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_state_collect
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_ctrl
</UL>

<P><STRONG><a name="[116]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_audio_set_gain_cmd
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_audio_codec_set_complexity_cmd
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_audio_codec_set_bitrate_cmd
</UL>

<P><STRONG><a name="[110]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[40d]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[118]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[10c]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[40e]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[11a]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[40f]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[410]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[12f]"></a>uECC_generate_random_int</STRONG> (Thumb, 120 bytes, Stack size 160 bytes, uECC.c.o(.text.uECC_generate_random_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = uECC_generate_random_int &rArr; uECC_vli_cmp &rArr; uECC_vli_sub
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_cmp
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_numBits
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_isZero
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_make_key
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_shared_secret
</UL>

<P><STRONG><a name="[132]"></a>uECC_make_key</STRONG> (Thumb, 62 bytes, Stack size 96 bytes, uECC.c.o(.text.uECC_make_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 2384<LI>Call Chain = uECC_make_key &rArr; EccPoint_compute_public_key &rArr; EccPoint_mult &rArr; XYcZ_addC &rArr; uECC_vli_modSquare_fast &rArr; uECC_vli_square
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_generate_random_int
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_compute_public_key
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_crypto_ecc_key_pair_generate
</UL>

<P><STRONG><a name="[329]"></a>uECC_secp160r1</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uECC.c.o(.text.uECC_secp160r1))
<BR><BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micro_ecc_curve_domain_get
</UL>

<P><STRONG><a name="[32a]"></a>uECC_secp192r1</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uECC.c.o(.text.uECC_secp192r1))
<BR><BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micro_ecc_curve_domain_get
</UL>

<P><STRONG><a name="[32b]"></a>uECC_secp224r1</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uECC.c.o(.text.uECC_secp224r1))
<BR><BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micro_ecc_curve_domain_get
</UL>

<P><STRONG><a name="[328]"></a>uECC_secp256r1</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uECC.c.o(.text.uECC_secp256r1))
<BR><BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micro_ecc_curve_domain_get
</UL>

<P><STRONG><a name="[351]"></a>uECC_set_rng</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uECC.c.o(.text.uECC_set_rng))
<BR><BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_crypto_rng_init
</UL>

<P><STRONG><a name="[133]"></a>uECC_shared_secret</STRONG> (Thumb, 164 bytes, Stack size 704 bytes, uECC.c.o(.text.uECC_shared_secret))
<BR><BR>[Stack]<UL><LI>Max Depth = 2608<LI>Call Chain = uECC_shared_secret &rArr; EccPoint_mult &rArr; XYcZ_addC &rArr; uECC_vli_modSquare_fast &rArr; uECC_vli_square
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_generate_random_int
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_isZero
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_mult
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regularize_k
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bcopy
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_crypto_ecdh_shared_secret_compute
</UL>

<P><STRONG><a name="[12c]"></a>uECC_vli_add</STRONG> (Thumb, 88 bytes, Stack size 64 bytes, uECC.c.o(.text.uECC_vli_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = uECC_vli_add
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modInv
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modSub
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modAdd
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;double_jacobian_default
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast_secp160r1
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;omega_mult_secp160r1
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modInv_update
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast_secp256r1
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast_secp224r1
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast_secp192r1
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regularize_k
</UL>

<P><STRONG><a name="[121]"></a>uECC_vli_clear</STRONG> (Thumb, 24 bytes, Stack size 32 bytes, uECC.c.o(.text.uECC_vli_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = uECC_vli_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modInv
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_mult
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast_secp160r1
</UL>

<P><STRONG><a name="[131]"></a>uECC_vli_cmp</STRONG> (Thumb, 54 bytes, Stack size 192 bytes, uECC.c.o(.text.uECC_vli_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = uECC_vli_cmp &rArr; uECC_vli_sub
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_isZero
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_sub
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_generate_random_int
</UL>

<P><STRONG><a name="[11f]"></a>uECC_vli_isZero</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, uECC.c.o(.text.uECC_vli_isZero))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = uECC_vli_isZero
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_shared_secret
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_generate_random_int
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modInv
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_cmp
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_compute_public_key
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;double_jacobian_default
</UL>

<P><STRONG><a name="[12a]"></a>uECC_vli_modAdd</STRONG> (Thumb, 50 bytes, Stack size 64 bytes, uECC.c.o(.text.uECC_vli_modAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = uECC_vli_modAdd &rArr; uECC_vli_sub
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_sub
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_add
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_cmp_unsafe
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYcZ_addC
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;double_jacobian_default
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_side_default
</UL>

<P><STRONG><a name="[128]"></a>uECC_vli_modInv</STRONG> (Thumb, 268 bytes, Stack size 608 bytes, uECC.c.o(.text.uECC_vli_modInv))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = uECC_vli_modInv &rArr; vli_modInv_update &rArr; uECC_vli_add
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_rshift1
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_set
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_isZero
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_clear
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_sub
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_add
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modInv_update
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_cmp_unsafe
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_mult
</UL>

<P><STRONG><a name="[127]"></a>uECC_vli_modMult_fast</STRONG> (Thumb, 32 bytes, Stack size 320 bytes, uECC.c.o(.text.uECC_vli_modMult_fast))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = uECC_vli_modMult_fast &rArr; uECC_vli_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_mult
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_mult
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_z
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYcZ_add
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYcZ_addC
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;double_jacobian_default
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_side_default
</UL>

<P><STRONG><a name="[129]"></a>uECC_vli_modSquare_fast</STRONG> (Thumb, 32 bytes, Stack size 320 bytes, uECC.c.o(.text.uECC_vli_modSquare_fast))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = uECC_vli_modSquare_fast &rArr; uECC_vli_square
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_square
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_z
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYcZ_add
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYcZ_addC
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;double_jacobian_default
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_side_default
</UL>

<P><STRONG><a name="[126]"></a>uECC_vli_modSub</STRONG> (Thumb, 36 bytes, Stack size 64 bytes, uECC.c.o(.text.uECC_vli_modSub))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = uECC_vli_modSub &rArr; uECC_vli_sub
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_sub
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_add
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_mult
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYcZ_add
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYcZ_addC
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;double_jacobian_default
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_side_default
</UL>

<P><STRONG><a name="[137]"></a>uECC_vli_mult</STRONG> (Thumb, 786 bytes, Stack size 144 bytes, uECC.c.o(.text.uECC_vli_mult))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = uECC_vli_mult
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modMult_fast
</UL>

<P><STRONG><a name="[130]"></a>uECC_vli_numBits</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, uECC.c.o(.text.uECC_vli_numBits))
<BR><BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_numBits
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_generate_random_int
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_numBits
</UL>

<P><STRONG><a name="[12d]"></a>uECC_vli_rshift1</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, uECC.c.o(.text.uECC_vli_rshift1))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modInv
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;double_jacobian_default
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;omega_mult_secp160r1
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modInv_update
</UL>

<P><STRONG><a name="[120]"></a>uECC_vli_set</STRONG> (Thumb, 26 bytes, Stack size 48 bytes, uECC.c.o(.text.uECC_vli_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = uECC_vli_set
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modInv
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_mult
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYcZ_add
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYcZ_addC
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;double_jacobian_default
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;omega_mult_secp160r1
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast_secp256r1
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast_secp224r1
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast_secp192r1
</UL>

<P><STRONG><a name="[138]"></a>uECC_vli_square</STRONG> (Thumb, 652 bytes, Stack size 144 bytes, uECC.c.o(.text.uECC_vli_square))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = uECC_vli_square
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modSquare_fast
</UL>

<P><STRONG><a name="[134]"></a>uECC_vli_sub</STRONG> (Thumb, 94 bytes, Stack size 64 bytes, uECC.c.o(.text.uECC_vli_sub))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = uECC_vli_sub
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modInv
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modSub
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modAdd
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_cmp
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast_secp160r1
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast_secp256r1
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast_secp224r1
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast_secp192r1
</UL>

<P><STRONG><a name="[123]"></a>uECC_vli_testBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, uECC.c.o(.text.uECC_vli_testBit))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_mult
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regularize_k
</UL>

<P><STRONG><a name="[15]"></a>GPIOTE_IRQHandler</STRONG> (Thumb, 454 bytes, Stack size 88 bytes, nrf_drv_gpiote.o(i.GPIOTE_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = GPIOTE_IRQHandler &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>HardFault_c_handler</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, hardfault_implementation.o(i.HardFault_c_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = HardFault_c_handler &rArr; HardFault_process &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_panic
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hardfault_handler_keil.o(.emb_text)
</UL>
<P><STRONG><a name="[13c]"></a>HardFault_process</STRONG> (Thumb, 246 bytes, Stack size 8 bytes, app_error_handler.o(i.HardFault_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = HardFault_process &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_3
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_panic
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_4
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_c_handler
</UL>

<P><STRONG><a name="[14]"></a>NFCT_IRQHandler</STRONG> (Thumb, 408 bytes, Stack size 40 bytes, hal_nfc_t2t.o(i.NFCT_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = NFCT_IRQHandler &rArr; nrf_drv_clock_hfclk_request &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_hfclk_request
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>PDM_IRQHandler</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, nrf_drv_pdm.o(i.PDM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PDM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>POWER_CLOCK_IRQHandler</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, nrf_drv_clock.o(i.POWER_CLOCK_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = POWER_CLOCK_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>PWM0_IRQHandler</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, nrf_drv_pwm.o(i.PWM0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PWM0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>PWM1_IRQHandler</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, nrf_drv_pwm.o(i.PWM1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PWM1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>RNG_IRQHandler</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, nrf_drv_rng.o(i.RNG_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = RNG_IRQHandler &rArr; nrf_queue_push &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_push
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_is_full
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_is_enabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>RTC1_IRQHandler</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, app_timer.o(i.RTC1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = RTC1_IRQHandler &rArr; app_sched_event_put &rArr; app_isched_event_put &rArr; nrf_queue_push &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sched_event_put
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>SAADC_IRQHandler</STRONG> (Thumb, 342 bytes, Stack size 48 bytes, nrf_drv_saadc.o(i.SAADC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SAADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[3ce]"></a>SEGGER_RTT_HasData</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, segger_rtt.o(i.SEGGER_RTT_HasData))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_handler
</UL>

<P><STRONG><a name="[149]"></a>SEGGER_RTT_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, segger_rtt.o(i.SEGGER_RTT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SEGGER_RTT_Init &rArr; _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_rtt_init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_rtt_enable
</UL>

<P><STRONG><a name="[14b]"></a>SEGGER_RTT_Read</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, segger_rtt.o(i.SEGGER_RTT_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SEGGER_RTT_Read &rArr; _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_rtt_read
</UL>

<P><STRONG><a name="[14d]"></a>SEGGER_RTT_Write</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, segger_rtt.o(i.SEGGER_RTT_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_rtt_write
</UL>

<P><STRONG><a name="[14e]"></a>SEGGER_RTT_WriteNoLock</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, segger_rtt.o(i.SEGGER_RTT_WriteNoLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteBlocking
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>

<P><STRONG><a name="[12]"></a>SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrf_drv_twi.o(i.SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler &rArr; irq_handler_twim &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler_twim
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_twi.o(i.SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler &rArr; irq_handler_twim &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler_twim
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>SWI0_EGU0_IRQHandler</STRONG> (Thumb, 680 bytes, Stack size 48 bytes, app_timer.o(i.SWI0_EGU0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SWI0_EGU0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_us
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>SWI1_EGU1_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(i.SWI1_EGU1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = SWI1_EGU1_IRQHandler &rArr; app_isched_events_execute &rArr; nrf_queue_generic_pop &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_isched_events_execute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>SWI2_EGU2_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, nrf_sdh.o(i.SWI2_EGU2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = SWI2_EGU2_IRQHandler &rArr; app_sched_event_put &rArr; app_isched_event_put &rArr; nrf_queue_push &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sched_event_put
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>SWI3_EGU3_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(i.SWI3_EGU3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = SWI3_EGU3_IRQHandler &rArr; app_isched_events_execute &rArr; nrf_queue_generic_pop &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_isched_events_execute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>SystemInit</STRONG> (Thumb, 596 bytes, Stack size 12 bytes, system_nrf52.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SystemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(.text)
</UL>
<P><STRONG><a name="[2a]"></a>TIMER4_IRQHandler</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, hal_nfc_t2t.o(i.TIMER4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = TIMER4_IRQHandler &rArr; nrf_drv_clock_hfclk_release &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_hfclk_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>WDT_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, nrf_drv_wdt.o(i.WDT_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WDT_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[3c5]"></a>__ARM_common_memcpy4_5</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, security_manager.o(i.__ARM_common_memcpy4_5))
<BR><BR>[Called By]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_sec_params_set
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_sec_params_reply
</UL>

<P><STRONG><a name="[154]"></a>__ARM_common_memcpy4_7</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, segger_rtt.o(i.__ARM_common_memcpy4_7))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>

<P><STRONG><a name="[305]"></a>__ARM_common_memset4_12</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, m_keyboard.o(i.__ARM_common_memset4_12))
<BR><BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_keyboard_init
</UL>

<P><STRONG><a name="[26a]"></a>__ARM_common_memset4_4</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hal_nfc_t2t.o(i.__ARM_common_memset4_4))
<BR><BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nfc_internal_bytes_setup
</UL>

<P><STRONG><a name="[119]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[411]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[412]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[413]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[414]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[155]"></a>_celt_autocorr</STRONG> (Thumb, 650 bytes, Stack size 48 bytes, celt_lpc.o(i._celt_autocorr))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _celt_autocorr &rArr; app_error_handler &rArr;  app_error_fault_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_pitch_xcorr_edsp
</UL>
<BR>[Called By]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pitch_downsample
</UL>

<P><STRONG><a name="[157]"></a>_celt_lpc</STRONG> (Thumb, 406 bytes, Stack size 144 bytes, celt_lpc.o(i._celt_lpc))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = _celt_lpc &rArr; frac_div32 &rArr; celt_rcp &rArr; app_error_handler &rArr;  app_error_fault_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frac_div32
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pitch_downsample
</UL>

<P><STRONG><a name="[15b]"></a>alg_quant</STRONG> (Thumb, 278 bytes, Stack size 48 bytes, vq.o(i.alg_quant))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = alg_quant &rArr; encode_pulses &rArr; ec_enc_uint &rArr; ec_encode &rArr; app_error_handler &rArr;  app_error_fault_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_rsqrt_norm
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_pulses
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_pvq_search_c
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp_rotation
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_collapse_mask
</UL>
<BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quant_partition
</UL>

<P><STRONG><a name="[161]"></a>alg_unquant</STRONG> (Thumb, 228 bytes, Stack size 64 bytes, vq.o(i.alg_unquant))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = alg_unquant &rArr; exp_rotation &rArr; celt_rcp &rArr; app_error_handler &rArr;  app_error_fault_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_rsqrt_norm
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_pulses
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp_rotation
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_collapse_mask
</UL>
<BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quant_partition
</UL>

<P><STRONG><a name="[163]"></a>amp2Log2</STRONG> (Thumb, 284 bytes, Stack size 40 bytes, quant_bands.o(i.amp2Log2))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = amp2Log2 &rArr; app_error_handler &rArr;  app_error_fault_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_encode_with_ec
</UL>

<P><STRONG><a name="[83]"></a>app_error_fault_handler</STRONG> (Thumb, 182 bytes, Stack size 8 bytes, app_error_handler.o(i.app_error_fault_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_panic
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_4
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_sdh.o(i.nrf_sdh_enable_request)
</UL>
<P><STRONG><a name="[148]"></a>app_error_handler</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, app_error.o(i.app_error_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = app_error_handler &rArr;  app_error_fault_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_manager_start
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_init
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;renormalise_vector
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_encode
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_enc_uint
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_enc_bits
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_decode
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_dec_uint
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_sqrt
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_rcp
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_unquant
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_quant
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spreading_decision
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quant_all_bands
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitexact_cos
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quant_band_stereo
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deinterleave_hadamard
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_theta
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_udiv
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_celt_autocorr
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_pulses
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_pulses
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_doubling
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_enc_shrink
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amp2Log2
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_encode_with_ec
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transient_analysis
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unquant_coarse_energy
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pitch_search
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frac_div32
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_iir
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resampling_factor
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_repacketizer_out_range_impl
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encoder_ctl
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encode_native
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_laplace_encode
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_laplace_decode
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_fft_impl
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interp_bits2pulses
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_pitch_xcorr_c
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_best_pitch
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_pitch_gain
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rng_monitor_process_requests
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_free
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_alloc
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_pvq_search_c
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp_rotation
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_keyboard_scan_handler
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_keyboard_interrupt_handler
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_audio_pdm_event_handler
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_audio_codec_init
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_audio_codec_encode
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_shutdown
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_process_data
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_hid_boot_mode_callback
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_channel_process
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_evt_handler
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwr_mgmt_shutdown
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_buzzer_event_handler
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_buzzer_shutdown
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_buzzer_ack_handler
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_buzzer_ack
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_batt_meas_saadc_event_handler
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_batt_meas_timeout_handler
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_audio_buffer_handler
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_acc_shutdown
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_dfu_fs_evt_handler
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_lesc_key
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_adv_real_start
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_adv_pm_evt_handler
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_adv_on_sys_evt
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_adv_on_ble_evt
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_adv_determine
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_start_handler
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_enable_request
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_sl_enable
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_manager_evt_handler
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_encrypt_timeout
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_on_sys_evt
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_on_ble_evt
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_error_handler
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_disable
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hids_evt_handler
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hids_error_handler
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_event_handler
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_protocol_hid_state_report_issued
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_protocol_hid_state_update
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_protocol_hid_state_connect
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_protocol_hid_bt_event_handler
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_nfc_prepare_pairing_keys
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_nfc_callback
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_keyboard_process
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_keyboard_event_handler
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_ir_tx_shutdown
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_ir_tx_send_symbol
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_ir_tx_drv_ack_handler
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_ir_tx_ack_symbol
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_system_state_event_handler
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_protocol_ir_init
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_protocol_hid_init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_protocol_hid_event_handler
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_nfc_event_handler
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_keyboard_init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_ir_tx_event_handler
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_lesc_on_ble_evt
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_lesc_gen_data
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_lesc_calc_keys
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_lesc_calc_dh_key
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_hids_evt
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_add
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC1_IRQHandler
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeout_handler_scheduled_exec
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_task
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_schedule
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_soc_evts_poll
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_evts_poll
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI2_EGU2_IRQHandler
</UL>

<P><STRONG><a name="[166]"></a>app_gpiote_init</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, app_gpiote.o(i.app_gpiote_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = app_gpiote_init &rArr; nrf_drv_gpiote_init &rArr; nrf_drv_common_irq_enable &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_is_init
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_init
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[169]"></a>app_gpiote_user_disable</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, app_gpiote.o(i.app_gpiote_user_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = app_gpiote_user_disable &rArr; user_enable &rArr; nrf_drv_gpiote_in_event_enable &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_keyboard_shutdown
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_keyboard_disable
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_keyboard_interrupt_handler
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_acc_mode_set
</UL>

<P><STRONG><a name="[16b]"></a>app_gpiote_user_enable</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, app_gpiote.o(i.app_gpiote_user_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = app_gpiote_user_enable &rArr; user_enable &rArr; nrf_drv_gpiote_in_event_enable &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_keyboard_scan_handler
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_acc_mode_set
</UL>

<P><STRONG><a name="[16c]"></a>app_gpiote_user_register</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, app_gpiote.o(i.app_gpiote_user_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = app_gpiote_user_register &rArr; nrf_drv_gpiote_in_init &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_init
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_keyboard_init
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_acc_init
</UL>

<P><STRONG><a name="[16e]"></a>app_isched_event_put</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, app_isched.o(i.app_isched_event_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = app_isched_event_put &rArr; nrf_queue_push &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_push
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rng_monitor_request
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sched_event_put
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_keyboard_interrupt_handler
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_buzzer_ack_handler
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_batt_meas_saadc_event_handler
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_audio_enable
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_audio_disable
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_audio_shutdown
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_audio_process
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_audio_buffer_handler
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_protocol_hid_state_report_issued
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_protocol_hid_state_update
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_protocol_hid_state_connect
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_ir_tx_drv_ack_handler
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_lesc_gen_data
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_lesc_calc_keys
</UL>

<P><STRONG><a name="[152]"></a>app_isched_events_execute</STRONG> (Thumb, 178 bytes, Stack size 48 bytes, app_isched.o(i.app_isched_events_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = app_isched_events_execute &rArr; nrf_queue_generic_pop &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_generic_pop
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI3_EGU3_IRQHandler
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI1_EGU1_IRQHandler
</UL>

<P><STRONG><a name="[170]"></a>app_isched_get_max_utilization</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_isched.o(i.app_isched_get_max_utilization))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = app_isched_get_max_utilization &rArr; nrf_queue_max_utilization_get &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_max_utilization_get
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sr3_core_log_statistics
</UL>

<P><STRONG><a name="[31e]"></a>app_isched_install_hook</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, app_isched.o(i.app_isched_install_hook))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[147]"></a>app_sched_event_put</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, app_scheduler.o(i.app_sched_event_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = app_sched_event_put &rArr; app_isched_event_put &rArr; nrf_queue_push &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_free
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_alloc
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_isched_event_put
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwr_mgmt_shutdown
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_lesc_key
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_adv_pm_evt_handler
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_adv_on_sys_evt
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_adv_on_ble_evt
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_shutdown
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_nfc_callback
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_keyboard_event_handler
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_keyboard_init
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC1_IRQHandler
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI2_EGU2_IRQHandler
</UL>

<P><STRONG><a name="[174]"></a>app_sched_get_max_utilization</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, app_scheduler.o(i.app_sched_get_max_utilization))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = app_sched_get_max_utilization &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sr3_core_log_statistics
</UL>

<P><STRONG><a name="[31f]"></a>app_sched_init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, app_scheduler.o(i.app_sched_init))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[232]"></a>app_timer_cnt_diff_compute</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, app_timer.o(i.app_timer_cnt_diff_compute))
<BR><BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_audio_measure_cpu_usage_end
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_process
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_protocol_hid_state_eventq_cleanup
</UL>

<P><STRONG><a name="[79]"></a>app_timer_cnt_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_timer.o(i.app_timer_cnt_get))
<BR><BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_audio_measure_cpu_usage_start
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_audio_measure_cpu_usage_end
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_acc_click_handler
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_process
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_protocol_hid_state_enqueue
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_protocol_hid_state_disconnect
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_protocol_hid_state_connect
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_keyboard_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[182]"></a>app_timer_create</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, app_timer.o(i.app_timer_create))
<BR><BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rng_monitor_init
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwr_mgmt_init
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_keyboard_init
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_batt_meas_init
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_init
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_init
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_keyboard_init
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_ir_tx_init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_rtt_enable
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_ble_uart_enable
</UL>

<P><STRONG><a name="[175]"></a>app_timer_init</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, app_timer.o(i.app_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3c7]"></a>app_timer_op_queue_utilization_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_timer.o(i.app_timer_op_queue_utilization_get))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sr3_core_log_statistics
</UL>

<P><STRONG><a name="[176]"></a>app_timer_start</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, app_timer.o(i.app_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = app_timer_start &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwr_mgmt_init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rng_monitor_process_requests
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_keyboard_enable
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_keyboard_scan_handler
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_batt_meas_saadc_event_handler
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_manager_evt_handler
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_keyboard_process
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_ir_tx_drv_ack_handler
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_handler
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_rtt_enable
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_handler
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nus_data_handler
</UL>

<P><STRONG><a name="[177]"></a>app_timer_stop</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, app_timer.o(i.app_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = app_timer_stop &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_keyboard_shutdown
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_keyboard_disable
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_batt_meas_shutdown
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_manager_evt_handler
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_on_ble_evt
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_keyboard_process
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_rtt_uninit
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_rtt_enable
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nus_data_handler
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_ble_uart_uninit
</UL>

<P><STRONG><a name="[142]"></a>app_util_critical_region_enter</STRONG> (Thumb, 84 bytes, Stack size 4 bytes, app_util_platform.o(i.app_util_critical_region_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwr_mgmt_run
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_wdt_channel_alloc
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_request
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_isched_events_execute
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_free
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_alloc
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_push
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_generic_pop
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_isched_event_put
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ir_send_symbol
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_audio_codec_set_complexity_cmd
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_audio_codec_set_bitrate_cmd
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_audio_cpu_gauge_log
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_audio_bitrate_gauge_log
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_audio_info_cmd
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rng_rand
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_utilization_get
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_read
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_unlock
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_lock
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_lock_first_available
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_mpu_region_destroy
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_mpu_region_create
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_mpu_cmd_info
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_mpu_cmd_dump
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_hfclk_request
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_hfclk_release
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_state_evt_handler
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rng_init
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_IRQHandler
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_state_evt_handler
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Read
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_create
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_mnanager_info
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pending_transaction
</UL>

<P><STRONG><a name="[146]"></a>app_util_critical_region_exit</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, app_util_platform.o(i.app_util_critical_region_exit))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwr_mgmt_run
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_wdt_channel_alloc
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_request
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_isched_events_execute
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_free
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_alloc
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_push
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_generic_pop
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_isched_event_put
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ir_send_symbol
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_audio_codec_set_complexity_cmd
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_audio_codec_set_bitrate_cmd
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_audio_cpu_gauge_log
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_audio_bitrate_gauge_log
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_audio_info_cmd
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rng_rand
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_utilization_get
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_read
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_unlock
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_lock
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_lock_first_available
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_mpu_region_destroy
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_mpu_region_create
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_mpu_cmd_info
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_mpu_cmd_dump
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_hfclk_request
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_hfclk_release
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_state_evt_handler
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rng_init
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_IRQHandler
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_state_evt_handler
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Read
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_create
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_mnanager_info
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pending_transaction
</UL>

<P><STRONG><a name="[139]"></a>assert_nrf_callback</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, nrf_assert.o(i.assert_nrf_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_yield
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_manager_start
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_stack_guard_init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwr_mgmt_run
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_wdt_init
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_wdt_enable
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_wdt_channel_feed
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_wdt_channel_alloc
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_request
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_init
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_init
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sched_get_max_utilization
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_isched_events_execute
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twi_mngr_uninit
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twi_mngr_perform
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twi_mngr_init
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_perform
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rng_bytes_available
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rng_monitor_process_requests
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_free
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_alloc
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sched_event_put
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sched_event_handler
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_push
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_max_utilization_get
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_generic_pop
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_keyboard_enable
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_keyboard_disable
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_pwm_simple_playback
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ir_enable
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ir_disable
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_pwm_stop
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_pwm_init
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_pwm_complex_playback
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_buzzer_enable
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_pdm_stop
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_pdm_start
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_pdm_init
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_audio_loss_gauge_reset
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_audio_loss_gauge_log
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_audio_set_gain_cmd
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_print
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_audio_codec_init
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_process_data
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_enqueue_report
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_create_mouse_btn_report
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_create_keyboard_report
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_create_consumer_ctrl_report
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_channel_process
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_channel_enqueue
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_evt_handler
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwr_mgmt_shutdown
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_buzzer_event_handler
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_buzzer_ack
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_uninit
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_sample
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_channel_uninit
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_channel_init
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_calibrate_offset
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_buffer_convert
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_batt_meas_saadc_event_handler
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_batt_meas_init
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_audio_measure_cpu_usage_start
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_audio_measure_bitrate
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_audio_frame_put
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_audio_frame_get
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_audio_cpu_gauge_reset
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_audio_cpu_gauge_log
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_audio_bitrate_gauge_reset
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_audio_bitrate_gauge_log
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_audio_enable
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_audio_disable
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_audio_send
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_audio_process
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_type_str
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_process
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_dfu_on_ble_evt
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_dfu_fs_evt_handler
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_adv_pm_evt_handler
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_adv_determine
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_lesc_init
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_hid_init
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_protocol_hid_state_page_it_next
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_event_handler
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_audio_service_enable
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_audio_service_disable
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_protocol_hid_state_set_value
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_protocol_hid_state_report_issued
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_protocol_hid_state_update
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_protocol_hid_state_connect
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rng_rand
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_nfc_prepare_pairing_keys
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_nfc_handler
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_utilization_get
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_read
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_is_full
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_keyboard_disable
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_keyboard_shutdown
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_ir_tx_ack_symbol
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_system_state_event_handler
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_protocol_ir_event_handler
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_protocol_hid_event_handler
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_nfc_event_handler
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_keyboard_enable
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_ir_tx_event_handler
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_lesc_on_ble_evt
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_lesc_gen_data
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_lesc_calc_keys
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_lesc_calc_dh_key
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_enable
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_uninit
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_hfclk_request
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_hfclk_release
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_state_evt_handler
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rng_init
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_xfer
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_uninit
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_init
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_enable
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler_twim
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_limits_set
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_IRQHandler
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_state_evt_handler
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_pwm_is_stopped
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwm_sequence_set
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_init
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_disable
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_handler
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_rtt_write
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_rtt_read
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ringbuf_get
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ringbuf_cpy_put
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ringbuf_cpy_get
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_handler
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nus_data_handler
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_ble_uart_write
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_ble_uart_read
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_id_get
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_exit
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_events_wait
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_events_set
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_max_utilization_reset
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_write
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_read
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_fmt
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_buffer_flush
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_start
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_task
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_cmp
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_cmd_resize_default
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_cmd_resize
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_cmd_history
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_cmd_colors
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_cmd_clear
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_argv
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;history_handle
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_offset_string_print
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_position_synchronize
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_position_get
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;completion_insert
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_get
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_write
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_transport_evt_handler
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_state_collect
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_log_entry_process
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_insert
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_mnanager_info
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_event_handler
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_transfer
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pending_transaction
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_next
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduler_shutdown_handler
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>

<P><STRONG><a name="[17a]"></a>bitexact_cos</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, bands.o(i.bitexact_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bitexact_cos &rArr; app_error_handler &rArr;  app_error_fault_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_theta
</UL>

<P><STRONG><a name="[17b]"></a>ble_advdata_encode</STRONG> (Thumb, 962 bytes, Stack size 48 bytes, ble_advdata.o(i.ble_advdata_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ble_advdata_encode &rArr; uuid_list_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uuid_list_encode
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_set
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_ble_oob_adv_data_encode
</UL>

<P><STRONG><a name="[17d]"></a>ble_advdata_set</STRONG> (Thumb, 120 bytes, Stack size 104 bytes, ble_advdata.o(i.ble_advdata_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = ble_advdata_set &rArr; ble_advdata_encode &rArr; uuid_list_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_adv_real_start
</UL>

<P><STRONG><a name="[2bc]"></a>ble_bas_battery_level_update</STRONG> (Thumb, 144 bytes, Stack size 48 bytes, ble_bas.o(i.ble_bas_battery_level_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ble_bas_battery_level_update
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_battery_level_update
</UL>

<P><STRONG><a name="[17e]"></a>ble_bas_init</STRONG> (Thumb, 394 bytes, Stack size 112 bytes, ble_bas.o(i.ble_bas_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ble_bas_init
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_report_ref_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_init
</UL>

<P><STRONG><a name="[f9]"></a>ble_bas_on_ble_evt</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, ble_bas.o(i.ble_bas_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_bas_on_ble_evt
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_is_notification_enabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_coms_ble.o(sdh_ble_observers1)
</UL>
<P><STRONG><a name="[181]"></a>ble_conn_params_init</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, ble_conn_params.o(i.ble_conn_params_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_conn_params_init
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_init
</UL>

<P><STRONG><a name="[183]"></a>ble_conn_state_conn_handles</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ble_conn_state.o(i.ble_conn_state_conn_handles))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ble_conn_state_conn_handles &rArr; sdk_mapped_flags_key_list_get &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_key_list_get
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_local_database_has_changed
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pending_flags_check
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_ble_evt_handler
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_pdb_evt_handler
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;params_reply_pending_process
</UL>

<P><STRONG><a name="[185]"></a>ble_conn_state_encrypted</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_conn_state.o(i.ble_conn_state_encrypted))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ble_conn_state_encrypted &rArr; sdk_mapped_flags_get_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_get_by_key
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_ble_evt_handler
</UL>

<P><STRONG><a name="[187]"></a>ble_conn_state_role</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ble_conn_state.o(i.ble_conn_state_role))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ble_conn_state_role &rArr; sdk_mapped_flags_get_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_get_by_key
</UL>
<BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_link_secure
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_ble_evt_handler
</UL>

<P><STRONG><a name="[257]"></a>ble_conn_state_user_flag_acquire</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, ble_conn_state.o(i.ble_conn_state_user_flag_acquire))
<BR><BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_init
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_init
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_init
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_init
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_init
</UL>

<P><STRONG><a name="[383]"></a>ble_conn_state_user_flag_collection</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ble_conn_state.o(i.ble_conn_state_user_flag_collection))
<BR><BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pending_flags_check
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_ble_evt_handler
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_pdb_evt_handler
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;params_reply_pending_process
</UL>

<P><STRONG><a name="[188]"></a>ble_conn_state_user_flag_get</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ble_conn_state.o(i.ble_conn_state_user_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ble_conn_state_user_flag_get &rArr; sdk_mapped_flags_get_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_get_by_key
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_ble_evt_handler
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_connection_by_conn_handle
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pending_flags_check
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_failure
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_ble_evt_handler
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_pdb_evt_handler
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;params_reply_pending_process
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_ble_evt_handler
</UL>

<P><STRONG><a name="[189]"></a>ble_conn_state_user_flag_set</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ble_conn_state.o(i.ble_conn_state_user_flag_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_conn_state_user_flag_set &rArr; sdk_mapped_flags_update_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_update_by_key
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_im_evt_handler
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_ble_evt_handler
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_pdb_evt_handler
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_local_database_has_changed
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_im_evt_handler
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ble_evt_handler
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pending_flags_check
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_apply_in_evt
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_failure
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_sm_evt_handler
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply_perform
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;params_reply_pending_process
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_conn_sec_config_reply
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_ble_evt_handler
</UL>

<P><STRONG><a name="[18b]"></a>ble_dis_init</STRONG> (Thumb, 418 bytes, Stack size 24 bytes, ble_dis.o(i.ble_dis_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ble_dis_init &rArr; char_add &rArr; app_error_handler &rArr;  app_error_fault_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_add
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_init
</UL>

<P><STRONG><a name="[2d0]"></a>ble_hids_boot_kb_inp_rep_send</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, ble_hids.o(i.ble_hids_boot_kb_inp_rep_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_hids_boot_kb_inp_rep_send
</UL>
<BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_hid_keyboard_boot_report_send
</UL>

<P><STRONG><a name="[193]"></a>ble_hids_boot_mouse_inp_rep_send</STRONG> (Thumb, 138 bytes, Stack size 56 bytes, ble_hids.o(i.ble_hids_boot_mouse_inp_rep_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ble_hids_boot_mouse_inp_rep_send &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_hid_mouse_boot_report_send
</UL>

<P><STRONG><a name="[194]"></a>ble_hids_init</STRONG> (Thumb, 1386 bytes, Stack size 128 bytes, ble_hids.o(i.ble_hids_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = ble_hids_init &rArr; rep_char_add
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rep_char_add
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_inp_rep_char_add
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_hid_init
</UL>

<P><STRONG><a name="[2ce]"></a>ble_hids_inp_rep_send</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, ble_hids.o(i.ble_hids_inp_rep_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_hids_inp_rep_send
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_hid_input_report_send
</UL>

<P><STRONG><a name="[197]"></a>ble_hids_on_ble_evt</STRONG> (Thumb, 1164 bytes, Stack size 80 bytes, ble_hids.o(i.ble_hids_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ble_hids_on_ble_evt
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_is_notification_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_hid_on_ble_evt
</UL>

<P><STRONG><a name="[2df]"></a>ble_ias_init</STRONG> (Thumb, 194 bytes, Stack size 80 bytes, ble_ias.o(i.ble_ias_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ble_ias_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_init
</UL>

<P><STRONG><a name="[fa]"></a>ble_ias_on_ble_evt</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, ble_ias.o(i.ble_ias_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_ias_on_ble_evt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_coms_ble.o(sdh_ble_observers1)
</UL>
<P><STRONG><a name="[343]"></a>ble_nus_init</STRONG> (Thumb, 448 bytes, Stack size 104 bytes, ble_nus.o(i.ble_nus_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ble_nus_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_ble_uart_service_init
</UL>

<P><STRONG><a name="[ff]"></a>ble_nus_on_ble_evt</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, ble_nus.o(i.ble_nus_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_nus_on_ble_evt
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_is_notification_enabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_cli_ble_uart.o(sdh_ble_observers1)
</UL>
<P><STRONG><a name="[376]"></a>ble_nus_string_send</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, ble_nus.o(i.ble_nus_string_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_nus_string_send
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_handler
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nus_data_handler
</UL>

<P><STRONG><a name="[198]"></a>ble_srv_ascii_to_utf8</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ble_srv_common.o(i.ble_srv_ascii_to_utf8))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_srv_ascii_to_utf8
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_init
</UL>

<P><STRONG><a name="[2c4]"></a>ble_srv_is_indication_enabled</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ble_srv_common.o(i.ble_srv_is_indication_enabled))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_dfu_on_ble_evt
</UL>

<P><STRONG><a name="[180]"></a>ble_srv_is_notification_enabled</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ble_srv_common.o(i.ble_srv_is_notification_enabled))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bas_on_ble_evt
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_on_ble_evt
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hids_on_ble_evt
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_on_ble_evt
</UL>

<P><STRONG><a name="[17f]"></a>ble_srv_report_ref_encode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_srv_common.o(i.ble_srv_report_ref_encode))
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bas_init
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rep_char_add
</UL>

<P><STRONG><a name="[234]"></a>celt_cos_norm</STRONG> (Thumb, 316 bytes, Stack size 12 bytes, mathops.o(i.celt_cos_norm))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = celt_cos_norm
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp_rotation
</UL>

<P><STRONG><a name="[19f]"></a>celt_encode_with_ec</STRONG> (Thumb, 9564 bytes, Stack size 432 bytes, celt_encoder.o(i.celt_encode_with_ec))
<BR><BR>[Stack]<UL><LI>Max Depth = 2760<LI>Call Chain = celt_encode_with_ec &rArr; quant_all_bands &rArr; quant_band_stereo &rArr; quant_band &rArr; quant_partition &rArr;  quant_partition (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_tell_frac
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_enc_uint
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_enc_bits
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_enc_bit_logp
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_rcp
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spreading_decision
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quant_all_bands
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;normalise_bands
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hysteresis_decision
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_band_energies
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quant_fine_energy
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quant_energy_finalise
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quant_coarse_energy
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_enc_shrink
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_enc_init
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_enc_icdf
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_enc_done
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amp2Log2
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transient_analysis
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tf_analysis
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_prefilter
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dynalloc_analysis
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_mdcts
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_maxabs16
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_allocation
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_caps
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encode_native
</UL>

<P><STRONG><a name="[1b9]"></a>celt_encoder_get_size</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, celt_encoder.o(i.celt_encoder_get_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = celt_encoder_get_size
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_custom_mode_create
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encoder_init
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encoder_get_size
</UL>

<P><STRONG><a name="[1bb]"></a>celt_encoder_init</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, celt_encoder.o(i.celt_encoder_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = celt_encoder_init &rArr; opus_custom_encoder_ctl
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_custom_encoder_ctl
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_custom_mode_create
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resampling_factor
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encoder_init
</UL>

<P><STRONG><a name="[1be]"></a>celt_iir</STRONG> (Thumb, 1192 bytes, Stack size 144 bytes, celt_lpc.o(i.celt_iir), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>

<P><STRONG><a name="[1bf]"></a>celt_pitch_xcorr_c</STRONG> (Thumb, 488 bytes, Stack size 72 bytes, pitch.o(i.celt_pitch_xcorr_c), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>

<P><STRONG><a name="[1b3]"></a>celt_rcp</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, mathops.o(i.celt_rcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = celt_rcp &rArr; app_error_handler &rArr;  app_error_fault_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stereo_itheta
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;normalise_bands
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_encode_with_ec
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frac_div32
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_pvq_search_c
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp_rotation
</UL>

<P><STRONG><a name="[15f]"></a>celt_rsqrt_norm</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, mathops.o(i.celt_rsqrt_norm))
<BR><BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;renormalise_vector
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_unquant
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_quant
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quant_band_stereo
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_doubling
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_pitch_gain
</UL>

<P><STRONG><a name="[1c0]"></a>celt_sqrt</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, mathops.o(i.celt_sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = celt_sqrt &rArr; app_error_handler &rArr;  app_error_fault_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stereo_itheta
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_band_energies
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quant_band
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intensity_stereo
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transient_analysis
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_stereo_width
</UL>

<P><STRONG><a name="[1de]"></a>clt_mdct_forward_c</STRONG> (Thumb, 730 bytes, Stack size 88 bytes, mdct.o(i.clt_mdct_forward_c))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = clt_mdct_forward_c &rArr; opus_fft_impl &rArr; app_error_handler &rArr;  app_error_fault_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_fft_impl
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_mdcts
</UL>

<P><STRONG><a name="[1e0]"></a>comb_filter</STRONG> (Thumb, 942 bytes, Stack size 128 bytes, celt.o(i.comb_filter))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = comb_filter &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_prefilter
</UL>

<P><STRONG><a name="[1b4]"></a>compute_allocation</STRONG> (Thumb, 940 bytes, Stack size 152 bytes, rate.o(i.compute_allocation))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = compute_allocation &rArr; interp_bits2pulses &rArr; ec_enc_uint &rArr; ec_encode &rArr; app_error_handler &rArr;  app_error_fault_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interp_bits2pulses
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_encode_with_ec
</UL>

<P><STRONG><a name="[1ab]"></a>compute_band_energies</STRONG> (Thumb, 382 bytes, Stack size 56 bytes, bands.o(i.compute_band_energies))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = compute_band_energies &rArr; celt_sqrt &rArr; app_error_handler &rArr;  app_error_fault_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_encode_with_ec
</UL>

<P><STRONG><a name="[1e4]"></a>compute_stereo_width</STRONG> (Thumb, 496 bytes, Stack size 48 bytes, opus_encoder.o(i.compute_stereo_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = compute_stereo_width &rArr; frac_div32 &rArr; celt_rcp &rArr; app_error_handler &rArr;  app_error_fault_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_sqrt
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frac_div32
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encode_native
</UL>

<P><STRONG><a name="[7f]"></a>console_task</STRONG> (Thumb, 348 bytes, Stack size 16 bytes, nrf_cli.o(i.console_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = console_task &rArr; cli_state_collect &rArr; history_handle &rArr; nrf_cli_fprintf &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; unsigned_print &rArr; nrf_fprintf_buffer_flush &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_exit
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_events_wait
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_write
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_read
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_free
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_remove
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_buffer_flush
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_start
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_position_synchronize
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_state_collect
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_log_entry_process
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_cli.o(i.nrf_cli_task_create)
</UL>
<P><STRONG><a name="[2c1]"></a>crc32_compute</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, crc32.o(i.crc32_compute))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = crc32_compute
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_dfu_on_ble_evt
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_dfu_init
</UL>

<P><STRONG><a name="[162]"></a>decode_pulses</STRONG> (Thumb, 376 bytes, Stack size 40 bytes, cwrs.o(i.decode_pulses))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = decode_pulses &rArr; ec_dec_uint &rArr; ec_decode &rArr; app_error_handler &rArr;  app_error_fault_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_dec_uint
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_unquant
</UL>

<P><STRONG><a name="[85]"></a>downmix_int</STRONG> (Thumb, 348 bytes, Stack size 32 bytes, opus_encoder.o(i.downmix_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = downmix_int
</UL>
<BR>[Address Reference Count : 1]<UL><LI> opus_encoder.o(i.opus_encode)
</UL>
<P><STRONG><a name="[1f5]"></a>drv_acc_init</STRONG> (Thumb, 296 bytes, Stack size 40 bytes, drv_acc_lis3dh.o(i.drv_acc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = drv_acc_init &rArr; drv_acc_mode_set &rArr; lis3dh_int_clear &rArr; twi_perform &rArr; nrf_twi_mngr_perform &rArr; start_pending_transaction &rArr; nrf_drv_twi_init &rArr; nrf_drv_common_irq_enable &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis3dh_write_regs
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_perform
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpiote_user_register
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_acc_mode_set
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_acc_init
</UL>

<P><STRONG><a name="[1f8]"></a>drv_acc_mode_set</STRONG> (Thumb, 374 bytes, Stack size 56 bytes, drv_acc_lis3dh.o(i.drv_acc_mode_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = drv_acc_mode_set &rArr; lis3dh_int_clear &rArr; twi_perform &rArr; nrf_twi_mngr_perform &rArr; start_pending_transaction &rArr; nrf_drv_twi_init &rArr; nrf_drv_common_irq_enable &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis3dh_write_regs
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis3dh_int_clear
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_perform
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpiote_user_enable
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpiote_user_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_acc_init
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_acc_shutdown
</UL>

<P><STRONG><a name="[1fa]"></a>drv_audio_codec_encode</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, drv_audio_codec_opus.o(i.drv_audio_codec_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 3072<LI>Call Chain = drv_audio_codec_encode &rArr; opus_encode &rArr; opus_encode_native &rArr; celt_encode_with_ec &rArr; quant_all_bands &rArr; quant_band_stereo &rArr; quant_band &rArr; quant_partition &rArr;  quant_partition (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_audio_process
</UL>

<P><STRONG><a name="[1fd]"></a>drv_audio_codec_init</STRONG> (Thumb, 298 bytes, Stack size 16 bytes, drv_audio_codec_opus.o(i.drv_audio_codec_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = drv_audio_codec_init &rArr; drv_audio_codec_log_config &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encoder_init
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encoder_get_size
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encoder_ctl
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_audio_codec_log_config
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_audio_enable
</UL>

<P><STRONG><a name="[203]"></a>drv_audio_disable</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, drv_audio_pdm.o(i.drv_audio_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = drv_audio_disable &rArr; m_audio_loss_gauge_log &rArr; nrf_log_frontend_std_6 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_pdm_stop
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_audio_loss_gauge_log
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_audio_disable
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_audio_shutdown
</UL>

<P><STRONG><a name="[206]"></a>drv_audio_enable</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, drv_audio_pdm.o(i.drv_audio_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = drv_audio_enable &rArr; nrf_drv_pdm_start &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_pdm_start
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_audio_loss_gauge_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_audio_enable
</UL>

<P><STRONG><a name="[209]"></a>drv_audio_init</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, drv_audio_pdm.o(i.drv_audio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = drv_audio_init &rArr; nrf_drv_pdm_init &rArr; nrf_drv_common_irq_enable &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_pdm_init
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_audio_init
</UL>

<P><STRONG><a name="[2fa]"></a>drv_board_init</STRONG> (Thumb, 212 bytes, Stack size 0 bytes, drv_board.o(i.drv_board_init))
<BR><BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_init
</UL>

<P><STRONG><a name="[19b]"></a>drv_board_shutdown</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, drv_board.o(i.drv_board_shutdown))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_shutdown
</UL>

<P><STRONG><a name="[20e]"></a>drv_buzzer_disable</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, drv_buzzer.o(i.drv_buzzer_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = drv_buzzer_disable &rArr; nrf_drv_pwm_stop &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_pwm_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_buzzer_play
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_buzzer_ack
</UL>

<P><STRONG><a name="[210]"></a>drv_buzzer_enable</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, drv_buzzer.o(i.drv_buzzer_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = drv_buzzer_enable &rArr; nrf_drv_pwm_complex_playback &rArr; nrf_pwm_sequence_set &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_pwm_complex_playback
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_buzzer_update_buff
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_buzzer_play
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_buzzer_ack
</UL>

<P><STRONG><a name="[213]"></a>drv_buzzer_init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, drv_buzzer.o(i.drv_buzzer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = drv_buzzer_init &rArr; nrf_drv_pwm_init &rArr; nrf_drv_common_irq_enable &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_pwm_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_buzzer_init
</UL>

<P><STRONG><a name="[215]"></a>drv_ir_disable</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, drv_ir_sirc.o(i.drv_ir_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = drv_ir_disable &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_ir_tx_ack_symbol
</UL>

<P><STRONG><a name="[216]"></a>drv_ir_enable</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, drv_ir_sirc.o(i.drv_ir_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = drv_ir_enable &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_ir_tx_send_symbol
</UL>

<P><STRONG><a name="[217]"></a>drv_ir_init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, drv_ir_sirc.o(i.drv_ir_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = drv_ir_init &rArr; nrf_drv_pwm_init &rArr; nrf_drv_common_irq_enable &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_pwm_init
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_ir_tx_init
</UL>

<P><STRONG><a name="[218]"></a>drv_ir_send_symbol</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, drv_ir_sirc.o(i.drv_ir_send_symbol))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = drv_ir_send_symbol &rArr; nrf_drv_pwm_simple_playback &rArr; nrf_pwm_sequence_set &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_pwm_simple_playback
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_ir_tx_send_symbol
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_ir_tx_ack_symbol
</UL>

<P><STRONG><a name="[21a]"></a>drv_keyboard_disable</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, drv_keyboard_matrix.o(i.drv_keyboard_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = drv_keyboard_disable &rArr; app_gpiote_user_disable &rArr; user_enable &rArr; nrf_drv_gpiote_in_event_enable &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpiote_user_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_keyboard_disable
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_keyboard_shutdown
</UL>

<P><STRONG><a name="[21b]"></a>drv_keyboard_enable</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, drv_keyboard_matrix.o(i.drv_keyboard_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = drv_keyboard_enable &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_keyboard_enable
</UL>

<P><STRONG><a name="[21c]"></a>drv_keyboard_init</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, drv_keyboard_matrix.o(i.drv_keyboard_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = drv_keyboard_init &rArr; app_gpiote_user_register &rArr; nrf_drv_gpiote_in_init &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpiote_user_register
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_keyboard_init
</UL>

<P><STRONG><a name="[21d]"></a>drv_keyboard_keys_get</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, drv_keyboard_matrix.o(i.drv_keyboard_keys_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = drv_keyboard_keys_get &rArr; drv_keyboard_scan
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_keyboard_scan
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_keyboard_init
</UL>

<P><STRONG><a name="[21e]"></a>drv_keyboard_shutdown</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, drv_keyboard_matrix.o(i.drv_keyboard_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = drv_keyboard_shutdown &rArr; app_gpiote_user_disable &rArr; user_enable &rArr; nrf_drv_gpiote_in_event_enable &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpiote_user_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_keyboard_shutdown
</UL>

<P><STRONG><a name="[1ed]"></a>ec_dec_bit_logp</STRONG> (Thumb, 106 bytes, Stack size 12 bytes, entdec.o(i.ec_dec_bit_logp))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ec_dec_bit_logp
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_theta
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unquant_coarse_energy
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interp_bits2pulses
</UL>

<P><STRONG><a name="[21f]"></a>ec_dec_bits</STRONG> (Thumb, 174 bytes, Stack size 20 bytes, entdec.o(i.ec_dec_bits))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ec_dec_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_dec_uint
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quant_band_stereo
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quant_band
</UL>

<P><STRONG><a name="[3d0]"></a>ec_dec_icdf</STRONG> (Thumb, 116 bytes, Stack size 12 bytes, entdec.o(i.ec_dec_icdf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unquant_coarse_energy
</UL>

<P><STRONG><a name="[1ea]"></a>ec_dec_uint</STRONG> (Thumb, 316 bytes, Stack size 32 bytes, entdec.o(i.ec_dec_uint))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ec_dec_uint &rArr; ec_decode &rArr; app_error_handler &rArr;  app_error_fault_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_decode
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_dec_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_theta
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_pulses
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interp_bits2pulses
</UL>

<P><STRONG><a name="[1e9]"></a>ec_dec_update</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, entdec.o(i.ec_dec_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ec_dec_update
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_theta
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_laplace_decode
</UL>

<P><STRONG><a name="[1e8]"></a>ec_decode</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, entdec.o(i.ec_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ec_decode &rArr; app_error_handler &rArr;  app_error_fault_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_dec_uint
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_theta
</UL>

<P><STRONG><a name="[224]"></a>ec_decode_bin</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, entdec.o(i.ec_decode_bin), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_laplace_decode
</UL>

<P><STRONG><a name="[1a4]"></a>ec_enc_bit_logp</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, entenc.o(i.ec_enc_bit_logp))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ec_enc_bit_logp &rArr; ec_enc_normalize
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_enc_normalize
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_theta
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_encode_with_ec
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encode_native
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interp_bits2pulses
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quant_coarse_energy_impl
</UL>

<P><STRONG><a name="[1a7]"></a>ec_enc_bits</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, entenc.o(i.ec_enc_bits))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ec_enc_bits &rArr; app_error_handler &rArr;  app_error_fault_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quant_band_stereo
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quant_band
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quant_fine_energy
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quant_energy_finalise
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_encode_with_ec
</UL>

<P><STRONG><a name="[1b8]"></a>ec_enc_done</STRONG> (Thumb, 354 bytes, Stack size 24 bytes, entenc.o(i.ec_enc_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ec_enc_done &rArr; ec_enc_carry_out
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_enc_carry_out
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_encode_with_ec
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encode_native
</UL>

<P><STRONG><a name="[1a8]"></a>ec_enc_icdf</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, entenc.o(i.ec_enc_icdf))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ec_enc_icdf &rArr; ec_enc_normalize
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_enc_normalize
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_encode_with_ec
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quant_coarse_energy_impl
</UL>

<P><STRONG><a name="[1a1]"></a>ec_enc_init</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, entenc.o(i.ec_enc_init))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_encode_with_ec
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encode_native
</UL>

<P><STRONG><a name="[1a2]"></a>ec_enc_shrink</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, entenc.o(i.ec_enc_shrink))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ec_enc_shrink &rArr; app_error_handler &rArr;  app_error_fault_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_encode_with_ec
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encode_native
</UL>

<P><STRONG><a name="[1a6]"></a>ec_enc_uint</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, entenc.o(i.ec_enc_uint))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ec_enc_uint &rArr; ec_encode &rArr; app_error_handler &rArr;  app_error_fault_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_theta
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_pulses
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_encode_with_ec
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interp_bits2pulses
</UL>

<P><STRONG><a name="[1e7]"></a>ec_encode</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, entenc.o(i.ec_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ec_encode &rArr; app_error_handler &rArr;  app_error_fault_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_enc_normalize
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_enc_uint
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_theta
</UL>

<P><STRONG><a name="[222]"></a>ec_encode_bin</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, entenc.o(i.ec_encode_bin))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ec_encode_bin &rArr; ec_enc_normalize
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_enc_normalize
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_laplace_encode
</UL>

<P><STRONG><a name="[223]"></a>ec_laplace_decode</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, laplace.o(i.ec_laplace_decode), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_dec_update
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_decode_bin
</UL>
<BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unquant_coarse_energy
</UL>

<P><STRONG><a name="[225]"></a>ec_laplace_encode</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, laplace.o(i.ec_laplace_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ec_laplace_encode &rArr; ec_encode_bin &rArr; ec_enc_normalize
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_encode_bin
</UL>
<BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quant_coarse_energy_impl
</UL>

<P><STRONG><a name="[1a0]"></a>ec_tell_frac</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, entcode.o(i.ec_tell_frac))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quant_all_bands
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_theta
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quant_coarse_energy
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_encode_with_ec
</UL>

<P><STRONG><a name="[15e]"></a>encode_pulses</STRONG> (Thumb, 306 bytes, Stack size 56 bytes, cwrs.o(i.encode_pulses))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = encode_pulses &rArr; ec_enc_uint &rArr; ec_encode &rArr; app_error_handler &rArr;  app_error_fault_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_enc_uint
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_quant
</UL>

<P><STRONG><a name="[381]"></a>encode_size</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, opus.o(i.encode_size))
<BR><BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_repacketizer_out_range_impl
</UL>

<P><STRONG><a name="[22f]"></a>event_bus_init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, event_bus.o(i.event_bus_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = event_bus_init &rArr; nrf_balloc_init &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_init
</UL>

<P><STRONG><a name="[233]"></a>event_send</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, event_bus.o(i.event_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = event_send &rArr; app_isched_event_put &rArr; nrf_queue_push &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_free
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_alloc
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_isched_event_put
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_evt_handler
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_batt_meas_process
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_acc_click_handler
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_protocol_hid_state_report_issued
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_protocol_hid_state_update
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_keyboard_process
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_keyboard_held_timer_timeout_handler
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_protocol_ir_event_handler
</UL>

<P><STRONG><a name="[15c]"></a>exp_rotation</STRONG> (Thumb, 954 bytes, Stack size 96 bytes, vq.o(i.exp_rotation))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = exp_rotation &rArr; celt_rcp &rArr; app_error_handler &rArr;  app_error_fault_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_rcp
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_cos_norm
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_unquant
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_quant
</UL>

<P><STRONG><a name="[237]"></a>fds_file_delete</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, fds.o(i.fds_file_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = fds_file_delete &rArr; queue_process &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_put
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_alloc
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___5_fds_c_m_fs__nrf_atomic_internal_add
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_delete
</UL>

<P><STRONG><a name="[23a]"></a>fds_gc</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, fds.o(i.fds_gc))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = fds_gc &rArr; queue_process &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_put
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_alloc
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___5_fds_c_m_fs__nrf_atomic_internal_add
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_manager_evt_handler
</UL>

<P><STRONG><a name="[23b]"></a>fds_init</STRONG> (Thumb, 894 bytes, Stack size 104 bytes, fds.o(i.fds_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = fds_init &rArr; queue_process &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_init
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_put
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_alloc
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_init
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___5_fds_c_m_fs__nrf_atomic_internal_add
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___5_fds_c_m_fs__nrf_atomic_internal_orr
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>
<BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_init
</UL>

<P><STRONG><a name="[23f]"></a>fds_record_close</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, fds.o(i.fds_record_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = fds_record_close &rArr; record_find_by_desc
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_by_desc
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_read
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_iterate
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_init
</UL>

<P><STRONG><a name="[241]"></a>fds_record_find</STRONG> (Thumb, 14 bytes, Stack size 24 bytes, fds.o(i.fds_record_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = fds_record_find &rArr; record_find
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_read
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_store
</UL>

<P><STRONG><a name="[243]"></a>fds_record_find_by_key</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, fds.o(i.fds_record_find_by_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = fds_record_find_by_key &rArr; record_find
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_iterate
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_init
</UL>

<P><STRONG><a name="[244]"></a>fds_record_find_in_file</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, fds.o(i.fds_record_find_in_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = fds_record_find_in_file &rArr; record_find
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_delete
</UL>

<P><STRONG><a name="[3a1]"></a>fds_record_id_from_desc</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, fds.o(i.fds_record_id_from_desc))
<BR><BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_store
</UL>

<P><STRONG><a name="[245]"></a>fds_record_open</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, fds.o(i.fds_record_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = fds_record_open &rArr; record_find_by_desc
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___5_fds_c_m_fs__nrf_atomic_internal_add
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_by_desc
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_read
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_iterate
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_init
</UL>

<P><STRONG><a name="[246]"></a>fds_record_update</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fds.o(i.fds_record_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = fds_record_update &rArr; write_enqueue &rArr; queue_process &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_store
</UL>

<P><STRONG><a name="[248]"></a>fds_record_write</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fds.o(i.fds_record_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = fds_record_write &rArr; write_enqueue &rArr; queue_process &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_store
</UL>

<P><STRONG><a name="[249]"></a>fds_record_write_reserved</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fds.o(i.fds_record_write_reserved))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = fds_record_write_reserved &rArr; write_enqueue &rArr; queue_process &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_store
</UL>

<P><STRONG><a name="[24a]"></a>fds_register</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, fds.o(i.fds_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fds_register
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___5_fds_c_m_fs__nrf_atomic_internal_add
</UL>
<BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_init
</UL>

<P><STRONG><a name="[3a4]"></a>fds_reserve</STRONG> (Thumb, 136 bytes, Stack size 20 bytes, fds.o(i.fds_reserve))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = fds_reserve
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_space_reserve
</UL>

<P><STRONG><a name="[3a0]"></a>fds_reserve_cancel</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, fds.o(i.fds_reserve_cancel))
<BR><BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_space_reserve_cancel
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_store
</UL>

<P><STRONG><a name="[159]"></a>frac_div32</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, mathops.o(i.frac_div32))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = frac_div32 &rArr; celt_rcp &rArr; app_error_handler &rArr;  app_error_fault_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_rcp
</UL>
<BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_doubling
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_celt_lpc
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_stereo_width
</UL>

<P><STRONG><a name="[192]"></a>gcm_ble_evt_handler</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, gatt_cache_manager.o(i.gcm_ble_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = gcm_ble_evt_handler &rArr; pending_flags_check &rArr; gscm_local_db_cache_update &rArr; pdb_write_buf_store &rArr; write_buf_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_process &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_db_change_notification_done
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pending_flags_check
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_apply_in_evt
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[a5]"></a>gcm_im_evt_handler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, gatt_cache_manager.o(i.gcm_im_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = gcm_im_evt_handler &rArr; local_db_apply_in_evt &rArr; gscm_local_db_cache_apply &rArr; pdb_peer_data_ptr_get &rArr; pds_peer_data_read &rArr; fds_record_find &rArr; record_find
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_service_changed_ind_needed
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_apply_in_evt
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> id_manager.o(.constdata)
</UL>
<P><STRONG><a name="[256]"></a>gcm_init</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, gatt_cache_manager.o(i.gcm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gcm_init
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_init
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_init
</UL>

<P><STRONG><a name="[259]"></a>gcm_local_database_has_changed</STRONG> (Thumb, 82 bytes, Stack size 96 bytes, gatt_cache_manager.o(i.gcm_local_database_has_changed))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = gcm_local_database_has_changed &rArr; pending_flags_check &rArr; gscm_local_db_cache_update &rArr; pdb_write_buf_store &rArr; write_buf_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_process &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_local_database_has_changed
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pending_flags_check
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_conn_handles
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_local_database_has_changed
</UL>

<P><STRONG><a name="[aa]"></a>gcm_pdb_evt_handler</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, gatt_cache_manager.o(i.gcm_pdb_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = gcm_pdb_evt_handler &rArr; pending_flags_check &rArr; gscm_local_db_cache_update &rArr; pdb_write_buf_store &rArr; write_buf_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_process &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_unlock
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_data_ptr_get
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_conn_handle_get
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pending_flags_check
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> peer_database.o(.constdata)
</UL>
<P><STRONG><a name="[25e]"></a>get_connection_by_conn_handle</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, id_manager.o(i.get_connection_by_conn_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = get_connection_by_conn_handle &rArr; ble_conn_state_user_flag_get &rArr; sdk_mapped_flags_get_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_free
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_new_peer_id
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_ble_evt_handler
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_ble_addr_get
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
</UL>

<P><STRONG><a name="[3b]"></a>gpiote_handler</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, app_gpiote.o(i.gpiote_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gpiote_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_gpiote.o(i.app_gpiote_user_register)
</UL>
<P><STRONG><a name="[253]"></a>gscm_db_change_notification_done</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, gatts_cache_manager.o(i.gscm_db_change_notification_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = gscm_db_change_notification_done &rArr; pdb_raw_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_process &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_raw_store
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ble_evt_handler
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pending_flags_check
</UL>

<P><STRONG><a name="[3b3]"></a>gscm_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gatts_cache_manager.o(i.gscm_init))
<BR><BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_init
</UL>

<P><STRONG><a name="[25a]"></a>gscm_local_database_has_changed</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, gatts_cache_manager.o(i.gscm_local_database_has_changed))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = gscm_local_database_has_changed &rArr; pdb_raw_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_process &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_raw_store
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_next_peer_id_get
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_local_database_has_changed
</UL>

<P><STRONG><a name="[261]"></a>gscm_local_db_cache_apply</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, gatts_cache_manager.o(i.gscm_local_db_cache_apply))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = gscm_local_db_cache_apply &rArr; pdb_peer_data_ptr_get &rArr; pds_peer_data_read &rArr; fds_record_find &rArr; record_find
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_data_ptr_get
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_apply_in_evt
</UL>

<P><STRONG><a name="[262]"></a>gscm_local_db_cache_update</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, gatts_cache_manager.o(i.gscm_local_db_cache_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = gscm_local_db_cache_update &rArr; pdb_write_buf_store &rArr; write_buf_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_process &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_store
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_release
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_get
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pending_flags_check
</UL>

<P><STRONG><a name="[a9]"></a>gscm_pdb_evt_handler</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, gatts_cache_manager.o(i.gscm_pdb_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = gscm_pdb_evt_handler &rArr; pdb_raw_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_process &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_raw_store
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_next_peer_id_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> peer_database.o(.constdata)
</UL>
<P><STRONG><a name="[255]"></a>gscm_service_changed_ind_needed</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, gatts_cache_manager.o(i.gscm_service_changed_ind_needed))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = gscm_service_changed_ind_needed &rArr; pdb_peer_data_ptr_get &rArr; pds_peer_data_read &rArr; fds_record_find &rArr; record_find
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_data_ptr_get
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_im_evt_handler
</UL>

<P><STRONG><a name="[3aa]"></a>gscm_service_changed_ind_send</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, gatts_cache_manager.o(i.gscm_service_changed_ind_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gscm_service_changed_ind_send
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pending_flags_check
</UL>

<P><STRONG><a name="[3cd]"></a>haar1</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, bands.o(i.haar1))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = haar1
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tf_analysis
</UL>

<P><STRONG><a name="[330]"></a>hal_nfc_send</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, hal_nfc_t2t.o(i.hal_nfc_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = hal_nfc_send
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcHandleT2ReadCommand
</UL>

<P><STRONG><a name="[26c]"></a>hal_nfc_setup</STRONG> (Thumb, 272 bytes, Stack size 16 bytes, hal_nfc_t2t.o(i.hal_nfc_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = hal_nfc_setup &rArr; nrf_drv_clock_init &rArr; nrf_drv_common_irq_enable &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_init
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nfc_internal_bytes_setup
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_t2t_setup
</UL>

<P><STRONG><a name="[339]"></a>hal_nfc_start</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, hal_nfc_t2t.o(i.hal_nfc_start))
<BR><BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_t2t_emulation_start
</UL>

<P><STRONG><a name="[33a]"></a>hal_nfc_stop</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hal_nfc_t2t.o(i.hal_nfc_stop))
<BR><BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_t2t_emulation_stop
</UL>

<P><STRONG><a name="[1b2]"></a>hysteresis_decision</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, bands.o(i.hysteresis_decision))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hysteresis_decision
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_encode_with_ec
</UL>

<P><STRONG><a name="[271]"></a>im_ble_addr_get</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, id_manager.o(i.im_ble_addr_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = im_ble_addr_get &rArr; get_connection_by_conn_handle &rArr; ble_conn_state_user_flag_get &rArr; sdk_mapped_flags_get_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_connection_by_conn_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply
</UL>

<P><STRONG><a name="[190]"></a>im_ble_evt_handler</STRONG> (Thumb, 524 bytes, Stack size 176 bytes, id_manager.o(i.im_ble_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = im_ble_evt_handler &rArr; pds_peer_data_iterate &rArr; fds_record_open &rArr; record_find_by_desc
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_iterate_prepare
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_iterate
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_connection_by_conn_handle
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[25b]"></a>im_conn_handle_get</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, id_manager.o(i.im_conn_handle_get))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_pdb_evt_handler
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pdb_evt_handler
</UL>

<P><STRONG><a name="[275]"></a>im_device_identities_list_set</STRONG> (Thumb, 214 bytes, Stack size 336 bytes, id_manager.o(i.im_device_identities_list_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = im_device_identities_list_set &rArr; pds_peer_data_read &rArr; fds_record_find &rArr; record_find
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_read
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_device_identities_list_set
</UL>

<P><STRONG><a name="[277]"></a>im_find_duplicate_bonding_data</STRONG> (Thumb, 250 bytes, Stack size 48 bytes, id_manager.o(i.im_find_duplicate_bonding_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = im_find_duplicate_bonding_data &rArr; pds_peer_data_iterate &rArr; fds_record_open &rArr; record_find_by_desc
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_iterate_prepare
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_iterate
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_ble_evt_handler
</UL>

<P><STRONG><a name="[3b0]"></a>im_id_addr_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, id_manager.o(i.im_id_addr_get))
<BR><BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_id_addr_get
</UL>

<P><STRONG><a name="[278]"></a>im_init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, id_manager.o(i.im_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = im_init
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_init
</UL>

<P><STRONG><a name="[279]"></a>im_master_ids_compare</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, id_manager.o(i.im_master_ids_compare))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = im_master_ids_compare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_ble_evt_handler
</UL>

<P><STRONG><a name="[27a]"></a>im_new_peer_id</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, id_manager.o(i.im_new_peer_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = im_new_peer_id &rArr; get_connection_by_conn_handle &rArr; ble_conn_state_user_flag_get &rArr; sdk_mapped_flags_get_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_connection_by_conn_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_ble_evt_handler
</UL>

<P><STRONG><a name="[27b]"></a>im_peer_free</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, id_manager.o(i.im_peer_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_process &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_free
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_connection_by_conn_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peer_delete
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peers_delete
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_failure
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_ble_evt_handler
</UL>

<P><STRONG><a name="[252]"></a>im_peer_id_get_by_conn_handle</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, id_manager.o(i.im_peer_id_get_by_conn_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = im_peer_id_get_by_conn_handle &rArr; get_connection_by_conn_handle &rArr; ble_conn_state_user_flag_get &rArr; sdk_mapped_flags_get_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_connection_by_conn_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peer_id_get
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_service_changed_ind_needed
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_local_db_cache_update
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_local_db_cache_apply
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_local_database_has_changed
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ble_evt_handler
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pending_flags_check
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_apply_in_evt
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_failure
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply_perform
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;params_reply_pending_process
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_ble_evt_handler
</UL>

<P><STRONG><a name="[27d]"></a>im_peer_id_get_by_master_id</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, id_manager.o(i.im_peer_id_get_by_master_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = im_peer_id_get_by_master_id &rArr; pds_peer_data_iterate &rArr; fds_record_open &rArr; record_find_by_desc
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_iterate_prepare
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_iterate
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_ble_evt_handler
</UL>

<P><STRONG><a name="[27e]"></a>im_whitelist_get</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, id_manager.o(i.im_whitelist_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = im_whitelist_get &rArr; peers_id_keys_get &rArr; pds_peer_data_read &rArr; fds_record_find &rArr; record_find
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peers_id_keys_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_whitelist_get
</UL>

<P><STRONG><a name="[280]"></a>im_whitelist_set</STRONG> (Thumb, 160 bytes, Stack size 120 bytes, id_manager.o(i.im_whitelist_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = im_whitelist_set &rArr; peers_id_keys_get &rArr; pds_peer_data_read &rArr; fds_record_find &rArr; record_find
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peers_id_keys_get
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_whitelist_set
</UL>

<P><STRONG><a name="[1b1]"></a>init_caps</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, celt.o(i.init_caps))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = init_caps
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_encode_with_ec
</UL>

<P><STRONG><a name="[1eb]"></a>isqrt32</STRONG> (Thumb, 100 bytes, Stack size 12 bytes, mathops.o(i.isqrt32))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = isqrt32
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_theta
</UL>

<P><STRONG><a name="[283]"></a>key_combo_util_init</STRONG> (Thumb, 246 bytes, Stack size 40 bytes, key_combo_util.o(i.key_combo_util_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = key_combo_util_init &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_init
</UL>

<P><STRONG><a name="[a2]"></a>key_combo_util_key_process</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, key_combo_util.o(i.key_combo_util_key_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = key_combo_util_key_process &rArr; process_combo_key_change &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_combo_key_change
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_init.o(.constdata)
</UL>
<P><STRONG><a name="[289]"></a>m_acc_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, m_acc.o(i.m_acc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = m_acc_init &rArr; drv_acc_init &rArr; drv_acc_mode_set &rArr; lis3dh_int_clear &rArr; twi_perform &rArr; nrf_twi_mngr_perform &rArr; start_pending_transaction &rArr; nrf_drv_twi_init &rArr; nrf_drv_common_irq_enable &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_acc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_init
</UL>

<P><STRONG><a name="[28a]"></a>m_audio_bitrate_gauge_log</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, m_audio_gauges.o(i.m_audio_bitrate_gauge_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = m_audio_bitrate_gauge_log &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_4
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_audio_log_gauges
</UL>

<P><STRONG><a name="[28b]"></a>m_audio_bitrate_gauge_reset</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, m_audio_gauges.o(i.m_audio_bitrate_gauge_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = m_audio_bitrate_gauge_reset &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_audio_reset_gauges
</UL>

<P><STRONG><a name="[28c]"></a>m_audio_count_discarded</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, m_audio_gauges.o(i.m_audio_count_discarded))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = m_audio_count_discarded
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___16_m_audio_gauges_c_ea2b1805__nrf_atomic_internal_add
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_audio_send
</UL>

<P><STRONG><a name="[20b]"></a>m_audio_count_lost</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, m_audio_gauges.o(i.m_audio_count_lost))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = m_audio_count_lost
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___16_m_audio_gauges_c_ea2b1805__nrf_atomic_internal_add
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_audio_pdm_event_handler
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_audio_send
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_audio_process
</UL>

<P><STRONG><a name="[20c]"></a>m_audio_count_total</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, m_audio_gauges.o(i.m_audio_count_total))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = m_audio_count_total
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___16_m_audio_gauges_c_ea2b1805__nrf_atomic_internal_add
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_audio_pdm_event_handler
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_audio_process
</UL>

<P><STRONG><a name="[28e]"></a>m_audio_cpu_gauge_log</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, m_audio_gauges.o(i.m_audio_cpu_gauge_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = m_audio_cpu_gauge_log &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_4
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_audio_log_gauges
</UL>

<P><STRONG><a name="[28f]"></a>m_audio_cpu_gauge_reset</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, m_audio_gauges.o(i.m_audio_cpu_gauge_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = m_audio_cpu_gauge_reset &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_audio_reset_gauges
</UL>

<P><STRONG><a name="[290]"></a>m_audio_disable</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, m_audio.o(i.m_audio_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = m_audio_disable &rArr; app_isched_event_put &rArr; nrf_queue_push &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_isched_event_put
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_audio_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_system_state_event_handler
</UL>

<P><STRONG><a name="[291]"></a>m_audio_enable</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, m_audio.o(i.m_audio_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = m_audio_enable &rArr; app_isched_event_put &rArr; nrf_queue_push &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_isched_event_put
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_audio_enable
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_audio_codec_init
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_system_state_event_handler
</UL>

<P><STRONG><a name="[292]"></a>m_audio_frame_get</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, m_audio_frame.o(i.m_audio_frame_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = m_audio_frame_get &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_alloc
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_send_audio
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_audio_process
</UL>

<P><STRONG><a name="[293]"></a>m_audio_frame_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, m_audio_frame.o(i.m_audio_frame_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = m_audio_frame_init &rArr; nrf_balloc_init &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_init
</UL>

<P><STRONG><a name="[296]"></a>m_audio_frame_pool_current_utilization_get</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, m_audio_frame.o(i.m_audio_frame_pool_current_utilization_get))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_audio_log_statistics
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_audio_info_cmd
</UL>

<P><STRONG><a name="[295]"></a>m_audio_frame_pool_max_utilization_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, m_audio_frame.o(i.m_audio_frame_pool_max_utilization_get))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_audio_info_cmd
</UL>

<P><STRONG><a name="[294]"></a>m_audio_frame_put</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, m_audio_frame.o(i.m_audio_frame_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = m_audio_frame_put &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_free
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_audio_frame_free_func
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_audio_send
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_audio_process
</UL>

<P><STRONG><a name="[297]"></a>m_audio_init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, m_audio.o(i.m_audio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = m_audio_init &rArr; drv_audio_init &rArr; nrf_drv_pdm_init &rArr; nrf_drv_common_irq_enable &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_init
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_audio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_init
</UL>

<P><STRONG><a name="[205]"></a>m_audio_loss_gauge_log</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, m_audio_gauges.o(i.m_audio_loss_gauge_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = m_audio_loss_gauge_log &rArr; nrf_log_frontend_std_6 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_6
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_audio_disable
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_audio_log_gauges
</UL>

<P><STRONG><a name="[207]"></a>m_audio_loss_gauge_reset</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, m_audio_gauges.o(i.m_audio_loss_gauge_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = m_audio_loss_gauge_reset &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_audio_enable
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_audio_reset_gauges
</UL>

<P><STRONG><a name="[299]"></a>m_audio_measure_bitrate</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, m_audio_gauges.o(i.m_audio_measure_bitrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = m_audio_measure_bitrate &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_audio_process
</UL>

<P><STRONG><a name="[29a]"></a>m_audio_measure_cpu_usage_end</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, m_audio_gauges.o(i.m_audio_measure_cpu_usage_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = m_audio_measure_cpu_usage_end
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_cnt_get
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_cnt_diff_compute
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_audio_process
</UL>

<P><STRONG><a name="[29b]"></a>m_audio_measure_cpu_usage_start</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, m_audio_gauges.o(i.m_audio_measure_cpu_usage_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = m_audio_measure_cpu_usage_start &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_cnt_get
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_audio_process
</UL>

<P><STRONG><a name="[29d]"></a>m_batt_meas_init</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, m_batt_meas.o(i.m_batt_meas_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = m_batt_meas_init &rArr; nrf_drv_saadc_init &rArr; nrf_drv_common_irq_enable &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_init
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_channel_init
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_calibrate_offset
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_init
</UL>

<P><STRONG><a name="[4f]"></a>m_batt_meas_saadc_event_handler</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, m_batt_meas.o(i.m_batt_meas_saadc_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = m_batt_meas_saadc_event_handler &rArr; app_isched_event_put &rArr; nrf_queue_push &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_isched_event_put
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_batt_meas.o(i.m_batt_meas_init)
</UL>
<P><STRONG><a name="[a1]"></a>m_buzzer_event_handler</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, m_buzzer.o(i.m_buzzer_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = m_buzzer_event_handler &rArr; m_buzzer_play &rArr; drv_buzzer_enable &rArr; nrf_drv_pwm_complex_playback &rArr; nrf_pwm_sequence_set &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_buzzer_play
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_init.o(.constdata)
</UL>
<P><STRONG><a name="[2a7]"></a>m_buzzer_init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, m_buzzer.o(i.m_buzzer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = m_buzzer_init &rArr; drv_buzzer_init &rArr; nrf_drv_pwm_init &rArr; nrf_drv_common_irq_enable &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_buzzer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_init
</UL>

<P><STRONG><a name="[2a8]"></a>m_coms_audio_service_disable</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, m_coms.o(i.m_coms_audio_service_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = m_coms_audio_service_disable &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_system_state_event_handler
</UL>

<P><STRONG><a name="[2a9]"></a>m_coms_audio_service_enable</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, m_coms.o(i.m_coms_audio_service_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = m_coms_audio_service_enable &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_system_state_event_handler
</UL>

<P><STRONG><a name="[2da]"></a>m_coms_ble_addr_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, m_coms_ble_addr.o(i.m_coms_ble_addr_init))
<BR><BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_init
</UL>

<P><STRONG><a name="[2aa]"></a>m_coms_ble_addr_peer_ids_get</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, m_coms_ble_addr.o(i.m_coms_ble_addr_peer_ids_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = m_coms_ble_addr_peer_ids_get &rArr; pm_next_peer_id_get &rArr; pdb_next_peer_id_get &rArr; pds_next_peer_id_get &rArr; peer_id_get_next_used
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_next_peer_id_get
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_adv_real_start
</UL>

<P><STRONG><a name="[2af]"></a>m_coms_ble_adv_init</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, m_coms_ble_adv.o(i.m_coms_ble_adv_init))
<BR><BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_register
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_init
</UL>

<P><STRONG><a name="[2ee]"></a>m_coms_ble_adv_running</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, m_coms_ble_adv.o(i.m_coms_ble_adv_running))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_on_ble_evt
</UL>

<P><STRONG><a name="[2b8]"></a>m_coms_ble_adv_start</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, m_coms_ble_adv.o(i.m_coms_ble_adv_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 888<LI>Call Chain = m_coms_ble_adv_start &rArr; m_coms_ble_adv_real_start &rArr; pm_peer_delete &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_process &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_adv_real_start
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_adv_determine
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_advertise
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_init
</UL>

<P><STRONG><a name="[2b9]"></a>m_coms_ble_adv_stop</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, m_coms_ble_adv.o(i.m_coms_ble_adv_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = m_coms_ble_adv_stop &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_shutdown
</UL>

<P><STRONG><a name="[2ba]"></a>m_coms_ble_advertise</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, m_coms_ble.o(i.m_coms_ble_advertise))
<BR><BR>[Stack]<UL><LI>Max Depth = 888<LI>Call Chain = m_coms_ble_advertise &rArr; m_coms_ble_adv_start &rArr; m_coms_ble_adv_real_start &rArr; pm_peer_delete &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_process &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_adv_start
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_system_state_event_handler
</UL>

<P><STRONG><a name="[2bb]"></a>m_coms_ble_battery_level_update</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, m_coms_ble.o(i.m_coms_ble_battery_level_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = m_coms_ble_battery_level_update &rArr; ble_bas_battery_level_update
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bas_battery_level_update
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_event_handler
</UL>

<P><STRONG><a name="[2bd]"></a>m_coms_ble_bond_stored</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, m_coms_ble.o(i.m_coms_ble_bond_stored))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = m_coms_ble_bond_stored &rArr; pm_peer_count &rArr; pdb_n_peers &rArr; pds_peer_count_get &rArr; peer_id_n_ids
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peer_count
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_system_state_event_handler
</UL>

<P><STRONG><a name="[2c0]"></a>m_coms_ble_dfu_init</STRONG> (Thumb, 488 bytes, Stack size 104 bytes, m_coms_ble_dfu.o(i.m_coms_ble_dfu_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 888<LI>Call Chain = m_coms_ble_dfu_init &rArr; pm_local_database_has_changed &rArr; gcm_local_database_has_changed &rArr; pending_flags_check &rArr; gscm_local_db_cache_update &rArr; pdb_write_buf_store &rArr; write_buf_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_process &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___16_m_coms_ble_dfu_c_d6932032__nrf_atomic_internal_and
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___16_m_coms_ble_dfu_c_d6932032__nrf_atomic_internal_orr
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_local_database_has_changed
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_init
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_erase
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc32_compute
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_init
</UL>

<P><STRONG><a name="[2ca]"></a>m_coms_ble_hid_init</STRONG> (Thumb, 978 bytes, Stack size 408 bytes, m_coms_ble_hid.o(i.m_coms_ble_hid_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = m_coms_ble_hid_init &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hids_init
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;security_mode_set
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;security_mode_cccd_set
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_init
</UL>

<P><STRONG><a name="[2cd]"></a>m_coms_ble_hid_input_report_send</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, m_coms_ble_hid.o(i.m_coms_ble_hid_input_report_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = m_coms_ble_hid_input_report_send &rArr; ble_hids_inp_rep_send
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hids_inp_rep_send
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_hid_report_send
</UL>

<P><STRONG><a name="[2cf]"></a>m_coms_ble_hid_keyboard_boot_report_send</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, m_coms_ble_hid.o(i.m_coms_ble_hid_keyboard_boot_report_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = m_coms_ble_hid_keyboard_boot_report_send &rArr; ble_hids_boot_kb_inp_rep_send
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hids_boot_kb_inp_rep_send
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_hid_report_send
</UL>

<P><STRONG><a name="[2d1]"></a>m_coms_ble_hid_mouse_boot_report_send</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, m_coms_ble_hid.o(i.m_coms_ble_hid_mouse_boot_report_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = m_coms_ble_hid_mouse_boot_report_send &rArr; ble_hids_boot_mouse_inp_rep_send &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hids_boot_mouse_inp_rep_send
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_hid_report_send
</UL>

<P><STRONG><a name="[2d2]"></a>m_coms_ble_hid_report_send</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, m_coms_ble.o(i.m_coms_ble_hid_report_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = m_coms_ble_hid_report_send &rArr; m_coms_ble_hid_mouse_boot_report_send &rArr; ble_hids_boot_mouse_inp_rep_send &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_hid_mouse_boot_report_send
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_hid_keyboard_boot_report_send
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_hid_input_report_send
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_process_xy_motion
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_process_wp_motion
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_channel_process
</UL>

<P><STRONG><a name="[2d3]"></a>m_coms_ble_init</STRONG> (Thumb, 1150 bytes, Stack size 128 bytes, m_coms_ble.o(i.m_coms_ble_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016<LI>Call Chain = m_coms_ble_init &rArr; m_coms_ble_dfu_init &rArr; pm_local_database_has_changed &rArr; gcm_local_database_has_changed &rArr; pending_flags_check &rArr; gscm_local_db_cache_update &rArr; pdb_write_buf_store &rArr; write_buf_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_process &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_sec_params_set
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_register
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peers_delete
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_init
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_enable_request
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_enable
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_app_ram_start_get
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_ble_uart_service_init
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_init
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_att_mtu_periph_set
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_lesc_init
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_hid_init
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_dfu_init
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_adv_start
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_adv_init
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_addr_init
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_ascii_to_utf8
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ias_init
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dis_init
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_init
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bas_init
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_init
</UL>

<P><STRONG><a name="[2ad]"></a>m_coms_ble_lesc_generate_key</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, m_coms_ble_lesc.o(i.m_coms_ble_lesc_generate_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = m_coms_ble_lesc_generate_key &rArr; rng_monitor_request &rArr; app_isched_event_put &rArr; nrf_queue_push &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rng_monitor_request
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___17_m_coms_ble_lesc_c_d078621f__nrf_atomic_internal_and
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___17_m_coms_ble_lesc_c_d078621f__nrf_atomic_internal_orr
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_adv_pm_evt_handler
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_adv_determine
</UL>

<P><STRONG><a name="[2e6]"></a>m_coms_ble_lesc_generate_oob_data</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, m_coms_ble_lesc.o(i.m_coms_ble_lesc_generate_oob_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = m_coms_ble_lesc_generate_oob_data &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_nfc_prepare_pairing_keys
</UL>

<P><STRONG><a name="[2db]"></a>m_coms_ble_lesc_init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, m_coms_ble_lesc.o(i.m_coms_ble_lesc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = m_coms_ble_lesc_init &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___17_m_coms_ble_lesc_c_d078621f__nrf_atomic_internal_and
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_init
</UL>

<P><STRONG><a name="[2c9]"></a>m_coms_ble_oobkey_set</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, m_coms_ble.o(i.m_coms_ble_oobkey_set))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_evt_handler
</UL>

<P><STRONG><a name="[2ed]"></a>m_coms_ble_shutdown</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, m_coms_ble.o(i.m_coms_ble_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = m_coms_ble_shutdown &rArr; app_sched_event_put &rArr; app_isched_event_put &rArr; nrf_queue_push &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sched_event_put
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_is_busy
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_adv_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_shutdown
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_on_sys_evt
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_on_ble_evt
</UL>

<P><STRONG><a name="[2f0]"></a>m_coms_ble_sl_disable</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, m_coms_ble.o(i.m_coms_ble_sl_disable), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_m_coms_ble_c_51a43647__nrf_atomic_internal_add
</UL>

<P><STRONG><a name="[2ef]"></a>m_coms_ble_sl_enable</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, m_coms_ble.o(i.m_coms_ble_sl_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = m_coms_ble_sl_enable &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_m_coms_ble_c_51a43647__nrf_atomic_internal_sub
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_manager_evt_handler
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_sl_enable_cmd
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_on_ble_evt
</UL>

<P><STRONG><a name="[9e]"></a>m_coms_event_handler</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, m_coms.o(i.m_coms_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = m_coms_event_handler &rArr; m_coms_enqueue_report &rArr; m_coms_channel_enqueue &rArr; nrf_queue_push &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_process_data
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_enqueue_report
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_battery_level_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_init.o(.constdata)
</UL>
<P><STRONG><a name="[2f7]"></a>m_coms_init</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, m_coms.o(i.m_coms_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1032<LI>Call Chain = m_coms_init &rArr; m_coms_ble_init &rArr; m_coms_ble_dfu_init &rArr; pm_local_database_has_changed &rArr; gcm_local_database_has_changed &rArr; pending_flags_check &rArr; gscm_local_db_cache_update &rArr; pdb_write_buf_store &rArr; write_buf_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_process &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_init
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_init
</UL>

<P><STRONG><a name="[29c]"></a>m_coms_send_audio</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, m_coms.o(i.m_coms_send_audio))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = m_coms_send_audio &rArr; m_coms_channel_enqueue &rArr; nrf_queue_push &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_free
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_alloc
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_process_data
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_channel_enqueue
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_audio_frame_get
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_audio_send
</UL>

<P><STRONG><a name="[2f9]"></a>m_init</STRONG> (Thumb, 266 bytes, Stack size 16 bytes, m_init.o(i.m_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048<LI>Call Chain = m_init &rArr; m_coms_init &rArr; m_coms_ble_init &rArr; m_coms_ble_dfu_init &rArr; pm_local_database_has_changed &rArr; gcm_local_database_has_changed &rArr; pending_flags_check &rArr; gscm_local_db_cache_update &rArr; pdb_write_buf_store &rArr; write_buf_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_process &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_init
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_combo_util_init
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_board_init
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_buzzer_init
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_batt_meas_init
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_audio_frame_init
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_audio_init
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_acc_init
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_bus_init
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_init
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_system_state_init
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_protocol_ir_init
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_protocol_hid_init
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_nfc_init
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_keyboard_init
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_keyboard_enable
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_ir_tx_init
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a0]"></a>m_ir_tx_event_handler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, m_ir_tx.o(i.m_ir_tx_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = m_ir_tx_event_handler &rArr; m_ir_tx_send_symbol &rArr; drv_ir_send_symbol &rArr; nrf_drv_pwm_simple_playback &rArr; nrf_pwm_sequence_set &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_ir_tx_send_symbol
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_init.o(.constdata)
</UL>
<P><STRONG><a name="[302]"></a>m_ir_tx_init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, m_ir_tx.o(i.m_ir_tx_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = m_ir_tx_init &rArr; drv_ir_init &rArr; nrf_drv_pwm_init &rArr; nrf_drv_common_irq_enable &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ir_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_init
</UL>

<P><STRONG><a name="[304]"></a>m_keyboard_disable</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, m_keyboard.o(i.m_keyboard_disable), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_keyboard_disable
</UL>

<P><STRONG><a name="[301]"></a>m_keyboard_enable</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, m_keyboard.o(i.m_keyboard_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = m_keyboard_enable &rArr; drv_keyboard_enable &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_keyboard_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_init
</UL>

<P><STRONG><a name="[2ff]"></a>m_keyboard_init</STRONG> (Thumb, 212 bytes, Stack size 56 bytes, m_keyboard.o(i.m_keyboard_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = m_keyboard_init &rArr; app_sched_event_put &rArr; app_isched_event_put &rArr; nrf_queue_push &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sched_event_put
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_push
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_keyboard_keys_get
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_keyboard_init
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memset4_12
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_init
</UL>

<P><STRONG><a name="[9f]"></a>m_nfc_event_handler</STRONG> (Thumb, 322 bytes, Stack size 96 bytes, m_nfc.o(i.m_nfc_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = m_nfc_event_handler &rArr; m_nfc_prepare_pairing_keys &rArr; nfc_ble_pair_default_msg_encode &rArr; nfc_ble_full_handover_select_msg_encode &rArr; nfc_ndef_msg_encode &rArr; nfc_ndef_record_encode &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_t2t_payload_set
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_t2t_emulation_stop
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_t2t_emulation_start
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_ndef_msg_record_add
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_ndef_msg_encode
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_ndef_msg_clear
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_nfc_prepare_pairing_keys
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_init.o(.constdata)
</UL>
<P><STRONG><a name="[2c8]"></a>m_nfc_get_tk</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, m_nfc.o(i.m_nfc_get_tk))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_evt_handler
</UL>

<P><STRONG><a name="[300]"></a>m_nfc_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, m_nfc.o(i.m_nfc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = m_nfc_init &rArr; nfc_t2t_setup &rArr; hal_nfc_setup &rArr; nrf_drv_clock_init &rArr; nrf_drv_common_irq_enable &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_t2t_setup
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_init
</UL>

<P><STRONG><a name="[30f]"></a>m_protocol_hid_bt_event_handler</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, m_protocol_hid.o(i.m_protocol_hid_bt_event_handler), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_protocol_hid_state_disconnect
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_protocol_hid_state_connect
</UL>

<P><STRONG><a name="[9c]"></a>m_protocol_hid_event_handler</STRONG> (Thumb, 194 bytes, Stack size 8 bytes, m_protocol_hid.o(i.m_protocol_hid_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = m_protocol_hid_event_handler &rArr; m_protocol_hid_key_event_handler &rArr; m_protocol_hid_state_update &rArr; event_send &rArr; app_isched_event_put &rArr; nrf_queue_push &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_protocol_hid_state_update
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_protocol_hid_state_disconnect
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_protocol_hid_state_connect
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_protocol_hid_key_event_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_init.o(.constdata)
</UL>
<P><STRONG><a name="[2fd]"></a>m_protocol_hid_init</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, m_protocol_hid.o(i.m_protocol_hid_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = m_protocol_hid_init &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_protocol_hid_state_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_init
</UL>

<P><STRONG><a name="[312]"></a>m_protocol_hid_key_event_handler</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, m_protocol_hid.o(i.m_protocol_hid_key_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = m_protocol_hid_key_event_handler &rArr; m_protocol_hid_state_update &rArr; event_send &rArr; app_isched_event_put &rArr; nrf_queue_push &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_protocol_hid_state_update
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsearch
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_protocol_hid_event_handler
</UL>

<P><STRONG><a name="[310]"></a>m_protocol_hid_state_connect</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, m_protocol_hid_state.o(i.m_protocol_hid_state_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = m_protocol_hid_state_connect &rArr; app_isched_event_put &rArr; nrf_queue_push &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_cnt_get
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_isched_event_put
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_protocol_hid_state_eventq_cleanup
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_protocol_hid_bt_event_handler
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_protocol_hid_event_handler
</UL>

<P><STRONG><a name="[311]"></a>m_protocol_hid_state_disconnect</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, m_protocol_hid_state.o(i.m_protocol_hid_state_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = m_protocol_hid_state_disconnect
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_cnt_get
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_protocol_hid_bt_event_handler
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_protocol_hid_event_handler
</UL>

<P><STRONG><a name="[2f8]"></a>m_protocol_hid_state_get</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, m_protocol_hid_state.o(i.m_protocol_hid_state_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = m_protocol_hid_state_get &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsearch
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_process_xy_motion
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_process_wp_motion
</UL>

<P><STRONG><a name="[314]"></a>m_protocol_hid_state_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, m_protocol_hid_state.o(i.m_protocol_hid_state_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = m_protocol_hid_state_init
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_protocol_hid_init
</UL>

<P><STRONG><a name="[2f4]"></a>m_protocol_hid_state_page_it_init</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, m_protocol_hid_state.o(i.m_protocol_hid_state_page_it_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = m_protocol_hid_state_page_it_init &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsearch
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_create_mouse_btn_report
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_create_keyboard_report
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_create_consumer_ctrl_report
</UL>

<P><STRONG><a name="[2f5]"></a>m_protocol_hid_state_page_it_next</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, m_protocol_hid_state.o(i.m_protocol_hid_state_page_it_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = m_protocol_hid_state_page_it_next &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_create_mouse_btn_report
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_create_keyboard_report
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_create_consumer_ctrl_report
</UL>

<P><STRONG><a name="[313]"></a>m_protocol_hid_state_update</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, m_protocol_hid_state.o(i.m_protocol_hid_state_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = m_protocol_hid_state_update &rArr; event_send &rArr; app_isched_event_put &rArr; nrf_queue_push &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_isched_event_put
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_protocol_hid_state_set_value
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_protocol_hid_state_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_protocol_hid_key_event_handler
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_protocol_hid_event_handler
</UL>

<P><STRONG><a name="[9d]"></a>m_protocol_ir_event_handler</STRONG> (Thumb, 218 bytes, Stack size 40 bytes, m_protocol_ir.o(i.m_protocol_ir_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = m_protocol_ir_event_handler &rArr; event_send &rArr; app_isched_event_put &rArr; nrf_queue_push &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsearch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_init.o(.constdata)
</UL>
<P><STRONG><a name="[2fe]"></a>m_protocol_ir_init</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, m_protocol_ir.o(i.m_protocol_ir_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = m_protocol_ir_init &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_init
</UL>

<P><STRONG><a name="[9b]"></a>m_system_state_event_handler</STRONG> (Thumb, 294 bytes, Stack size 16 bytes, m_system_state.o(i.m_system_state_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 904<LI>Call Chain = m_system_state_event_handler &rArr; m_coms_ble_advertise &rArr; m_coms_ble_adv_start &rArr; m_coms_ble_adv_real_start &rArr; pm_peer_delete &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_process &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwr_mgmt_shutdown
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwr_mgmt_feed
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_audio_enable
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_audio_disable
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_bond_stored
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_advertise
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_audio_service_enable
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_audio_service_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_init.o(.constdata)
</UL>
<P><STRONG><a name="[2fc]"></a>m_system_state_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, m_system_state.o(i.m_system_state_init))
<BR><BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_init
</UL>

<P><STRONG><a name="[34]"></a>main</STRONG> (Thumb, 730 bytes, Stack size 40 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1088<LI>Call Chain = main &rArr; m_init &rArr; m_coms_init &rArr; m_coms_ble_init &rArr; m_coms_ble_dfu_init &rArr; pm_local_database_has_changed &rArr; gcm_local_database_has_changed &rArr; pending_flags_check &rArr; gscm_local_db_cache_update &rArr; pdb_write_buf_store &rArr; write_buf_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_process &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_manager_start
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_profiler_init
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rng_monitor_init
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_stack_guard_init
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwr_mgmt_init
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_mpu_init
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_init
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_wdt_init
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_wdt_enable
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_wdt_channel_alloc
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_request
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_init
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_crypto_init
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_task_create
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_init
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_init
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_init
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sched_init
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_isched_install_hook
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpiote_init
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[327]"></a>micro_ecc_curve_domain_get</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, micro_ecc_lib_shared.o(i.micro_ecc_curve_domain_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = micro_ecc_curve_domain_get
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_secp224r1
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_secp192r1
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_secp160r1
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_secp256r1
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_crypto_ecdh_shared_secret_compute
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_crypto_ecc_key_pair_generate
</UL>

<P><STRONG><a name="[dd]"></a>nfc_ac_rec_payload_constructor</STRONG> (Thumb, 218 bytes, Stack size 32 bytes, nfc_ac_rec.o(i.nfc_ac_rec_payload_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nfc_ac_rec_payload_constructor &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nfc_ble_pair_msg.o(.constdata)
</UL>
<P><STRONG><a name="[333]"></a>nfc_ble_full_handover_select_msg_encode</STRONG> (Thumb, 392 bytes, Stack size 288 bytes, nfc_ble_pair_msg.o(i.nfc_ble_full_handover_select_msg_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = nfc_ble_full_handover_select_msg_encode &rArr; nfc_ndef_msg_encode &rArr; nfc_ndef_record_encode &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_ndef_msg_record_add
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_ndef_msg_encode
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_hs_rec_local_record_add
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_ble_pair_default_msg_encode
</UL>

<P><STRONG><a name="[335]"></a>nfc_ble_oob_adv_data_encode</STRONG> (Thumb, 792 bytes, Stack size 168 bytes, nfc_ble_oob_advdata.o(i.nfc_ble_oob_adv_data_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = nfc_ble_oob_adv_data_encode &rArr; ble_advdata_encode &rArr; uuid_list_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_encode
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_tk_to_group_add
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_lesc_pos_set
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_le_oob_payload_constructor
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_ep_oob_payload_constructor
</UL>

<P><STRONG><a name="[30e]"></a>nfc_ble_pair_default_msg_encode</STRONG> (Thumb, 474 bytes, Stack size 216 bytes, nfc_ble_pair_msg.o(i.nfc_ble_pair_default_msg_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = nfc_ble_pair_default_msg_encode &rArr; nfc_ble_full_handover_select_msg_encode &rArr; nfc_ndef_msg_encode &rArr; nfc_ndef_record_encode &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_ndef_msg_record_add
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_ndef_msg_encode
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_ble_full_handover_select_msg_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_nfc_prepare_pairing_keys
</UL>

<P><STRONG><a name="[dc]"></a>nfc_ep_oob_payload_constructor</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, nfc_ep_oob_rec.o(i.nfc_ep_oob_payload_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = nfc_ep_oob_payload_constructor &rArr; nfc_ble_oob_adv_data_encode &rArr; ble_advdata_encode &rArr; uuid_list_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_ble_oob_adv_data_encode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nfc_ble_pair_msg.o(.constdata)
</UL>
<P><STRONG><a name="[334]"></a>nfc_hs_rec_local_record_add</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nfc_hs_rec.o(i.nfc_hs_rec_local_record_add))
<BR><BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_ndef_msg_record_add
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_ble_full_handover_select_msg_encode
</UL>

<P><STRONG><a name="[de]"></a>nfc_hs_rec_payload_constructor</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, nfc_hs_rec.o(i.nfc_hs_rec_payload_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = nfc_hs_rec_payload_constructor &rArr; nfc_ndef_msg_encode &rArr; nfc_ndef_record_encode &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_ndef_msg_encode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nfc_ble_pair_msg.o(.constdata)
</UL>
<P><STRONG><a name="[db]"></a>nfc_le_oob_payload_constructor</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, nfc_le_oob_rec.o(i.nfc_le_oob_payload_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = nfc_le_oob_payload_constructor &rArr; nfc_ble_oob_adv_data_encode &rArr; ble_advdata_encode &rArr; uuid_list_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_ble_oob_adv_data_encode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nfc_ble_pair_msg.o(.constdata)
</UL>
<P><STRONG><a name="[336]"></a>nfc_lesc_pos_set</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nfc_ble_pair_msg.o(i.nfc_lesc_pos_set))
<BR><BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_ble_oob_adv_data_encode
</UL>

<P><STRONG><a name="[307]"></a>nfc_ndef_msg_clear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nfc_ndef_msg.o(i.nfc_ndef_msg_clear))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_nfc_event_handler
</UL>

<P><STRONG><a name="[309]"></a>nfc_ndef_msg_encode</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, nfc_ndef_msg.o(i.nfc_ndef_msg_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = nfc_ndef_msg_encode &rArr; nfc_ndef_record_encode &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_ndef_record_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_ble_pair_default_msg_encode
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_nfc_event_handler
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_hs_rec_payload_constructor
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_ble_full_handover_select_msg_encode
</UL>

<P><STRONG><a name="[308]"></a>nfc_ndef_msg_record_add</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, nfc_ndef_msg.o(i.nfc_ndef_msg_record_add))
<BR><BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_ble_pair_default_msg_encode
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_nfc_event_handler
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_hs_rec_local_record_add
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_ble_full_handover_select_msg_encode
</UL>

<P><STRONG><a name="[338]"></a>nfc_ndef_record_encode</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, nfc_ndef_record.o(i.nfc_ndef_record_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nfc_ndef_record_encode &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_ndef_msg_encode
</UL>

<P><STRONG><a name="[30b]"></a>nfc_t2t_emulation_start</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, nfc_t2t_lib.o(i.nfc_t2t_emulation_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nfc_t2t_emulation_start &rArr; nfcChangeState
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nfc_start
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_nfc_prepare_pairing_keys
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_nfc_event_handler
</UL>

<P><STRONG><a name="[306]"></a>nfc_t2t_emulation_stop</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, nfc_t2t_lib.o(i.nfc_t2t_emulation_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nfc_t2t_emulation_stop &rArr; nfcChangeState
</UL>
<BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nfc_stop
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_nfc_shutdown
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_nfc_event_handler
</UL>

<P><STRONG><a name="[26b]"></a>nfc_t2t_internal_set</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, nfc_t2t_lib.o(i.nfc_t2t_internal_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nfc_t2t_internal_set
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcPrepareInternalBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nfc_internal_bytes_setup
</UL>

<P><STRONG><a name="[30a]"></a>nfc_t2t_payload_set</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, nfc_t2t_lib.o(i.nfc_t2t_payload_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nfc_t2t_payload_set &rArr; nfcRegisterPayload &rArr; nfcChangeState
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcResetReadState
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcRegisterPayload
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcCalculateAddresses
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_nfc_prepare_pairing_keys
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_nfc_event_handler
</UL>

<P><STRONG><a name="[30c]"></a>nfc_t2t_setup</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, nfc_t2t_lib.o(i.nfc_t2t_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = nfc_t2t_setup &rArr; hal_nfc_setup &rArr; nrf_drv_clock_init &rArr; nrf_drv_common_irq_enable &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nfc_setup
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcPrepareInternalBytes
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_nfc_init
</UL>

<P><STRONG><a name="[a3]"></a>nfc_text_rec_payload_constructor</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, nfc_text_rec.o(i.nfc_text_rec_payload_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nfc_text_rec_payload_constructor &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_nfc.o(.constdata)
</UL>
<P><STRONG><a name="[337]"></a>nfc_tk_to_group_add</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, nfc_ble_pair_msg.o(i.nfc_tk_to_group_add))
<BR><BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_ble_oob_adv_data_encode
</UL>

<P><STRONG><a name="[1ac]"></a>normalise_bands</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, bands.o(i.normalise_bands))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = normalise_bands &rArr; celt_rcp &rArr; app_error_handler &rArr;  app_error_fault_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_rcp
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_encode_with_ec
</UL>

<P><STRONG><a name="[33d]"></a>nrf_atfifo_clear</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, nrf_atfifo.o(i.nrf_atfifo_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atfifo_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_space_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uninit
</UL>

<P><STRONG><a name="[23e]"></a>nrf_atfifo_init</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, nrf_atfifo.o(i.nrf_atfifo_init))
<BR><BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[22b]"></a>nrf_atfifo_item_alloc</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, nrf_atfifo.o(i.nrf_atfifo_item_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_atfifo_item_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_wspace_req
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_gc
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_init
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_file_delete
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase
</UL>

<P><STRONG><a name="[340]"></a>nrf_atfifo_item_free</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, nrf_atfifo.o(i.nrf_atfifo_item_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atfifo_item_free
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_rspace_close
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_sys_evt_handler
</UL>

<P><STRONG><a name="[341]"></a>nrf_atfifo_item_get</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, nrf_atfifo.o(i.nrf_atfifo_item_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_atfifo_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_rspace_req
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[22c]"></a>nrf_atfifo_item_put</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, nrf_atfifo.o(i.nrf_atfifo_item_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atfifo_item_put
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_wspace_close
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_gc
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_init
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_file_delete
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase
</UL>

<P><STRONG><a name="[173]"></a>nrf_balloc_alloc</STRONG> (Thumb, 318 bytes, Stack size 48 bytes, nrf_balloc.o(i.nrf_balloc_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + In Cycle
<LI>Call Chain = nrf_balloc_alloc &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_4
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rng_monitor_request
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sched_event_put
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_audio_pdm_event_handler
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_enqueue_report
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_send_audio
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_audio_frame_get
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_alloc
</UL>

<P><STRONG><a name="[172]"></a>nrf_balloc_free</STRONG> (Thumb, 588 bytes, Stack size 48 bytes, nrf_balloc.o(i.nrf_balloc_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + In Cycle
<LI>Call Chain = nrf_balloc_free &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_4
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rng_monitor_request
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rng_monitor_process_requests
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sched_event_put
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sched_event_handler
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_audio_pdm_event_handler
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_report_free_func
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_enqueue_report
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_channel_process
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_channel_enqueue
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_send_audio
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_audio_frame_put
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_audio_process
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_process
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_put
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_free
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_alloc
</UL>

<P><STRONG><a name="[230]"></a>nrf_balloc_init</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, nrf_balloc.o(i.nrf_balloc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = nrf_balloc_init &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_4
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rng_monitor_init
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_audio_frame_init
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_audio_init
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_bus_init
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_init
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_pool_init
</UL>

<P><STRONG><a name="[2dd]"></a>nrf_ble_gatt_att_mtu_periph_set</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nrf_ble_gatt.o(i.nrf_ble_gatt_att_mtu_periph_set))
<BR><BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_init
</UL>

<P><STRONG><a name="[375]"></a>nrf_ble_gatt_eff_mtu_get</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrf_ble_gatt.o(i.nrf_ble_gatt_eff_mtu_get))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_handler
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nus_data_handler
</UL>

<P><STRONG><a name="[2dc]"></a>nrf_ble_gatt_init</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, nrf_ble_gatt.o(i.nrf_ble_gatt_init))
<BR><BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_init
</UL>

<P><STRONG><a name="[f5]"></a>nrf_ble_gatt_on_ble_evt</STRONG> (Thumb, 972 bytes, Stack size 56 bytes, nrf_ble_gatt.o(i.nrf_ble_gatt_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = nrf_ble_gatt_on_ble_evt &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_3
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_coms_ble.o(sdh_ble_observers0)
</UL>
<P><STRONG><a name="[2de]"></a>nrf_cli_ble_uart_service_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, nrf_cli_ble_uart.o(i.nrf_cli_ble_uart_service_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = nrf_cli_ble_uart_service_init &rArr; ble_nus_init
</UL>
<BR>[Calls]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_init
</UL>

<P><STRONG><a name="[bf]"></a>nrf_cli_cmd_cli_stats</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, nrf_cli.o(i.nrf_cli_cmd_cli_stats))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = nrf_cli_cmd_cli_stats &rArr; nrf_cli_build_in_cmd_common_executed &rArr; nrf_cli_help_print &rArr; nrf_cli_fprintf &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; unsigned_print &rArr; nrf_fprintf_buffer_flush &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_print
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_build_in_cmd_common_executed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_cli.o(.constdata)
</UL>
<P><STRONG><a name="[bd]"></a>nrf_cli_cmd_cli_stats_get</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, nrf_cli.o(i.nrf_cli_cmd_cli_stats_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = nrf_cli_cmd_cli_stats_get &rArr; nrf_cli_build_in_cmd_common_executed &rArr; nrf_cli_help_print &rArr; nrf_cli_fprintf &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; unsigned_print &rArr; nrf_fprintf_buffer_flush &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_max_utilization_get
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_build_in_cmd_common_executed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_cli.o(.constdata)
</UL>
<P><STRONG><a name="[be]"></a>nrf_cli_cmd_cli_stats_reset</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, nrf_cli.o(i.nrf_cli_cmd_cli_stats_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = nrf_cli_cmd_cli_stats_reset &rArr; nrf_cli_build_in_cmd_common_executed &rArr; nrf_cli_help_print &rArr; nrf_cli_fprintf &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; unsigned_print &rArr; nrf_fprintf_buffer_flush &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_max_utilization_reset
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_build_in_cmd_common_executed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_cli.o(.constdata)
</UL>
<P><STRONG><a name="[1c5]"></a>nrf_cli_fprintf</STRONG> (Thumb, 284 bytes, Stack size 48 bytes, nrf_cli.o(i.nrf_cli_fprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = nrf_cli_fprintf &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; unsigned_print &rArr; nrf_fprintf_buffer_flush &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_fmt
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_audio_set_gain_cmd
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_audio_set_cmd
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_audio_info_cmd
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_print
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_audio_codec_set_complexity_cmd
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_audio_codec_set_cmd
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_audio_codec_set_bitrate_cmd
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_audio_codec_info_cmd
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_audio_info_cmd
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_audio_cmd
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_sl_enable_cmd
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_sl_disable_cmd
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_cmd
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_mpu_cmd_unknown
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_mpu_cmd_info
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_mpu_cmd_dump
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_start
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_cmd_cli_stats_get
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_cmd_cli_stats
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_task
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_cmd_resize
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_cmd_history
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_cmd_echo
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_cmd_colors
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_build_in_cmd_common_executed
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;history_handle
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;completion_insert
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_state_collect
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_log_entry_process
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_insert
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_mnanager_info
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_status
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_ctrl
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_cmd
</UL>

<P><STRONG><a name="[1fc]"></a>nrf_cli_help_print</STRONG> (Thumb, 774 bytes, Stack size 80 bytes, nrf_cli.o(i.nrf_cli_help_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = nrf_cli_help_print &rArr; nrf_cli_fprintf &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; unsigned_print &rArr; nrf_fprintf_buffer_flush &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_offset_string_print
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_get
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_audio_set_gain_cmd
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_audio_set_cmd
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_audio_info_cmd
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_audio_codec_set_complexity_cmd
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_audio_codec_set_cmd
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_audio_codec_set_bitrate_cmd
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_audio_codec_info_cmd
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_audio_cmd
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_sl_enable_cmd
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_sl_disable_cmd
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_cmd
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_mpu_cmd_unknown
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_mpu_cmd_info
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_mpu_cmd_dump
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_cmd_cli_stats
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_cmd_colors
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_cmd_clear
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_build_in_cmd_common_executed
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_cmd
</UL>

<P><STRONG><a name="[2e9]"></a>nrf_cli_init</STRONG> (Thumb, 334 bytes, Stack size 56 bytes, nrf_cli.o(i.nrf_cli_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = nrf_cli_init &rArr; nrf_memobj_pool_init &rArr; nrf_balloc_init &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_pool_init
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_add
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsort
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_on_ble_evt
</UL>

<P><STRONG><a name="[1]"></a>nrf_cli_print_stream</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_cli.o(i.nrf_cli_print_stream))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = nrf_cli_print_stream &rArr; cli_write &rArr; task_events_wait &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_write
</UL>
<BR>[Address Reference Count : 2]<UL><LI> main.o(.data)
<LI> m_coms_ble.o(.data)
</UL>
<P><STRONG><a name="[1ee]"></a>nrf_cli_start</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, nrf_cli.o(i.nrf_cli_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = nrf_cli_start &rArr; nrf_cli_fprintf &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; unsigned_print &rArr; nrf_fprintf_buffer_flush &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_id_get
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_events_set
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_task
</UL>

<P><STRONG><a name="[2ea]"></a>nrf_cli_task_create</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, nrf_cli.o(i.nrf_cli_task_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = nrf_cli_task_create &rArr; task_create &rArr; nrf_log_frontend_std_4 &rArr;  std_n (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_create
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_on_ble_evt
</UL>

<P><STRONG><a name="[2ec]"></a>nrf_cli_uninit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, nrf_cli.o(i.nrf_cli_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = nrf_cli_uninit &rArr; task_events_set &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_events_set
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_on_ble_evt
</UL>

<P><STRONG><a name="[2e2]"></a>nrf_crypto_ecc_key_pair_generate</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, micro_ecc_lib_keys.o(i.nrf_crypto_ecc_key_pair_generate))
<BR><BR>[Stack]<UL><LI>Max Depth = 2424<LI>Call Chain = nrf_crypto_ecc_key_pair_generate &rArr; uECC_make_key &rArr; EccPoint_compute_public_key &rArr; EccPoint_mult &rArr; XYcZ_addC &rArr; uECC_vli_modSquare_fast &rArr; uECC_vli_square
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_crypto_ecc_public_key_size_get
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_crypto_ecc_private_key_size_get
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_make_key
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_crypto_is_initialized
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micro_ecc_curve_domain_get
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_lesc_calc_keys
</UL>

<P><STRONG><a name="[34c]"></a>nrf_crypto_ecc_private_key_size_get</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, nrf_crypto_keys.o(i.nrf_crypto_ecc_private_key_size_get))
<BR><BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_crypto_ecdh_shared_secret_compute
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_crypto_ecc_key_pair_generate
</UL>

<P><STRONG><a name="[2e7]"></a>nrf_crypto_ecc_public_key_from_raw</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, micro_ecc_lib_keys.o(i.nrf_crypto_ecc_public_key_from_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_crypto_ecc_public_key_from_raw &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_lesc_on_ble_evt
</UL>

<P><STRONG><a name="[34d]"></a>nrf_crypto_ecc_public_key_size_get</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, nrf_crypto_keys.o(i.nrf_crypto_ecc_public_key_size_get))
<BR><BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_crypto_ecdh_shared_secret_compute
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_crypto_ecc_public_key_to_raw
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_crypto_ecc_key_pair_generate
</UL>

<P><STRONG><a name="[2e3]"></a>nrf_crypto_ecc_public_key_to_raw</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, micro_ecc_lib_keys.o(i.nrf_crypto_ecc_public_key_to_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_crypto_ecc_public_key_to_raw &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_crypto_ecc_public_key_size_get
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_lesc_calc_keys
</UL>

<P><STRONG><a name="[2e0]"></a>nrf_crypto_ecdh_shared_secret_compute</STRONG> (Thumb, 268 bytes, Stack size 112 bytes, micro_ecc_lib_ecdh.o(i.nrf_crypto_ecdh_shared_secret_compute))
<BR><BR>[Stack]<UL><LI>Max Depth = 2720<LI>Call Chain = nrf_crypto_ecdh_shared_secret_compute &rArr; uECC_shared_secret &rArr; EccPoint_mult &rArr; XYcZ_addC &rArr; uECC_vli_modSquare_fast &rArr; uECC_vli_square
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_crypto_ecc_public_key_size_get
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_crypto_ecc_private_key_size_get
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_crypto_ecdh_shared_secret_size_get
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_shared_secret
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micro_ecc_curve_domain_get
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_lesc_calc_dh_key
</UL>

<P><STRONG><a name="[34e]"></a>nrf_crypto_ecdh_shared_secret_size_get</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, nrf_crypto_ecdh.o(i.nrf_crypto_ecdh_shared_secret_size_get))
<BR><BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_crypto_ecdh_shared_secret_compute
</UL>

<P><STRONG><a name="[323]"></a>nrf_crypto_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, micro_ecc_lib_init.o(i.nrf_crypto_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = nrf_crypto_init &rArr; nrf_crypto_rng_init &rArr; nrf_drv_rng_init &rArr; nrf_drv_common_irq_enable &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_crypto_rng_init
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[34b]"></a>nrf_crypto_is_initialized</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, micro_ecc_lib_init.o(i.nrf_crypto_is_initialized))
<BR><BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_crypto_ecc_key_pair_generate
</UL>

<P><STRONG><a name="[34f]"></a>nrf_crypto_rng_init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, nrf_crypto_sw_rng.o(i.nrf_crypto_rng_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = nrf_crypto_rng_init &rArr; nrf_drv_rng_init &rArr; nrf_drv_common_irq_enable &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_set_rng
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rng_init
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_crypto_init
</UL>

<P><STRONG><a name="[153]"></a>nrf_drv_clock_hfclk_release</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, nrf_drv_clock.o(i.nrf_drv_clock_hfclk_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = nrf_drv_clock_hfclk_release &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_is_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER4_IRQHandler
</UL>

<P><STRONG><a name="[141]"></a>nrf_drv_clock_hfclk_request</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, nrf_drv_clock.o(i.nrf_drv_clock_hfclk_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = nrf_drv_clock_hfclk_request &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_is_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFCT_IRQHandler
</UL>

<P><STRONG><a name="[26d]"></a>nrf_drv_clock_init</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, nrf_drv_clock.o(i.nrf_drv_clock_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = nrf_drv_clock_init &rArr; nrf_drv_common_irq_enable &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_is_enabled
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nfc_setup
</UL>

<P><STRONG><a name="[31c]"></a>nrf_drv_clock_lfclk_request</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, nrf_drv_clock.o(i.nrf_drv_clock_lfclk_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = nrf_drv_clock_lfclk_request &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[353]"></a>nrf_drv_clock_uninit</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, nrf_drv_clock.o(i.nrf_drv_clock_uninit), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_is_enabled
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_clock_irq_disable
</UL>

<P><STRONG><a name="[354]"></a>nrf_drv_common_clock_irq_disable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrf_drv_common.o(i.nrf_drv_common_clock_irq_disable), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_uninit
</UL>

<P><STRONG><a name="[352]"></a>nrf_drv_common_irq_enable</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, nrf_drv_common.o(i.nrf_drv_common_irq_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = nrf_drv_common_irq_enable &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_wdt_init
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_init
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_pwm_init
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_pdm_init
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_pdm_buffer_set
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_init
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_state_evt_handler
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rng_init
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_init
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_state_evt_handler
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_init
</UL>

<P><STRONG><a name="[355]"></a>nrf_drv_gpiote_in_event_disable</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, nrf_drv_gpiote.o(i.nrf_drv_gpiote_in_event_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = nrf_drv_gpiote_in_event_disable &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_enable
</UL>

<P><STRONG><a name="[356]"></a>nrf_drv_gpiote_in_event_enable</STRONG> (Thumb, 252 bytes, Stack size 32 bytes, nrf_drv_gpiote.o(i.nrf_drv_gpiote_in_event_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = nrf_drv_gpiote_in_event_enable &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_enable
</UL>

<P><STRONG><a name="[16d]"></a>nrf_drv_gpiote_in_init</STRONG> (Thumb, 274 bytes, Stack size 32 bytes, nrf_drv_gpiote.o(i.nrf_drv_gpiote_in_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = nrf_drv_gpiote_in_init &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpiote_user_register
</UL>

<P><STRONG><a name="[168]"></a>nrf_drv_gpiote_init</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, nrf_drv_gpiote.o(i.nrf_drv_gpiote_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = nrf_drv_gpiote_init &rArr; nrf_drv_common_irq_enable &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_enable
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpiote_init
</UL>

<P><STRONG><a name="[167]"></a>nrf_drv_gpiote_is_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.nrf_drv_gpiote_is_init))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpiote_init
</UL>

<P><STRONG><a name="[20d]"></a>nrf_drv_pdm_buffer_set</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, nrf_drv_pdm.o(i.nrf_drv_pdm_buffer_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = nrf_drv_pdm_buffer_set &rArr; nrf_drv_common_irq_enable &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_audio_pdm_event_handler
</UL>

<P><STRONG><a name="[20a]"></a>nrf_drv_pdm_init</STRONG> (Thumb, 256 bytes, Stack size 32 bytes, nrf_drv_pdm.o(i.nrf_drv_pdm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = nrf_drv_pdm_init &rArr; nrf_drv_common_irq_enable &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_audio_init
</UL>

<P><STRONG><a name="[208]"></a>nrf_drv_pdm_start</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, nrf_drv_pdm.o(i.nrf_drv_pdm_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = nrf_drv_pdm_start &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_audio_enable
</UL>

<P><STRONG><a name="[204]"></a>nrf_drv_pdm_stop</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, nrf_drv_pdm.o(i.nrf_drv_pdm_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = nrf_drv_pdm_stop &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_audio_disable
</UL>

<P><STRONG><a name="[212]"></a>nrf_drv_pwm_complex_playback</STRONG> (Thumb, 238 bytes, Stack size 40 bytes, nrf_drv_pwm.o(i.nrf_drv_pwm_complex_playback))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = nrf_drv_pwm_complex_playback &rArr; nrf_pwm_sequence_set &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwm_sequence_set
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_buzzer_enable
</UL>

<P><STRONG><a name="[214]"></a>nrf_drv_pwm_init</STRONG> (Thumb, 352 bytes, Stack size 56 bytes, nrf_drv_pwm.o(i.nrf_drv_pwm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = nrf_drv_pwm_init &rArr; nrf_drv_common_irq_enable &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ir_init
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_buzzer_init
</UL>

<P><STRONG><a name="[358]"></a>nrf_drv_pwm_is_stopped</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, nrf_drv_pwm.o(i.nrf_drv_pwm_is_stopped), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>

<P><STRONG><a name="[219]"></a>nrf_drv_pwm_simple_playback</STRONG> (Thumb, 232 bytes, Stack size 40 bytes, nrf_drv_pwm.o(i.nrf_drv_pwm_simple_playback))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = nrf_drv_pwm_simple_playback &rArr; nrf_pwm_sequence_set &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwm_sequence_set
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ir_send_symbol
</UL>

<P><STRONG><a name="[20f]"></a>nrf_drv_pwm_stop</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, nrf_drv_pwm.o(i.nrf_drv_pwm_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = nrf_drv_pwm_stop &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_handler
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_buzzer_disable
</UL>

<P><STRONG><a name="[359]"></a>nrf_drv_rng_bytes_available</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, nrf_drv_rng.o(i.nrf_drv_rng_bytes_available))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = nrf_drv_rng_bytes_available &rArr; nrf_queue_utilization_get &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_utilization_get
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_is_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rng_monitor_process_requests
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rng_func
</UL>

<P><STRONG><a name="[350]"></a>nrf_drv_rng_init</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, nrf_drv_rng.o(i.nrf_drv_rng_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = nrf_drv_rng_init &rArr; nrf_drv_common_irq_enable &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_is_enabled
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_crypto_rng_init
</UL>

<P><STRONG><a name="[30d]"></a>nrf_drv_rng_rand</STRONG> (Thumb, 160 bytes, Stack size 48 bytes, nrf_drv_rng.o(i.nrf_drv_rng_rand))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = nrf_drv_rng_rand &rArr; nrf_queue_read &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_read
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_is_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_nfc_prepare_pairing_keys
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rng_func
</UL>

<P><STRONG><a name="[2a3]"></a>nrf_drv_saadc_buffer_convert</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, nrf_drv_saadc.o(i.nrf_drv_saadc_buffer_convert))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = nrf_drv_saadc_buffer_convert &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_batt_meas_timeout_handler
</UL>

<P><STRONG><a name="[2a0]"></a>nrf_drv_saadc_calibrate_offset</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, nrf_drv_saadc.o(i.nrf_drv_saadc_calibrate_offset))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = nrf_drv_saadc_calibrate_offset &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_batt_meas_init
</UL>

<P><STRONG><a name="[29f]"></a>nrf_drv_saadc_channel_init</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, nrf_drv_saadc.o(i.nrf_drv_saadc_channel_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = nrf_drv_saadc_channel_init &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_channel_init
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_batt_meas_init
</UL>

<P><STRONG><a name="[2a1]"></a>nrf_drv_saadc_channel_uninit</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, nrf_drv_saadc.o(i.nrf_drv_saadc_channel_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = nrf_drv_saadc_channel_uninit &rArr; nrf_drv_saadc_limits_set &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_limits_set
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_batt_meas_shutdown
</UL>

<P><STRONG><a name="[29e]"></a>nrf_drv_saadc_init</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, nrf_drv_saadc.o(i.nrf_drv_saadc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = nrf_drv_saadc_init &rArr; nrf_drv_common_irq_enable &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_batt_meas_init
</UL>

<P><STRONG><a name="[35d]"></a>nrf_drv_saadc_limits_set</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, nrf_drv_saadc.o(i.nrf_drv_saadc_limits_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = nrf_drv_saadc_limits_set &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_uninit
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_channel_uninit
</UL>

<P><STRONG><a name="[2a4]"></a>nrf_drv_saadc_sample</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, nrf_drv_saadc.o(i.nrf_drv_saadc_sample))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = nrf_drv_saadc_sample &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_batt_meas_timeout_handler
</UL>

<P><STRONG><a name="[2a2]"></a>nrf_drv_saadc_uninit</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, nrf_drv_saadc.o(i.nrf_drv_saadc_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = nrf_drv_saadc_uninit &rArr; nrf_drv_saadc_limits_set &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_limits_set
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_batt_meas_shutdown
</UL>

<P><STRONG><a name="[35e]"></a>nrf_drv_twi_enable</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, nrf_drv_twi.o(i.nrf_drv_twi_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = nrf_drv_twi_enable &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twi_mngr_init
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pending_transaction
</UL>

<P><STRONG><a name="[35f]"></a>nrf_drv_twi_init</STRONG> (Thumb, 460 bytes, Stack size 40 bytes, nrf_drv_twi.o(i.nrf_drv_twi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = nrf_drv_twi_init &rArr; nrf_drv_common_irq_enable &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_enable
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twi_mngr_init
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pending_transaction
</UL>

<P><STRONG><a name="[361]"></a>nrf_drv_twi_uninit</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, nrf_drv_twi.o(i.nrf_drv_twi_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = nrf_drv_twi_uninit &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twi_mngr_uninit
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pending_transaction
</UL>

<P><STRONG><a name="[362]"></a>nrf_drv_twi_xfer</STRONG> (Thumb, 686 bytes, Stack size 48 bytes, nrf_drv_twi.o(i.nrf_drv_twi_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = nrf_drv_twi_xfer &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_transfer
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pending_transaction
</UL>

<P><STRONG><a name="[31a]"></a>nrf_drv_wdt_channel_alloc</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, nrf_drv_wdt.o(i.nrf_drv_wdt_channel_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = nrf_drv_wdt_channel_alloc &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[26f]"></a>nrf_drv_wdt_channel_feed</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, nrf_drv_wdt.o(i.nrf_drv_wdt_channel_feed))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = nrf_drv_wdt_channel_feed &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_task
</UL>

<P><STRONG><a name="[31b]"></a>nrf_drv_wdt_enable</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, nrf_drv_wdt.o(i.nrf_drv_wdt_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = nrf_drv_wdt_enable &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[319]"></a>nrf_drv_wdt_init</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, nrf_drv_wdt.o(i.nrf_drv_wdt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = nrf_drv_wdt_init &rArr; nrf_drv_common_irq_enable &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_enable
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c6]"></a>nrf_fprintf</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, nrf_fprintf.o(i.nrf_fprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; unsigned_print &rArr; nrf_fprintf_buffer_flush &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_fmt
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_print
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_std_entry_process
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_hexdump_entry_process
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_start
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_cmd_resize_default
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_cmd_resize
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_cmd_clear
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;history_handle
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_offset_string_print
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_position_synchronize
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_position_get
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_home_position_move
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;completion_insert
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_state_collect
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_log_entry_process
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_insert
</UL>

<P><STRONG><a name="[1f1]"></a>nrf_fprintf_buffer_flush</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, nrf_fprintf.o(i.nrf_fprintf_buffer_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = nrf_fprintf_buffer_flush &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned_print
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_std_entry_process
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_hexdump_entry_process
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_fmt
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_task
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_offset_string_print
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_position_get
</UL>

<P><STRONG><a name="[346]"></a>nrf_fprintf_fmt</STRONG> (Thumb, 1110 bytes, Stack size 56 bytes, nrf_fprintf_format.o(i.nrf_fprintf_fmt))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = nrf_fprintf_fmt &rArr; unsigned_print &rArr; nrf_fprintf_buffer_flush &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned_print
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_buffer_flush
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
</UL>

<P><STRONG><a name="[250]"></a>nrf_fstorage_erase</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, nrf_fstorage.o(i.nrf_fstorage_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_fstorage_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_dfu_fs_evt_handler
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_dfu_init
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_record_find_next
</UL>

<P><STRONG><a name="[23d]"></a>nrf_fstorage_init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrf_fstorage.o(i.nrf_fstorage_init))
<BR><BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_dfu_init
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_init
</UL>

<P><STRONG><a name="[2b1]"></a>nrf_fstorage_is_busy</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, nrf_fstorage.o(i.nrf_fstorage_is_busy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_fstorage_is_busy
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_adv_real_start
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_adv_on_sys_evt
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_on_sys_evt
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_shutdown
</UL>

<P><STRONG><a name="[101]"></a>nrf_fstorage_sdh_req_handler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrf_fstorage_sd.o(i.nrf_fstorage_sdh_req_handler))
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_sd.o(sdh_req_observers0)
</UL>
<P><STRONG><a name="[10a]"></a>nrf_fstorage_sdh_state_handler</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, nrf_fstorage_sd.o(i.nrf_fstorage_sdh_state_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = nrf_fstorage_sdh_state_handler &rArr; queue_process &rArr; nrf_fstorage_sys_evt_handler &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_sd.o(sdh_state_observers0)
</UL>
<P><STRONG><a name="[103]"></a>nrf_fstorage_sys_evt_handler</STRONG> (Thumb, 220 bytes, Stack size 40 bytes, nrf_fstorage_sd.o(i.nrf_fstorage_sys_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + In Cycle
<LI>Call Chain = nrf_fstorage_sys_evt_handler &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_free
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_request_continue
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_sd.o(sdh_soc_observers0)
</UL>
<P><STRONG><a name="[24f]"></a>nrf_fstorage_write</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, nrf_fstorage.o(i.nrf_fstorage_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_fstorage_write
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_dfu_on_ble_evt
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_dfu_fs_evt_handler
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_record_find_next
</UL>

<P><STRONG><a name="[348]"></a>nrf_log_backend_add</STRONG> (Thumb, 234 bytes, Stack size 36 bytes, nrf_log_frontend.o(i.nrf_log_backend_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nrf_log_backend_add &rArr; nrf_log_module_filter_get
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_module_filter_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_init
</UL>

<P><STRONG><a name="[1ef]"></a>nrf_log_backend_remove</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, nrf_log_frontend.o(i.nrf_log_backend_remove))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_task
</UL>

<P><STRONG><a name="[367]"></a>nrf_log_color_id_get</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, nrf_log_frontend.o(i.nrf_log_color_id_get))
<BR><BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_std_entry_process
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_hexdump_entry_process
</UL>

<P><STRONG><a name="[13b]"></a>nrf_log_frontend_dequeue</STRONG> (Thumb, 626 bytes, Stack size 88 bytes, nrf_log_frontend.o(i.nrf_log_frontend_dequeue))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = nrf_log_frontend_dequeue &rArr; nrf_memobj_put &rArr; nrf_balloc_free &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_write
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_put
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_get
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_task
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_process
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_c_handler
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduler_shutdown_handler
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>

<P><STRONG><a name="[140]"></a>nrf_log_frontend_std_0</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrf_log_frontend.o(i.nrf_log_frontend_std_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = nrf_log_frontend_std_0 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwr_mgmt_init
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rng_monitor_request
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rng_monitor_process_requests
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_combo_util_init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_process
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_acc_mode_set
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_channel_enqueue
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_evt_handler
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_buzzer_play
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_buzzer_ack
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwr_mgmt_feed
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_audio_enable
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_audio_disable
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_audio_shutdown
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_process
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_dfu_on_ble_evt
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_dfu_fs_evt_handler
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_lesc_key
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_adv_real_start
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_adv_on_sys_evt
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_adv_on_ble_evt
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_adv_determine
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_dfu_init
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_sl_enable
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_sl_disable
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_encrypt_timeout
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_sl_disable_cmd
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_on_sys_evt
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_on_ble_evt
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_evt_handler
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_shutdown
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_nfc_shutdown
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_nfc_handler
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_keyboard_disable
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_keyboard_shutdown
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_ir_tx_send_symbol
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_ir_tx_drv_ack_handler
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_ir_tx_ack_symbol
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_protocol_ir_init
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_protocol_hid_init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_nfc_event_handler
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_keyboard_enable
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_lesc_on_ble_evt
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_lesc_calc_keys
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_lesc_calc_dh_key
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduler_shutdown_handler
</UL>

<P><STRONG><a name="[13d]"></a>nrf_log_frontend_std_1</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrf_log_frontend.o(i.nrf_log_frontend_std_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sr3_core_log_statistics
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rng_monitor_process_requests
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_combo_util_key_process
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_combo_util_init
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_combo_key_change
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_process
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_keyboard_shutdown
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_keyboard_enable
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_keyboard_disable
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_keyboard_scan_handler
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_keyboard_interrupt_handler
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_audio_pdm_event_handler
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_log_statistics
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_evt_handler
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwr_mgmt_shutdown
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_buzzer_play
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_buzzer_ack_handler
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_buzzer_ack
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_audio_send
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_audio_process
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_audio_log_statistics
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_process
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_bus_log_statistics
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_dfu_fs_evt_handler
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_adv_real_start
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_adv_pm_evt_handler
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_enable
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_on_ble_evt
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_hid_init
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_adv_stop
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_adv_start
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_sl_enable
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_sl_disable
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_manager_evt_handler
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_sl_disable_cmd
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_on_ble_evt
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_evt_handler
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_protocol_hid_state_set_value
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_protocol_hid_state_log_statistics
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_protocol_hid_state_enqueue
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_nfc_prepare_pairing_keys
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_ir_tx_send_symbol
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_ir_tx_drv_ack_handler
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_ir_tx_ack_symbol
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduler_shutdown_handler
</UL>

<P><STRONG><a name="[164]"></a>nrf_log_frontend_std_2</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, nrf_log_frontend.o(i.nrf_log_frontend_std_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = nrf_log_frontend_std_2 &rArr;  std_n (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_stack_guard_init
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rng_monitor_request
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rng_monitor_process_requests
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_combo_key_change
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_free
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_audio_pdm_event_handler
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_process_data
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_evt_handler
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_batt_meas_process
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_process
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_adv_real_start
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_enable
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_on_ble_evt
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_manager_evt_handler
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_on_ble_evt
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_protocol_hid_state_eventq_cleanup
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_nfc_prepare_pairing_keys
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_schedule
</UL>

<P><STRONG><a name="[13f]"></a>nrf_log_frontend_std_3</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, nrf_log_frontend.o(i.nrf_log_frontend_std_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = nrf_log_frontend_std_3 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_stack_guard_init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sr3_core_log_statistics
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_process
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_audio_codec_log_config
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_on_ble_evt
</UL>

<P><STRONG><a name="[13e]"></a>nrf_log_frontend_std_4</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, nrf_log_frontend.o(i.nrf_log_frontend_std_4))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = nrf_log_frontend_std_4 &rArr;  std_n (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_manager_start
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_init
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_free
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_alloc
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_process
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_audio_set_gain_cmd
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_audio_cpu_gauge_log
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_audio_bitrate_gauge_log
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_process
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_manager_evt_handler
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_nfc_prepare_pairing_keys
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_lesc_calc_keys
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_lesc_calc_dh_key
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_create
</UL>

<P><STRONG><a name="[202]"></a>nrf_log_frontend_std_5</STRONG> (Thumb, 28 bytes, Stack size 32 bytes, nrf_log_frontend.o(i.nrf_log_frontend_std_5))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_audio_codec_log_config
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_process
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_manager_evt_handler
</UL>

<P><STRONG><a name="[298]"></a>nrf_log_frontend_std_6</STRONG> (Thumb, 28 bytes, Stack size 40 bytes, nrf_log_frontend.o(i.nrf_log_frontend_std_6))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = nrf_log_frontend_std_6 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_audio_loss_gauge_log
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_adv_real_start
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_nfc_prepare_pairing_keys
</UL>

<P><STRONG><a name="[1ce]"></a>nrf_log_hexdump_entry_process</STRONG> (Thumb, 236 bytes, Stack size 40 bytes, nrf_log_str_formatter.o(i.nrf_log_hexdump_entry_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = nrf_log_hexdump_entry_process &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; unsigned_print &rArr; nrf_fprintf_buffer_flush &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_buffer_flush
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_module_name_get
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_color_id_get
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_log_entry_process
</UL>

<P><STRONG><a name="[320]"></a>nrf_log_init</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, nrf_log_frontend.o(i.nrf_log_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = nrf_log_init &rArr; nrf_memobj_pool_init &rArr; nrf_balloc_init &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_pool_init
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[288]"></a>nrf_log_module_filter_get</STRONG> (Thumb, 140 bytes, Stack size 12 bytes, nrf_log_frontend.o(i.nrf_log_module_filter_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = nrf_log_module_filter_get
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_add
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_status
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_ctrl
</UL>

<P><STRONG><a name="[32c]"></a>nrf_log_module_name_get</STRONG> (Thumb, 60 bytes, Stack size 4 bytes, nrf_log_frontend.o(i.nrf_log_module_name_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = nrf_log_module_name_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_std_entry_process
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_hexdump_entry_process
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_name_get
</UL>

<P><STRONG><a name="[13a]"></a>nrf_log_panic</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, nrf_log_frontend.o(i.nrf_log_panic))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_log_panic
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_process
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_c_handler
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduler_shutdown_handler
</UL>

<P><STRONG><a name="[1cd]"></a>nrf_log_std_entry_process</STRONG> (Thumb, 278 bytes, Stack size 48 bytes, nrf_log_str_formatter.o(i.nrf_log_std_entry_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = nrf_log_std_entry_process &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; unsigned_print &rArr; nrf_fprintf_buffer_flush &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_buffer_flush
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_module_name_get
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_color_id_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_log_entry_process
</UL>

<P><STRONG><a name="[1d2]"></a>nrf_memobj_alloc</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, nrf_memobj.o(i.nrf_memobj_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = nrf_memobj_alloc &rArr; nrf_balloc_free &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_free
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_state_collect
</UL>

<P><STRONG><a name="[1d4]"></a>nrf_memobj_free</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, nrf_memobj.o(i.nrf_memobj_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = nrf_memobj_free &rArr; nrf_balloc_free &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_free
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_task
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_state_collect
</UL>

<P><STRONG><a name="[365]"></a>nrf_memobj_get</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrf_memobj.o(i.nrf_memobj_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_memobj_get
</UL>
<BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_memobj_c_9bb9f865__nrf_atomic_internal_add
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_cli_put
</UL>

<P><STRONG><a name="[347]"></a>nrf_memobj_pool_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nrf_memobj.o(i.nrf_memobj_pool_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = nrf_memobj_pool_init &rArr; nrf_balloc_init &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_init
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_init
</UL>

<P><STRONG><a name="[1cb]"></a>nrf_memobj_put</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, nrf_memobj.o(i.nrf_memobj_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = nrf_memobj_put &rArr; nrf_balloc_free &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_free
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_memobj_c_9bb9f865__nrf_atomic_internal_sub
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_log_entry_process
</UL>

<P><STRONG><a name="[1cc]"></a>nrf_memobj_read</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, nrf_memobj.o(i.nrf_memobj_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = nrf_memobj_read &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_task
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_cmd_history
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;history_handle
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_state_collect
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_log_entry_process
</UL>

<P><STRONG><a name="[1d3]"></a>nrf_memobj_write</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, nrf_memobj.o(i.nrf_memobj_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + In Cycle
<LI>Call Chain = nrf_memobj_write &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_task
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_state_collect
</UL>

<P><STRONG><a name="[321]"></a>nrf_mpu_init</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, nrf_mpu.o(i.nrf_mpu_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_mpu_init
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[36a]"></a>nrf_mpu_region_create</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, nrf_mpu.o(i.nrf_mpu_region_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = nrf_mpu_region_create &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_manager_start
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_stack_guard_init
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_schedule
</UL>

<P><STRONG><a name="[36b]"></a>nrf_mpu_region_destroy</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, nrf_mpu.o(i.nrf_mpu_region_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nrf_mpu_region_destroy &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_schedule
</UL>

<P><STRONG><a name="[1d0]"></a>nrf_pwr_mgmt_feed</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, nrf_pwr_mgmt.o(i.nrf_pwr_mgmt_feed))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = nrf_pwr_mgmt_feed &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_audio_send
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_nfc_handler
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_system_state_event_handler
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_state_collect
</UL>

<P><STRONG><a name="[325]"></a>nrf_pwr_mgmt_init</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, nrf_pwr_mgmt.o(i.nrf_pwr_mgmt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = nrf_pwr_mgmt_init &rArr; nrf_section_iter_init &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_init
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[88]"></a>nrf_pwr_mgmt_run</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, nrf_pwr_mgmt.o(i.nrf_pwr_mgmt_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = nrf_pwr_mgmt_run &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_is_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_task
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_shutdown
</UL>
<BR>[Address Reference Count : 1]<UL><LI> twi_common.o(i.twi_perform)
</UL>
<P><STRONG><a name="[2a5]"></a>nrf_pwr_mgmt_shutdown</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, nrf_pwr_mgmt.o(i.nrf_pwr_mgmt_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = nrf_pwr_mgmt_shutdown &rArr; app_sched_event_put &rArr; app_isched_event_put &rArr; nrf_queue_push &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sched_event_put
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___14_nrf_pwr_mgmt_c_f22138a6__nrf_atomic_internal_mov
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_evt_handler
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_buzzer_ack
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_dfu_fs_evt_handler
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_ir_tx_ack_symbol
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_system_state_event_handler
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwr_mgmt_timeout_handler
</UL>

<P><STRONG><a name="[16f]"></a>nrf_queue_generic_pop</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, nrf_queue.o(i.nrf_queue_generic_pop))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = nrf_queue_generic_pop &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_isched_events_execute
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rng_monitor_process_requests
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_channel_process
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_channel_enqueue
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_keyboard_process
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_log_entry_process
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pending_transaction
</UL>

<P><STRONG><a name="[145]"></a>nrf_queue_is_full</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, nrf_queue.o(i.nrf_queue_is_full))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = nrf_queue_is_full &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_IRQHandler
</UL>

<P><STRONG><a name="[171]"></a>nrf_queue_max_utilization_get</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, nrf_queue.o(i.nrf_queue_max_utilization_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = nrf_queue_max_utilization_get &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_isched_get_max_utilization
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_log_statistics
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_cmd_cli_stats_get
</UL>

<P><STRONG><a name="[345]"></a>nrf_queue_max_utilization_reset</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, nrf_queue.o(i.nrf_queue_max_utilization_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = nrf_queue_max_utilization_reset &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_cmd_cli_stats_reset
</UL>

<P><STRONG><a name="[144]"></a>nrf_queue_push</STRONG> (Thumb, 294 bytes, Stack size 40 bytes, nrf_queue.o(i.nrf_queue_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = nrf_queue_push &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twi_mngr_perform
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rng_monitor_request
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_isched_event_put
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_channel_enqueue
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_keyboard_process
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_keyboard_init
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_IRQHandler
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_cli_put
</UL>

<P><STRONG><a name="[35b]"></a>nrf_queue_read</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, nrf_queue.o(i.nrf_queue_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = nrf_queue_read &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rng_rand
</UL>

<P><STRONG><a name="[35a]"></a>nrf_queue_utilization_get</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, nrf_queue.o(i.nrf_queue_utilization_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = nrf_queue_utilization_get &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rng_bytes_available
</UL>

<P><STRONG><a name="[1c8]"></a>nrf_ringbuf_cpy_get</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, nrf_ringbuf.o(i.nrf_ringbuf_cpy_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = nrf_ringbuf_cpy_get &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_nrf_ringbuf_c_bac3c598__nrf_atomic_internal_and
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_nrf_ringbuf_c_bac3c598__nrf_atomic_internal_orr
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_ble_uart_read
</UL>

<P><STRONG><a name="[1c9]"></a>nrf_ringbuf_cpy_put</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, nrf_ringbuf.o(i.nrf_ringbuf_cpy_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = nrf_ringbuf_cpy_put &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_nrf_ringbuf_c_bac3c598__nrf_atomic_internal_and
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_nrf_ringbuf_c_bac3c598__nrf_atomic_internal_orr
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nus_data_handler
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_ble_uart_write
</UL>

<P><STRONG><a name="[36f]"></a>nrf_ringbuf_free</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, nrf_ringbuf.o(i.nrf_ringbuf_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_ringbuf_free
</UL>
<BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_nrf_ringbuf_c_bac3c598__nrf_atomic_internal_and
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_handler
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nus_data_handler
</UL>

<P><STRONG><a name="[370]"></a>nrf_ringbuf_get</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, nrf_ringbuf.o(i.nrf_ringbuf_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = nrf_ringbuf_get &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_nrf_ringbuf_c_bac3c598__nrf_atomic_internal_and
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_nrf_ringbuf_c_bac3c598__nrf_atomic_internal_orr
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_handler
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nus_data_handler
</UL>

<P><STRONG><a name="[1c7]"></a>nrf_ringbuf_init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, nrf_ringbuf.o(i.nrf_ringbuf_init))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_ble_uart_init
</UL>

<P><STRONG><a name="[35c]"></a>nrf_saadc_channel_init</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, nrf_saadc.o(i.nrf_saadc_channel_init))
<BR><BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_channel_init
</UL>

<P><STRONG><a name="[2d5]"></a>nrf_sdh_ble_app_ram_start_get</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrf_sdh_ble.o(i.nrf_sdh_ble_app_ram_start_get))
<BR><BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_init
</UL>

<P><STRONG><a name="[2d6]"></a>nrf_sdh_ble_enable</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, nrf_sdh_ble.o(i.nrf_sdh_ble_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = nrf_sdh_ble_enable &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_init
</UL>

<P><STRONG><a name="[19a]"></a>nrf_sdh_disable_request</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, nrf_sdh.o(i.nrf_sdh_disable_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = nrf_sdh_disable_request &rArr; nrf_section_iter_init &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_next
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_init
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_disable
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_request_continue
</UL>

<P><STRONG><a name="[2d4]"></a>nrf_sdh_enable_request</STRONG> (Thumb, 244 bytes, Stack size 40 bytes, nrf_sdh.o(i.nrf_sdh_enable_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = nrf_sdh_enable_request &rArr; nrf_section_iter_init &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_next
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_init
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_request_continue
</UL>

<P><STRONG><a name="[143]"></a>nrf_sdh_is_enabled</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_sdh.o(i.nrf_sdh_is_enabled))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwr_mgmt_run
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_init
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rng_bytes_available
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rng_rand
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_uninit
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_hfclk_request
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_hfclk_release
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_state_evt_handler
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rng_init
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_IRQHandler
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_state_evt_handler
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduler_shutdown_handler
</UL>

<P><STRONG><a name="[364]"></a>nrf_sdh_request_continue</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nrf_sdh.o(i.nrf_sdh_request_continue))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = nrf_sdh_request_continue &rArr; nrf_sdh_enable_request &rArr; nrf_section_iter_init &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_enable_request
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_disable_request
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_sys_evt_handler
</UL>

<P><STRONG><a name="[178]"></a>nrf_section_iter_init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, nrf_section_iter.o(i.nrf_section_iter_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = nrf_section_iter_init &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwr_mgmt_init
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_enable_request
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_disable_request
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_soc_evts_poll
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_evts_poll
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appsh_events_poll
</UL>

<P><STRONG><a name="[179]"></a>nrf_section_iter_next</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, nrf_section_iter.o(i.nrf_section_iter_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = nrf_section_iter_next &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_enable_request
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_disable_request
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduler_shutdown_handler
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_soc_evts_poll
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_evts_poll
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appsh_events_poll
</UL>

<P><STRONG><a name="[322]"></a>nrf_stack_guard_init</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, nrf_stack_guard.o(i.nrf_stack_guard_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = nrf_stack_guard_init &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_3
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_mpu_region_create
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[165]"></a>nrf_strerror_get</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, nrf_strerror.o(i.nrf_strerror_get))
<BR><BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_stack_guard_init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_enable
</UL>

<P><STRONG><a name="[371]"></a>nrf_twi_mngr_init</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, nrf_twi_mngr.o(i.nrf_twi_mngr_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = nrf_twi_mngr_init &rArr; nrf_drv_twi_init &rArr; nrf_drv_common_irq_enable &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_init
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_init
</UL>

<P><STRONG><a name="[372]"></a>nrf_twi_mngr_perform</STRONG> (Thumb, 212 bytes, Stack size 56 bytes, nrf_twi_mngr.o(i.nrf_twi_mngr_perform))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = nrf_twi_mngr_perform &rArr; start_pending_transaction &rArr; nrf_drv_twi_init &rArr; nrf_drv_common_irq_enable &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_push
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pending_transaction
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_perform
</UL>

<P><STRONG><a name="[374]"></a>nrf_twi_mngr_uninit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, nrf_twi_mngr.o(i.nrf_twi_mngr_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = nrf_twi_mngr_uninit &rArr; nrf_drv_twi_uninit &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_uninit
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_shutdown
</UL>

<P><STRONG><a name="[15d]"></a>op_pvq_search_c</STRONG> (Thumb, 762 bytes, Stack size 80 bytes, vq.o(i.op_pvq_search_c))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = op_pvq_search_c &rArr; celt_rcp &rArr; app_error_handler &rArr;  app_error_fault_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_rcp
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_quant
</UL>

<P><STRONG><a name="[1bc]"></a>opus_custom_encoder_ctl</STRONG> (Thumb, 664 bytes, Stack size 40 bytes, celt_encoder.o(i.opus_custom_encoder_ctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = opus_custom_encoder_ctl
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_encoder_init
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encoder_init
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encoder_ctl
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encode_native
</UL>

<P><STRONG><a name="[1ba]"></a>opus_custom_mode_create</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, modes.o(i.opus_custom_mode_create))
<BR><BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_encoder_init
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_encoder_get_size
</UL>

<P><STRONG><a name="[1fb]"></a>opus_encode</STRONG> (Thumb, 232 bytes, Stack size 72 bytes, opus_encoder.o(i.opus_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 3056<LI>Call Chain = opus_encode &rArr; opus_encode_native &rArr; celt_encode_with_ec &rArr; quant_all_bands &rArr; quant_band_stereo &rArr; quant_band &rArr; quant_partition &rArr;  quant_partition (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encode_native
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_audio_codec_encode
</UL>

<P><STRONG><a name="[228]"></a>opus_encode_native</STRONG> (Thumb, 4678 bytes, Stack size 224 bytes, opus_encoder.o(i.opus_encode_native))
<BR><BR>[Stack]<UL><LI>Max Depth = 2984<LI>Call Chain = opus_encode_native &rArr; celt_encode_with_ec &rArr; quant_all_bands &rArr; quant_band_stereo &rArr; quant_band &rArr; quant_partition &rArr;  quant_partition (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_biquad_alt_stride1
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_lin2log
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_biquad_alt_stride2_c
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_enc_bit_logp
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_enc_shrink
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_enc_init
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_enc_done
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_custom_encoder_ctl
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_encode_with_ec
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_log2lin
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_packet_pad
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_stereo_width
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_multiframe_packet
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_equiv_rate
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encode
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_multiframe_packet
</UL>

<P><STRONG><a name="[200]"></a>opus_encoder_ctl</STRONG> (Thumb, 1358 bytes, Stack size 32 bytes, opus_encoder.o(i.opus_encoder_ctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = opus_encoder_ctl &rArr; opus_custom_encoder_ctl
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_lin2log
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_custom_encoder_ctl
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_audio_codec_init
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_audio_codec_set_complexity_cmd
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_audio_codec_set_bitrate_cmd
</UL>

<P><STRONG><a name="[1fe]"></a>opus_encoder_get_size</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, opus_encoder.o(i.opus_encoder_get_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = opus_encoder_get_size &rArr; celt_encoder_get_size
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_encoder_get_size
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_audio_codec_init
</UL>

<P><STRONG><a name="[1ff]"></a>opus_encoder_init</STRONG> (Thumb, 402 bytes, Stack size 32 bytes, opus_encoder.o(i.opus_encoder_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = opus_encoder_init &rArr; celt_encoder_init &rArr; opus_custom_encoder_ctl
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_lin2log
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_custom_encoder_ctl
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_encoder_init
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_encoder_get_size
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_audio_codec_init
</UL>

<P><STRONG><a name="[1df]"></a>opus_fft_impl</STRONG> (Thumb, 2188 bytes, Stack size 232 bytes, kiss_fft.o(i.opus_fft_impl))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = opus_fft_impl &rArr; app_error_handler &rArr;  app_error_fault_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clt_mdct_forward_c
</UL>

<P><STRONG><a name="[37e]"></a>opus_packet_get_nb_frames</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, opus_decoder.o(i.opus_packet_get_nb_frames))
<BR><BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_repacketizer_cat
</UL>

<P><STRONG><a name="[380]"></a>opus_packet_get_samples_per_frame</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, opus.o(i.opus_packet_get_samples_per_frame))
<BR><BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_repacketizer_cat
</UL>

<P><STRONG><a name="[378]"></a>opus_packet_pad</STRONG> (Thumb, 124 bytes, Stack size 336 bytes, repacketizer.o(i.opus_packet_pad))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = opus_packet_pad &rArr; opus_repacketizer_cat &rArr; opus_packet_parse_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_repacketizer_out_range_impl
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_repacketizer_cat
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encode_native
</UL>

<P><STRONG><a name="[37f]"></a>opus_packet_parse_impl</STRONG> (Thumb, 720 bytes, Stack size 60 bytes, opus.o(i.opus_packet_parse_impl))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = opus_packet_parse_impl
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_repacketizer_cat
</UL>

<P><STRONG><a name="[229]"></a>opus_repacketizer_cat</STRONG> (Thumb, 162 bytes, Stack size 48 bytes, repacketizer.o(i.opus_repacketizer_cat))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = opus_repacketizer_cat &rArr; opus_packet_parse_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_packet_get_nb_frames
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_packet_parse_impl
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_packet_get_samples_per_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_packet_pad
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_multiframe_packet
</UL>

<P><STRONG><a name="[227]"></a>opus_repacketizer_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, repacketizer.o(i.opus_repacketizer_init))
<BR><BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_multiframe_packet
</UL>

<P><STRONG><a name="[22a]"></a>opus_repacketizer_out_range_impl</STRONG> (Thumb, 780 bytes, Stack size 40 bytes, repacketizer.o(i.opus_repacketizer_out_range_impl))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = opus_repacketizer_out_range_impl &rArr; app_error_handler &rArr;  app_error_fault_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_size
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_packet_pad
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_multiframe_packet
</UL>

<P><STRONG><a name="[385]"></a>pdb_init</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, peer_database.o(i.pdb_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pdb_init &rArr; pm_buffer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_init
</UL>

<P><STRONG><a name="[387]"></a>pdb_n_peers</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, peer_database.o(i.pdb_n_peers))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pdb_n_peers &rArr; pds_peer_count_get &rArr; peer_id_n_ids
</UL>
<BR>[Calls]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_count_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peer_count
</UL>

<P><STRONG><a name="[389]"></a>pdb_next_deleted_peer_id_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, peer_database.o(i.pdb_next_deleted_peer_id_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pdb_next_deleted_peer_id_get &rArr; pds_next_deleted_peer_id_get &rArr; peer_id_get_next_deleted
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_next_deleted_peer_id_get
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pdb_evt_handler
</UL>

<P><STRONG><a name="[260]"></a>pdb_next_peer_id_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, peer_database.o(i.pdb_next_peer_id_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pdb_next_peer_id_get &rArr; pds_next_peer_id_get &rArr; peer_id_get_next_used
</UL>
<BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_next_peer_id_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peer_ranks_get
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_next_peer_id_get
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peers_delete
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_pdb_evt_handler
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_local_database_has_changed
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rank_vars_update
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pdb_evt_handler
</UL>

<P><STRONG><a name="[a6]"></a>pdb_pds_evt_handler</STRONG> (Thumb, 292 bytes, Stack size 56 bytes, peer_database.o(i.pdb_pds_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = pdb_pds_evt_handler &rArr; write_buf_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_process &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_release
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buf_store
</UL>
<BR>[Address Reference Count : 1]<UL><LI> peer_data_storage.o(.constdata)
</UL>
<P><STRONG><a name="[38e]"></a>pdb_peer_allocate</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, peer_database.o(i.pdb_peer_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = pdb_peer_allocate &rArr; pds_peer_id_allocate &rArr; peer_id_allocate &rArr; pm_mutex_lock_first_available &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_id_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply
</UL>

<P><STRONG><a name="[390]"></a>pdb_peer_data_load</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, peer_database.o(i.pdb_peer_data_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = pdb_peer_data_load &rArr; pds_peer_data_read &rArr; fds_record_find &rArr; record_find
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_read
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peer_ranks_get
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peer_data_load
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rank_vars_update
</UL>

<P><STRONG><a name="[25c]"></a>pdb_peer_data_ptr_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, peer_database.o(i.pdb_peer_data_ptr_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = pdb_peer_data_ptr_get &rArr; pds_peer_data_read &rArr; fds_record_find &rArr; record_find
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_read
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_service_changed_ind_needed
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_local_db_cache_apply
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_pdb_evt_handler
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_ble_evt_handler
</UL>

<P><STRONG><a name="[27c]"></a>pdb_peer_free</STRONG> (Thumb, 220 bytes, Stack size 40 bytes, peer_database.o(i.pdb_peer_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_process &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_release
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_find
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_space_reserve_cancel
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_id_free
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_free
</UL>

<P><STRONG><a name="[25f]"></a>pdb_raw_store</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, peer_database.o(i.pdb_raw_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = pdb_raw_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_process &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_store
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_pdb_evt_handler
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_local_database_has_changed
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_db_change_notification_done
</UL>

<P><STRONG><a name="[263]"></a>pdb_write_buf_get</STRONG> (Thumb, 350 bytes, Stack size 56 bytes, peer_database.o(i.pdb_write_buf_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = pdb_write_buf_get &rArr; pm_buffer_block_acquire &rArr; pm_mutex_unlock &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_release
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_ptr_get
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_block_acquire
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_find
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_id_is_allocated
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_local_db_cache_update
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_ble_evt_handler
</UL>

<P><STRONG><a name="[264]"></a>pdb_write_buf_release</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, peer_database.o(i.pdb_write_buf_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = pdb_write_buf_release &rArr; pm_buffer_release &rArr; pm_mutex_unlock &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_release
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_find
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_space_reserve_cancel
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_local_db_cache_update
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_failure
</UL>

<P><STRONG><a name="[265]"></a>pdb_write_buf_store</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, peer_database.o(i.pdb_write_buf_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = pdb_write_buf_store &rArr; write_buf_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_process &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buf_store
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_find
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_local_db_cache_update
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_ble_evt_handler
</UL>

<P><STRONG><a name="[398]"></a>pdb_write_buf_store_prepare</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, peer_database.o(i.pdb_write_buf_store_prepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = pdb_write_buf_store_prepare &rArr; pds_space_reserve &rArr; fds_reserve
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_ptr_get
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_find
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_space_reserve
</UL>
<BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply
</UL>

<P><STRONG><a name="[39a]"></a>pds_init</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, peer_data_storage.o(i.pds_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = pds_init &rArr; fds_init &rArr; queue_process &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_init
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_allocate
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_register
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_open
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_find_by_key
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_close
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_init
</UL>

<P><STRONG><a name="[38a]"></a>pds_next_deleted_peer_id_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, peer_data_storage.o(i.pds_next_deleted_peer_id_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pds_next_deleted_peer_id_get &rArr; peer_id_get_next_deleted
</UL>
<BR>[Calls]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_get_next_deleted
</UL>
<BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_next_deleted_peer_id_get
</UL>

<P><STRONG><a name="[38b]"></a>pds_next_peer_id_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, peer_data_storage.o(i.pds_next_peer_id_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pds_next_peer_id_get &rArr; peer_id_get_next_used
</UL>
<BR>[Calls]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_get_next_used
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_next_peer_id_get
</UL>

<P><STRONG><a name="[388]"></a>pds_peer_count_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, peer_data_storage.o(i.pds_peer_count_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pds_peer_count_get &rArr; peer_id_n_ids
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_n_ids
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_n_peers
</UL>

<P><STRONG><a name="[273]"></a>pds_peer_data_iterate</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, peer_data_storage.o(i.pds_peer_data_iterate))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = pds_peer_data_iterate &rArr; fds_record_open &rArr; record_find_by_desc
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_open
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_find_by_key
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_close
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_master_id
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_find_duplicate_bonding_data
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_ble_evt_handler
</UL>

<P><STRONG><a name="[272]"></a>pds_peer_data_iterate_prepare</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, peer_data_storage.o(i.pds_peer_data_iterate_prepare))
<BR><BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_master_id
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_find_duplicate_bonding_data
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_ble_evt_handler
</UL>

<P><STRONG><a name="[276]"></a>pds_peer_data_read</STRONG> (Thumb, 146 bytes, Stack size 48 bytes, peer_data_storage.o(i.pds_peer_data_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = pds_peer_data_read &rArr; fds_record_find &rArr; record_find
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_open
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_find
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_close
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_device_identities_list_set
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peers_id_keys_get
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_data_ptr_get
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_data_load
</UL>

<P><STRONG><a name="[394]"></a>pds_peer_data_store</STRONG> (Thumb, 188 bytes, Stack size 72 bytes, peer_data_storage.o(i.pds_peer_data_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_process &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_reserve_cancel
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_write_reserved
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_write
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_update
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_id_from_desc
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_find
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_raw_store
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buf_store
</UL>

<P><STRONG><a name="[38f]"></a>pds_peer_id_allocate</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, peer_data_storage.o(i.pds_peer_id_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = pds_peer_id_allocate &rArr; peer_id_allocate &rArr; pm_mutex_lock_first_available &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_allocate
</UL>

<P><STRONG><a name="[393]"></a>pds_peer_id_free</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, peer_data_storage.o(i.pds_peer_id_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_process &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_delete
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_free
</UL>

<P><STRONG><a name="[395]"></a>pds_peer_id_is_allocated</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, peer_data_storage.o(i.pds_peer_id_is_allocated))
<BR><BR>[Calls]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_is_allocated
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_get
</UL>

<P><STRONG><a name="[399]"></a>pds_space_reserve</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, peer_data_storage.o(i.pds_space_reserve))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = pds_space_reserve &rArr; fds_reserve
</UL>
<BR>[Calls]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_reserve
</UL>
<BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_store_prepare
</UL>

<P><STRONG><a name="[392]"></a>pds_space_reserve_cancel</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, peer_data_storage.o(i.pds_space_reserve_cancel))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pds_space_reserve_cancel
</UL>
<BR>[Calls]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_reserve_cancel
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_free
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_release
</UL>

<P><STRONG><a name="[39c]"></a>peer_id_allocate</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, peer_id.o(i.peer_id_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = peer_id_allocate &rArr; pm_mutex_lock_first_available &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_lock
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_lock_first_available
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_id_allocate
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_init
</UL>

<P><STRONG><a name="[3a2]"></a>peer_id_delete</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, peer_id.o(i.peer_id_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = peer_id_delete &rArr; pm_mutex_lock &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_id_free
</UL>

<P><STRONG><a name="[236]"></a>peer_id_free</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, peer_id.o(i.peer_id_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = peer_id_free &rArr; pm_mutex_unlock &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_delete
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_evt_handler
</UL>

<P><STRONG><a name="[39d]"></a>peer_id_get_next_deleted</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, peer_id.o(i.peer_id_get_next_deleted))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = peer_id_get_next_deleted
</UL>
<BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_lock_status_get
</UL>
<BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_next_deleted_peer_id_get
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_delete
</UL>

<P><STRONG><a name="[39e]"></a>peer_id_get_next_used</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, peer_id.o(i.peer_id_get_next_used))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = peer_id_get_next_used
</UL>
<BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_lock_status_get
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_next_peer_id_get
</UL>

<P><STRONG><a name="[39b]"></a>peer_id_init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, peer_id.o(i.peer_id_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = peer_id_init
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_init
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_init
</UL>

<P><STRONG><a name="[3a3]"></a>peer_id_is_allocated</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, peer_id.o(i.peer_id_is_allocated))
<BR><BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_lock_status_get
</UL>
<BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_id_is_allocated
</UL>

<P><STRONG><a name="[39f]"></a>peer_id_n_ids</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, peer_id.o(i.peer_id_n_ids))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = peer_id_n_ids
</UL>
<BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_lock_status_get
</UL>
<BR>[Called By]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_count_get
</UL>

<P><STRONG><a name="[3ab]"></a>pitch_downsample</STRONG> (Thumb, 978 bytes, Stack size 152 bytes, pitch.o(i.pitch_downsample))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = pitch_downsample &rArr; _celt_lpc &rArr; frac_div32 &rArr; celt_rcp &rArr; app_error_handler &rArr;  app_error_fault_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_celt_autocorr
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_celt_lpc
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_prefilter
</UL>

<P><STRONG><a name="[3ac]"></a>pitch_search</STRONG> (Thumb, 1068 bytes, Stack size 72 bytes, pitch.o(i.pitch_search))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = pitch_search &rArr; find_best_pitch &rArr; app_error_handler &rArr;  app_error_fault_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_pitch_xcorr_edsp
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_best_pitch
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_prefilter
</UL>

<P><STRONG><a name="[397]"></a>pm_buffer_block_acquire</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, pm_buffer.o(i.pm_buffer_block_acquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = pm_buffer_block_acquire &rArr; pm_mutex_unlock &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_unlock
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_lock
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_lock_status_get
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_get
</UL>

<P><STRONG><a name="[386]"></a>pm_buffer_init</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, pm_buffer.o(i.pm_buffer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pm_buffer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_init
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_init
</UL>

<P><STRONG><a name="[396]"></a>pm_buffer_ptr_get</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, pm_buffer.o(i.pm_buffer_ptr_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pm_buffer_ptr_get
</UL>
<BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_lock_status_get
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_get
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buf_store
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_store_prepare
</UL>

<P><STRONG><a name="[38c]"></a>pm_buffer_release</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, pm_buffer.o(i.pm_buffer_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = pm_buffer_release &rArr; pm_mutex_unlock &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_unlock
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_lock_status_get
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_free
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_release
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_get
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_pds_evt_handler
</UL>

<P><STRONG><a name="[3a8]"></a>pm_conn_sec_config_reply</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, peer_manager.o(i.pm_conn_sec_config_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pm_conn_sec_config_reply &rArr; sm_conn_sec_config_reply &rArr; smd_conn_sec_config_reply &rArr; ble_conn_state_user_flag_set &rArr; sdk_mapped_flags_update_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_conn_sec_config_reply
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_manager_evt_handler
</UL>

<P><STRONG><a name="[3a9]"></a>pm_conn_sec_params_reply</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, peer_manager.o(i.pm_conn_sec_params_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pm_conn_sec_params_reply &rArr; sm_sec_params_reply
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_sec_params_reply
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_manager_evt_handler
</UL>

<P><STRONG><a name="[377]"></a>pm_conn_secure</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, peer_manager.o(i.pm_conn_secure))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = pm_conn_secure &rArr; sm_link_secure &rArr; link_secure &rArr; smd_link_secure &rArr; ble_conn_state_role &rArr; sdk_mapped_flags_get_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_link_secure
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_encrypt_timeout
</UL>

<P><STRONG><a name="[2b3]"></a>pm_device_identities_list_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, peer_manager.o(i.pm_device_identities_list_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = pm_device_identities_list_set &rArr; im_device_identities_list_set &rArr; pds_peer_data_read &rArr; fds_record_find &rArr; record_find
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_device_identities_list_set
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_adv_real_start
</UL>

<P><STRONG><a name="[2]"></a>pm_gcm_evt_handler</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, peer_manager.o(i.pm_gcm_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pm_gcm_evt_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatt_cache_manager.o(.data)
</UL>
<P><STRONG><a name="[2c6]"></a>pm_id_addr_get</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, peer_manager.o(i.pm_id_addr_get))
<BR><BR>[Calls]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_id_addr_get
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_dfu_on_ble_evt
</UL>

<P><STRONG><a name="[a4]"></a>pm_im_evt_handler</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, peer_manager.o(i.pm_im_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pm_im_evt_handler &rArr; ble_conn_state_user_flag_set &rArr; sdk_mapped_flags_update_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> id_manager.o(.constdata)
</UL>
<P><STRONG><a name="[2d7]"></a>pm_init</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, peer_manager.o(i.pm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = pm_init &rArr; pds_init &rArr; fds_init &rArr; queue_process &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_init
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_init
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_init
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_acquire
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_init
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_init
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_init
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_init
</UL>

<P><STRONG><a name="[2ae]"></a>pm_lesc_public_key_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, peer_manager.o(i.pm_lesc_public_key_set))
<BR><BR>[Calls]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_lesc_public_key_set
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_lesc_key
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_adv_pm_evt_handler
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_adv_determine
</UL>

<P><STRONG><a name="[2c2]"></a>pm_local_database_has_changed</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, peer_manager.o(i.pm_local_database_has_changed))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = pm_local_database_has_changed &rArr; gcm_local_database_has_changed &rArr; pending_flags_check &rArr; gscm_local_db_cache_update &rArr; pdb_write_buf_store &rArr; write_buf_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_process &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_local_database_has_changed
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_dfu_init
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_manager_evt_handler
</UL>

<P><STRONG><a name="[258]"></a>pm_mutex_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pm_mutex.o(i.pm_mutex_init))
<BR><BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_init
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_init
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_init
</UL>

<P><STRONG><a name="[3a5]"></a>pm_mutex_lock</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, pm_mutex.o(i.pm_mutex_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = pm_mutex_lock &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pending_flags_check
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_block_acquire
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_delete
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_allocate
</UL>

<P><STRONG><a name="[3a6]"></a>pm_mutex_lock_first_available</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, pm_mutex.o(i.pm_mutex_lock_first_available))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = pm_mutex_lock_first_available &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_allocate
</UL>

<P><STRONG><a name="[3a7]"></a>pm_mutex_lock_status_get</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, pm_mutex.o(i.pm_mutex_lock_status_get))
<BR><BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_release
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_ptr_get
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_block_acquire
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_n_ids
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_is_allocated
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_get_next_used
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_get_next_deleted
</UL>

<P><STRONG><a name="[25d]"></a>pm_mutex_unlock</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, pm_mutex.o(i.pm_mutex_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = pm_mutex_unlock &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_pdb_evt_handler
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pending_flags_check
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_release
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_block_acquire
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_free
</UL>

<P><STRONG><a name="[2ab]"></a>pm_next_peer_id_get</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, peer_manager.o(i.pm_next_peer_id_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pm_next_peer_id_get &rArr; pdb_next_peer_id_get &rArr; pds_next_peer_id_get &rArr; peer_id_get_next_used
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_next_peer_id_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_adv_determine
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_addr_peer_ids_get
</UL>

<P><STRONG><a name="[a7]"></a>pm_pdb_evt_handler</STRONG> (Thumb, 438 bytes, Stack size 48 bytes, peer_manager.o(i.pm_pdb_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = pm_pdb_evt_handler &rArr; rank_vars_update &rArr; pdb_peer_data_load &rArr; pds_peer_data_read &rArr; fds_record_find &rArr; record_find
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_next_peer_id_get
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_conn_handle_get
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rank_vars_update
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_next_deleted_peer_id_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> peer_database.o(.constdata)
</UL>
<P><STRONG><a name="[2be]"></a>pm_peer_count</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, peer_manager.o(i.pm_peer_count))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pm_peer_count &rArr; pdb_n_peers &rArr; pds_peer_count_get &rArr; peer_id_n_ids
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_n_peers
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_bond_stored
</UL>

<P><STRONG><a name="[2b2]"></a>pm_peer_data_bonding_load</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, peer_manager.o(i.pm_peer_data_bonding_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = pm_peer_data_bonding_load &rArr; pm_peer_data_load &rArr; pdb_peer_data_load &rArr; pds_peer_data_read &rArr; fds_record_find &rArr; record_find
</UL>
<BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peer_data_load
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_dfu_on_ble_evt
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_adv_real_start
</UL>

<P><STRONG><a name="[3b6]"></a>pm_peer_data_load</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, peer_manager.o(i.pm_peer_data_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = pm_peer_data_load &rArr; pdb_peer_data_load &rArr; pds_peer_data_read &rArr; fds_record_find &rArr; record_find
</UL>
<BR>[Calls]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_data_load
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peer_data_bonding_load
</UL>

<P><STRONG><a name="[2b5]"></a>pm_peer_delete</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, peer_manager.o(i.pm_peer_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = pm_peer_delete &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_process &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_free
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_adv_real_start
</UL>

<P><STRONG><a name="[2c5]"></a>pm_peer_id_get</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, peer_manager.o(i.pm_peer_id_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = pm_peer_id_get &rArr; im_peer_id_get_by_conn_handle &rArr; get_connection_by_conn_handle &rArr; ble_conn_state_user_flag_get &rArr; sdk_mapped_flags_get_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_evt_handler
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_dfu_on_ble_evt
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_manager_evt_handler
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_on_ble_evt
</UL>

<P><STRONG><a name="[2b4]"></a>pm_peer_ranks_get</STRONG> (Thumb, 200 bytes, Stack size 72 bytes, peer_manager.o(i.pm_peer_ranks_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = pm_peer_ranks_get &rArr; pdb_peer_data_load &rArr; pds_peer_data_read &rArr; fds_record_find &rArr; record_find
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_next_peer_id_get
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_data_load
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_adv_real_start
</UL>

<P><STRONG><a name="[2d9]"></a>pm_peers_delete</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, peer_manager.o(i.pm_peers_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = pm_peers_delete &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_process &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_free
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_next_peer_id_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_init
</UL>

<P><STRONG><a name="[2b0]"></a>pm_register</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, peer_manager.o(i.pm_register))
<BR><BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_adv_init
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_init
</UL>

<P><STRONG><a name="[2d8]"></a>pm_sec_params_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, peer_manager.o(i.pm_sec_params_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pm_sec_params_set &rArr; sm_sec_params_set
</UL>
<BR>[Calls]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_sec_params_set
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_init
</UL>

<P><STRONG><a name="[ac]"></a>pm_sm_evt_handler</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, peer_manager.o(i.pm_sm_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pm_sm_evt_handler &rArr; ble_conn_state_user_flag_set &rArr; sdk_mapped_flags_update_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> security_manager.o(.constdata)
</UL>
<P><STRONG><a name="[2b7]"></a>pm_whitelist_get</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, peer_manager.o(i.pm_whitelist_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = pm_whitelist_get &rArr; im_whitelist_get &rArr; peers_id_keys_get &rArr; pds_peer_data_read &rArr; fds_record_find &rArr; record_find
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_whitelist_get
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_adv_real_start
</UL>

<P><STRONG><a name="[2b6]"></a>pm_whitelist_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, peer_manager.o(i.pm_whitelist_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = pm_whitelist_set &rArr; im_whitelist_set &rArr; peers_id_keys_get &rArr; pds_peer_data_read &rArr; fds_record_find &rArr; record_find
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_whitelist_set
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_adv_real_start
</UL>

<P><STRONG><a name="[1b6]"></a>quant_all_bands</STRONG> (Thumb, 3778 bytes, Stack size 1784 bytes, bands.o(i.quant_all_bands))
<BR><BR>[Stack]<UL><LI>Max Depth = 2328<LI>Call Chain = quant_all_bands &rArr; quant_band_stereo &rArr; quant_band &rArr; quant_partition &rArr;  quant_partition (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_tell_frac
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quant_band_stereo
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quant_band
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_encode_with_ec
</UL>

<P><STRONG><a name="[1ae]"></a>quant_coarse_energy</STRONG> (Thumb, 808 bytes, Stack size 240 bytes, quant_bands.o(i.quant_coarse_energy))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = quant_coarse_energy &rArr; quant_coarse_energy_impl &rArr; ec_laplace_encode &rArr; ec_encode_bin &rArr; ec_enc_normalize
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_tell_frac
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quant_coarse_energy_impl
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_encode_with_ec
</UL>

<P><STRONG><a name="[1b7]"></a>quant_energy_finalise</STRONG> (Thumb, 174 bytes, Stack size 56 bytes, quant_bands.o(i.quant_energy_finalise))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = quant_energy_finalise &rArr; ec_enc_bits &rArr; app_error_handler &rArr;  app_error_fault_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_enc_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_encode_with_ec
</UL>

<P><STRONG><a name="[1b5]"></a>quant_fine_energy</STRONG> (Thumb, 180 bytes, Stack size 56 bytes, quant_bands.o(i.quant_fine_energy))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = quant_fine_energy &rArr; ec_enc_bits &rArr; app_error_handler &rArr;  app_error_fault_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_enc_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_encode_with_ec
</UL>

<P><STRONG><a name="[3bf]"></a>remove_doubling</STRONG> (Thumb, 1146 bytes, Stack size 160 bytes, pitch.o(i.remove_doubling))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = remove_doubling &rArr; frac_div32 &rArr; celt_rcp &rArr; app_error_handler &rArr;  app_error_fault_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_rsqrt_norm
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frac_div32
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_pitch_gain
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_prefilter
</UL>

<P><STRONG><a name="[3bd]"></a>renormalise_vector</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, vq.o(i.renormalise_vector))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = renormalise_vector &rArr; app_error_handler &rArr;  app_error_fault_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_rsqrt_norm
</UL>
<BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quant_partition
</UL>

<P><STRONG><a name="[1bd]"></a>resampling_factor</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, celt.o(i.resampling_factor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = resampling_factor &rArr; app_error_handler &rArr;  app_error_fault_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_encoder_init
</UL>

<P><STRONG><a name="[324]"></a>rng_monitor_init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, rng_monitor.o(i.rng_monitor_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = rng_monitor_init &rArr; nrf_balloc_init &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_init
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_rng_monitor_c_93d8e032__nrf_atomic_internal_and
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2e5]"></a>rng_monitor_request</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, rng_monitor.o(i.rng_monitor_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = rng_monitor_request &rArr; app_isched_event_put &rArr; nrf_queue_push &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_rng_monitor_c_93d8e032__nrf_atomic_internal_orr
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_free
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_alloc
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_push
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_isched_event_put
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_lesc_generate_key
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_nfc_prepare_pairing_keys
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_lesc_on_ble_evt
</UL>

<P><STRONG><a name="[18e]"></a>sdk_mapped_flags_bulk_update_by_key</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, sdk_mapped_flags.o(i.sdk_mapped_flags_bulk_update_by_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sdk_mapped_flags_bulk_update_by_key
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[18f]"></a>sdk_mapped_flags_first_key_index_get</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, sdk_mapped_flags.o(i.sdk_mapped_flags_first_key_index_get))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[186]"></a>sdk_mapped_flags_get_by_key</STRONG> (Thumb, 76 bytes, Stack size 4 bytes, sdk_mapped_flags.o(i.sdk_mapped_flags_get_by_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = sdk_mapped_flags_get_by_key
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_role
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_encrypted
</UL>

<P><STRONG><a name="[184]"></a>sdk_mapped_flags_key_list_get</STRONG> (Thumb, 66 bytes, Stack size 88 bytes, sdk_mapped_flags.o(i.sdk_mapped_flags_key_list_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = sdk_mapped_flags_key_list_get &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_conn_handles
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[18a]"></a>sdk_mapped_flags_update_by_key</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, sdk_mapped_flags.o(i.sdk_mapped_flags_update_by_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sdk_mapped_flags_update_by_key
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[37d]"></a>silk_biquad_alt_stride1</STRONG> (Thumb, 156 bytes, Stack size 52 bytes, biquad_alt.o(i.silk_biquad_alt_stride1))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = silk_biquad_alt_stride1
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encode_native
</UL>

<P><STRONG><a name="[37c]"></a>silk_biquad_alt_stride2_c</STRONG> (Thumb, 310 bytes, Stack size 44 bytes, biquad_alt.o(i.silk_biquad_alt_stride2_c))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = silk_biquad_alt_stride2_c
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encode_native
</UL>

<P><STRONG><a name="[37a]"></a>silk_lin2log</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, lin2log.o(i.silk_lin2log))
<BR><BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encoder_init
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encoder_ctl
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encode_native
</UL>

<P><STRONG><a name="[37b]"></a>silk_log2lin</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, log2lin.o(i.silk_log2lin))
<BR><BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encode_native
</UL>

<P><STRONG><a name="[191]"></a>sm_ble_evt_handler</STRONG> (Thumb, 114 bytes, Stack size 96 bytes, security_manager.o(i.sm_ble_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = sm_ble_evt_handler &rArr; smd_ble_evt_handler &rArr; link_secure_failure &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_process &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_collection
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_conn_handles
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_ble_evt_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[3ad]"></a>sm_conn_sec_config_reply</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, security_manager.o(i.sm_conn_sec_config_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sm_conn_sec_config_reply &rArr; smd_conn_sec_config_reply &rArr; ble_conn_state_user_flag_set &rArr; sdk_mapped_flags_update_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_conn_sec_config_reply
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_conn_sec_config_reply
</UL>

<P><STRONG><a name="[3b1]"></a>sm_init</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, security_manager.o(i.sm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sm_init
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_init
</UL>

<P><STRONG><a name="[3b4]"></a>sm_lesc_public_key_set</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, security_manager.o(i.sm_lesc_public_key_set))
<BR><BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_lesc_public_key_set
</UL>

<P><STRONG><a name="[3af]"></a>sm_link_secure</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, security_manager.o(i.sm_link_secure))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = sm_link_secure &rArr; link_secure &rArr; smd_link_secure &rArr; ble_conn_state_role &rArr; sdk_mapped_flags_get_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure
</UL>
<BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_conn_secure
</UL>

<P><STRONG><a name="[a8]"></a>sm_pdb_evt_handler</STRONG> (Thumb, 246 bytes, Stack size 96 bytes, security_manager.o(i.sm_pdb_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 872<LI>Call Chain = sm_pdb_evt_handler &rArr; params_reply_pending_process &rArr; smd_params_reply &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_process &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_collection
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_conn_handles
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;params_reply_pending_process
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure
</UL>
<BR>[Address Reference Count : 1]<UL><LI> peer_database.o(.constdata)
</UL>
<P><STRONG><a name="[3ae]"></a>sm_sec_params_reply</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, security_manager.o(i.sm_sec_params_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sm_sec_params_reply
</UL>
<BR>[Calls]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy4_5
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_params_verify
</UL>
<BR>[Called By]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_conn_sec_params_reply
</UL>

<P><STRONG><a name="[3b7]"></a>sm_sec_params_set</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, security_manager.o(i.sm_sec_params_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sm_sec_params_set
</UL>
<BR>[Calls]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy4_5
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_params_verify
</UL>
<BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_sec_params_set
</UL>

<P><STRONG><a name="[ab]"></a>sm_smd_evt_handler</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, security_manager.o(i.sm_smd_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = sm_smd_evt_handler &rArr; smd_params_reply_perform &rArr; smd_params_reply &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_process &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply_perform
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure
</UL>
<BR>[Address Reference Count : 1]<UL><LI> security_dispatcher.o(.constdata)
</UL>
<P><STRONG><a name="[3c2]"></a>smd_ble_evt_handler</STRONG> (Thumb, 1144 bytes, Stack size 96 bytes, security_dispatcher.o(i.smd_ble_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = smd_ble_evt_handler &rArr; link_secure_failure &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_process &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_master_id
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_free
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_new_peer_id
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_master_ids_compare
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_find_duplicate_bonding_data
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_store
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_get
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_data_ptr_get
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_role
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_encrypted
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_failure
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_ble_evt_handler
</UL>

<P><STRONG><a name="[3c3]"></a>smd_conn_sec_config_reply</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, security_dispatcher.o(i.smd_conn_sec_config_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = smd_conn_sec_config_reply &rArr; ble_conn_state_user_flag_set &rArr; sdk_mapped_flags_update_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
</UL>
<BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_conn_sec_config_reply
</UL>

<P><STRONG><a name="[3b2]"></a>smd_init</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, security_dispatcher.o(i.smd_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = smd_init
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_init
</UL>

<P><STRONG><a name="[286]"></a>smd_link_secure</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, security_dispatcher.o(i.smd_link_secure))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = smd_link_secure &rArr; ble_conn_state_role &rArr; sdk_mapped_flags_get_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_role
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure
</UL>

<P><STRONG><a name="[384]"></a>smd_params_reply</STRONG> (Thumb, 428 bytes, Stack size 128 bytes, security_dispatcher.o(i.smd_params_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = smd_params_reply &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_process &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_free
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_new_peer_id
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_ble_addr_get
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_get
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_role
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_store_prepare
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_allocate
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply_perform
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;params_reply_pending_process
</UL>

<P><STRONG><a name="[1af]"></a>spreading_decision</STRONG> (Thumb, 586 bytes, Stack size 120 bytes, bands.o(i.spreading_decision))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = spreading_decision &rArr; celt_udiv &rArr; app_error_handler &rArr;  app_error_fault_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_udiv
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_encode_with_ec
</UL>

<P><STRONG><a name="[1e6]"></a>stereo_itheta</STRONG> (Thumb, 348 bytes, Stack size 24 bytes, vq.o(i.stereo_itheta))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = stereo_itheta &rArr; celt_sqrt &rArr; app_error_handler &rArr;  app_error_fault_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_sqrt
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_rcp
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_theta
</UL>

<P><STRONG><a name="[34a]"></a>task_create</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, task_manager.o(i.task_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = task_create &rArr; nrf_log_frontend_std_4 &rArr;  std_n (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_4
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___14_task_manager_c_fb9fd7a8__nrf_atomic_internal_orr
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_task_create
</UL>

<P><STRONG><a name="[1db]"></a>task_events_set</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, task_manager.o(i.task_events_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = task_events_set &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___14_task_manager_c_fb9fd7a8__nrf_atomic_internal_orr
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_uninit
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_start
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_cli_put
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_transport_evt_handler
</UL>

<P><STRONG><a name="[1dd]"></a>task_events_wait</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, task_manager.o(i.task_events_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = task_events_wait &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_switch
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___14_task_manager_c_fb9fd7a8__nrf_atomic_internal_and
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_task
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_offset_string_print
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_write
</UL>

<P><STRONG><a name="[1f0]"></a>task_exit</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, task_manager.o(i.task_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = task_exit &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_switch
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_task
</UL>

<P><STRONG><a name="[349]"></a>task_id_get</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, task_manager.o(i.task_id_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = task_id_get &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_start
</UL>

<P><STRONG><a name="[326]"></a>task_manager_start</STRONG> (Thumb, 274 bytes, Stack size 32 bytes, task_manager.o(i.task_manager_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = task_manager_start &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_4
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_mpu_region_create
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_switch
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[36]"></a>task_schedule</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, task_manager.o(i.task_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = task_schedule &rArr; nrf_mpu_region_create &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_mpu_region_destroy
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_mpu_region_create
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___14_task_manager_c_fb9fd7a8__nrf_atomic_internal_and
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_manager_core_keil.o(.text)
</UL>
<P><STRONG><a name="[270]"></a>task_yield</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, task_manager.o(i.task_yield))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = task_yield &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_switch
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_task
</UL>

<P><STRONG><a name="[2fb]"></a>twi_init</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, twi_common.o(i.twi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = twi_init &rArr; nrf_twi_mngr_init &rArr; nrf_drv_twi_init &rArr; nrf_drv_common_irq_enable &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twi_mngr_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_init
</UL>

<P><STRONG><a name="[1f6]"></a>twi_perform</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, twi_common.o(i.twi_perform))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = twi_perform &rArr; nrf_twi_mngr_perform &rArr; start_pending_transaction &rArr; nrf_drv_twi_init &rArr; nrf_drv_common_irq_enable &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twi_mngr_perform
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis3dh_write_regs
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis3dh_int_clear
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_acc_mode_set
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_acc_init
</UL>

<P><STRONG><a name="[3cf]"></a>unquant_coarse_energy</STRONG> (Thumb, 332 bytes, Stack size 64 bytes, quant_bands.o(i.unquant_coarse_energy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_dec_bit_logp
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_dec_icdf
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_laplace_decode
</UL>

<P><STRONG><a name="[38d]"></a>write_buf_store</STRONG> (Thumb, 206 bytes, Stack size 16 bytes, peer_database.o(i.write_buf_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = write_buf_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_process &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_ptr_get
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_store
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_store
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_pds_evt_handler
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[78]"></a>bg_scheduler_post_put_hook</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main.o(i.bg_scheduler_post_put_hook))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[77]"></a>fg_scheduler_post_put_hook</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main.o(i.fg_scheduler_post_put_hook))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[7a]"></a>idle_task</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, main.o(i.idle_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = idle_task &rArr; nrf_pwr_mgmt_run &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_yield
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwr_mgmt_run
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_wdt_channel_feed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[ee]"></a>sr3_core_log_statistics</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, main.o(i.sr3_core_log_statistics))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = sr3_core_log_statistics &rArr; app_sched_get_max_utilization &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_profiler_get_max_stack_usage
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_3
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_op_queue_utilization_get
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sched_get_max_utilization
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_isched_get_max_utilization
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(pwr_mgmt_data3)
</UL>
<P><STRONG><a name="[76]"></a>watchdog_event_handler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, main.o(i.watchdog_event_handler))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[1c1]"></a>celt_udiv</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, bands.o(i.celt_udiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = celt_udiv &rArr; app_error_handler &rArr;  app_error_fault_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spreading_decision
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quant_band
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_theta
</UL>

<P><STRONG><a name="[1e5]"></a>compute_theta</STRONG> (Thumb, 1452 bytes, Stack size 88 bytes, bands.o(i.compute_theta))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = compute_theta &rArr; ec_enc_uint &rArr; ec_encode &rArr; app_error_handler &rArr;  app_error_fault_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stereo_itheta
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isqrt32
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_tell_frac
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_encode
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_enc_uint
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_enc_bit_logp
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_decode
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_dec_update
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_dec_uint
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_dec_bit_logp
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitexact_cos
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intensity_stereo
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_udiv
</UL>
<BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quant_partition
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quant_band_stereo
</UL>

<P><STRONG><a name="[1f4]"></a>deinterleave_hadamard</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, bands.o(i.deinterleave_hadamard))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = deinterleave_hadamard &rArr; app_error_handler &rArr;  app_error_fault_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quant_band
</UL>

<P><STRONG><a name="[1ec]"></a>intensity_stereo</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, bands.o(i.intensity_stereo))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = intensity_stereo &rArr; celt_sqrt &rArr; app_error_handler &rArr;  app_error_fault_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_theta
</UL>

<P><STRONG><a name="[282]"></a>interleave_hadamard</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, bands.o(i.interleave_hadamard))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = interleave_hadamard &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quant_band
</UL>

<P><STRONG><a name="[3b9]"></a>quant_band</STRONG> (Thumb, 1268 bytes, Stack size 88 bytes, bands.o(i.quant_band))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = quant_band &rArr; quant_partition &rArr;  quant_partition (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_enc_bits
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_dec_bits
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_sqrt
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quant_partition
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interleave_hadamard
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deinterleave_hadamard
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_udiv
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quant_all_bands
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quant_band_stereo
</UL>

<P><STRONG><a name="[3ba]"></a>quant_band_stereo</STRONG> (Thumb, 1214 bytes, Stack size 136 bytes, bands.o(i.quant_band_stereo))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = quant_band_stereo &rArr; quant_band &rArr; quant_partition &rArr;  quant_partition (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_enc_bits
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_dec_bits
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_rsqrt_norm
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quant_band
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_theta
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quant_all_bands
</UL>

<P><STRONG><a name="[3bb]"></a>quant_partition</STRONG> (Thumb, 1048 bytes, Stack size 136 bytes, bands.o(i.quant_partition))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + In Cycle
<LI>Call Chain = quant_partition &rArr;  quant_partition (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;renormalise_vector
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_unquant
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_quant
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quant_partition
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_theta
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quant_partition
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quant_band
</UL>

<P><STRONG><a name="[1a3]"></a>celt_maxabs16</STRONG> (Thumb, 136 bytes, Stack size 12 bytes, celt_encoder.o(i.celt_maxabs16))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = celt_maxabs16
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_encode_with_ec
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transient_analysis
</UL>

<P><STRONG><a name="[1aa]"></a>compute_mdcts</STRONG> (Thumb, 396 bytes, Stack size 88 bytes, celt_encoder.o(i.compute_mdcts))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = compute_mdcts &rArr; clt_mdct_forward_c &rArr; opus_fft_impl &rArr; app_error_handler &rArr;  app_error_fault_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clt_mdct_forward_c
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_encode_with_ec
</UL>

<P><STRONG><a name="[1b0]"></a>dynalloc_analysis</STRONG> (Thumb, 1772 bytes, Stack size 88 bytes, celt_encoder.o(i.dynalloc_analysis))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = dynalloc_analysis
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_encode_with_ec
</UL>

<P><STRONG><a name="[1a5]"></a>run_prefilter</STRONG> (Thumb, 912 bytes, Stack size 168 bytes, celt_encoder.o(i.run_prefilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = run_prefilter &rArr; pitch_downsample &rArr; _celt_lpc &rArr; frac_div32 &rArr; celt_rcp &rArr; app_error_handler &rArr;  app_error_fault_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_doubling
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pitch_search
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pitch_downsample
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comb_filter
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_encode_with_ec
</UL>

<P><STRONG><a name="[1ad]"></a>tf_analysis</STRONG> (Thumb, 1212 bytes, Stack size 168 bytes, celt_encoder.o(i.tf_analysis))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = tf_analysis &rArr; haar1
</UL>
<BR>[Calls]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haar1
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_encode_with_ec
</UL>

<P><STRONG><a name="[1a9]"></a>transient_analysis</STRONG> (Thumb, 714 bytes, Stack size 72 bytes, celt_encoder.o(i.transient_analysis))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = transient_analysis &rArr; celt_sqrt &rArr; app_error_handler &rArr;  app_error_fault_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_sqrt
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_maxabs16
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_encode_with_ec
</UL>

<P><STRONG><a name="[221]"></a>ec_enc_carry_out</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, entenc.o(i.ec_enc_carry_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ec_enc_carry_out
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_enc_done
</UL>

<P><STRONG><a name="[220]"></a>ec_enc_normalize</STRONG> (Thumb, 168 bytes, Stack size 12 bytes, entenc.o(i.ec_enc_normalize))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ec_enc_normalize
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_encode
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_enc_bit_logp
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_enc_icdf
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_encode_bin
</UL>

<P><STRONG><a name="[379]"></a>compute_equiv_rate</STRONG> (Thumb, 172 bytes, Stack size 12 bytes, opus_encoder.o(i.compute_equiv_rate))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = compute_equiv_rate
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encode_native
</UL>

<P><STRONG><a name="[226]"></a>encode_multiframe_packet</STRONG> (Thumb, 404 bytes, Stack size 144 bytes, opus_encoder.o(i.encode_multiframe_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 252 + In Cycle
<LI>Call Chain = encode_multiframe_packet &rArr;  opus_encode_native (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_repacketizer_out_range_impl
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_repacketizer_init
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_repacketizer_cat
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encode_native
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encode_native
</UL>

<P><STRONG><a name="[1e3]"></a>compute_pitch_gain</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, pitch.o(i.compute_pitch_gain))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = compute_pitch_gain &rArr; app_error_handler &rArr;  app_error_fault_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_rsqrt_norm
</UL>
<BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_doubling
</UL>

<P><STRONG><a name="[24b]"></a>find_best_pitch</STRONG> (Thumb, 276 bytes, Stack size 40 bytes, pitch.o(i.find_best_pitch))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = find_best_pitch &rArr; app_error_handler &rArr;  app_error_fault_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pitch_search
</UL>

<P><STRONG><a name="[3bc]"></a>quant_coarse_energy_impl</STRONG> (Thumb, 552 bytes, Stack size 80 bytes, quant_bands.o(i.quant_coarse_energy_impl))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = quant_coarse_energy_impl &rArr; ec_laplace_encode &rArr; ec_encode_bin &rArr; ec_enc_normalize
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_enc_bit_logp
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_enc_icdf
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_laplace_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quant_coarse_energy
</UL>

<P><STRONG><a name="[1e2]"></a>interp_bits2pulses</STRONG> (Thumb, 1942 bytes, Stack size 96 bytes, rate.o(i.interp_bits2pulses))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = interp_bits2pulses &rArr; ec_enc_uint &rArr; ec_encode &rArr; app_error_handler &rArr;  app_error_fault_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_enc_uint
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_enc_bit_logp
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_dec_uint
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_dec_bit_logp
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_allocation
</UL>

<P><STRONG><a name="[160]"></a>extract_collapse_mask</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, vq.o(i.extract_collapse_mask))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = extract_collapse_mask
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_unquant
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_quant
</UL>

<P><STRONG><a name="[3c]"></a>app_sched_event_handler</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, app_scheduler.o(i.app_sched_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = app_sched_event_handler &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_free
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_scheduler.o(i.app_sched_event_put)
</UL>
<P><STRONG><a name="[3b8]"></a>key_id_to_bit_msk</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, key_combo_util.o(i.key_id_to_bit_msk))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = key_id_to_bit_msk
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_combo_key_change
</UL>

<P><STRONG><a name="[284]"></a>process_combo_key_change</STRONG> (Thumb, 426 bytes, Stack size 48 bytes, key_combo_util.o(i.process_combo_key_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = process_combo_key_change &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_id_to_bit_msk
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_combo_util_key_process
</UL>

<P><STRONG><a name="[87]"></a>rng_monitor_process_requests</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, rng_monitor.o(i.rng_monitor_process_requests))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = rng_monitor_process_requests &rArr; nrf_queue_generic_pop &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rng_bytes_available
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_rng_monitor_c_93d8e032__nrf_atomic_internal_and
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_free
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_generic_pop
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
</UL>
<BR>[Address Reference Count : 2]<UL><LI> rng_monitor.o(i.rng_monitor_init)
<LI> rng_monitor.o(i.rng_monitor_request)
</UL>
<P><STRONG><a name="[ef]"></a>twi_shutdown</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, twi_common.o(i.twi_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = twi_shutdown &rArr; nrf_twi_mngr_uninit &rArr; nrf_drv_twi_uninit &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwr_mgmt_run
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twi_mngr_uninit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> twi_common.o(pwr_mgmt_data3)
</UL>
<P><STRONG><a name="[1f9]"></a>lis3dh_int_clear</STRONG> (Thumb, 276 bytes, Stack size 48 bytes, drv_acc_lis3dh.o(i.lis3dh_int_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = lis3dh_int_clear &rArr; twi_perform &rArr; nrf_twi_mngr_perform &rArr; start_pending_transaction &rArr; nrf_drv_twi_init &rArr; nrf_drv_common_irq_enable &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_perform
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_acc_mode_set
</UL>

<P><STRONG><a name="[1f7]"></a>lis3dh_write_regs</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, drv_acc_lis3dh.o(i.lis3dh_write_regs))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = lis3dh_write_regs &rArr; twi_perform &rArr; nrf_twi_mngr_perform &rArr; start_pending_transaction &rArr; nrf_drv_twi_init &rArr; nrf_drv_common_irq_enable &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_perform
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_acc_mode_set
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_acc_init
</UL>

<P><STRONG><a name="[40]"></a>m_acc_interupt_handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, drv_acc_lis3dh.o(i.m_acc_interupt_handler))
<BR>[Address Reference Count : 1]<UL><LI> drv_acc_lis3dh.o(i.drv_acc_init)
</UL>
<P><STRONG><a name="[8b]"></a>drv_audio_codec_info_cmd</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, drv_audio_codec_opus.o(i.drv_audio_codec_info_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = drv_audio_codec_info_cmd &rArr; nrf_cli_help_print &rArr; nrf_cli_fprintf &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; unsigned_print &rArr; nrf_fprintf_buffer_flush &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_print
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_audio_codec_opus.o(.constdata)
</UL>
<P><STRONG><a name="[201]"></a>drv_audio_codec_log_config</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, drv_audio_codec_opus.o(i.drv_audio_codec_log_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = drv_audio_codec_log_config &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_3
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_5
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_audio_codec_init
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_audio_codec_set_complexity_cmd
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_audio_codec_set_bitrate_cmd
</UL>

<P><STRONG><a name="[89]"></a>drv_audio_codec_set_bitrate_cmd</STRONG> (Thumb, 336 bytes, Stack size 40 bytes, drv_audio_codec_opus.o(i.drv_audio_codec_set_bitrate_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = drv_audio_codec_set_bitrate_cmd &rArr; nrf_cli_help_print &rArr; nrf_cli_fprintf &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; unsigned_print &rArr; nrf_fprintf_buffer_flush &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encoder_ctl
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_print
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_audio_codec_log_config
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_audio_codec_opus.o(.constdata)
</UL>
<P><STRONG><a name="[8c]"></a>drv_audio_codec_set_cmd</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, drv_audio_codec_opus.o(i.drv_audio_codec_set_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = drv_audio_codec_set_cmd &rArr; nrf_cli_help_print &rArr; nrf_cli_fprintf &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; unsigned_print &rArr; nrf_fprintf_buffer_flush &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_print
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_audio_codec_opus.o(.constdata)
</UL>
<P><STRONG><a name="[8a]"></a>drv_audio_codec_set_complexity_cmd</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, drv_audio_codec_opus.o(i.drv_audio_codec_set_complexity_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = drv_audio_codec_set_complexity_cmd &rArr; nrf_cli_help_print &rArr; nrf_cli_fprintf &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; unsigned_print &rArr; nrf_fprintf_buffer_flush &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encoder_ctl
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_print
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_audio_codec_log_config
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_audio_codec_opus.o(.constdata)
</UL>
<P><STRONG><a name="[8e]"></a>drv_audio_info_cmd</STRONG> (Thumb, 324 bytes, Stack size 32 bytes, drv_audio_pdm.o(i.drv_audio_info_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = drv_audio_info_cmd &rArr; nrf_cli_help_print &rArr; nrf_cli_fprintf &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; unsigned_print &rArr; nrf_fprintf_buffer_flush &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_print
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_audio_pdm.o(.constdata)
</UL>
<P><STRONG><a name="[41]"></a>drv_audio_pdm_event_handler</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, drv_audio_pdm.o(i.drv_audio_pdm_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = drv_audio_pdm_event_handler &rArr; nrf_drv_pdm_buffer_set &rArr; nrf_drv_common_irq_enable &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_free
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_alloc
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_pdm_buffer_set
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_audio_count_total
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_audio_count_lost
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_audio_pdm.o(i.drv_audio_init)
</UL>
<P><STRONG><a name="[8f]"></a>drv_audio_set_cmd</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, drv_audio_pdm.o(i.drv_audio_set_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = drv_audio_set_cmd &rArr; nrf_cli_help_print &rArr; nrf_cli_fprintf &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; unsigned_print &rArr; nrf_fprintf_buffer_flush &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_print
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_audio_pdm.o(.constdata)
</UL>
<P><STRONG><a name="[8d]"></a>drv_audio_set_gain_cmd</STRONG> (Thumb, 500 bytes, Stack size 48 bytes, drv_audio_pdm.o(i.drv_audio_set_gain_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = drv_audio_set_gain_cmd &rArr; nrf_cli_help_print &rArr; nrf_cli_fprintf &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; unsigned_print &rArr; nrf_fprintf_buffer_flush &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_4
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_print
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_audio_pdm.o(.constdata)
</UL>
<P><STRONG><a name="[42]"></a>drv_buzzer_pwm_event_handler</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, drv_buzzer.o(i.drv_buzzer_pwm_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = drv_buzzer_pwm_event_handler &rArr; drv_buzzer_update_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_buzzer_update_buff
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_buzzer.o(i.drv_buzzer_init)
</UL>
<P><STRONG><a name="[211]"></a>drv_buzzer_update_buff</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, drv_buzzer.o(i.drv_buzzer_update_buff))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = drv_buzzer_update_buff
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_buzzer_enable
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_buzzer_pwm_event_handler
</UL>

<P><STRONG><a name="[43]"></a>pwm_handler</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, drv_ir_sirc.o(i.pwm_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = pwm_handler &rArr; nrf_drv_pwm_stop &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_pwm_stop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_ir_sirc.o(i.drv_ir_init)
</UL>
<P><STRONG><a name="[46]"></a>drv_keyboard_interrupt_handler</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, drv_keyboard_matrix.o(i.drv_keyboard_interrupt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = drv_keyboard_interrupt_handler &rArr; app_isched_event_put &rArr; nrf_queue_push &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_isched_event_put
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpiote_user_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_keyboard_matrix.o(i.drv_keyboard_init)
</UL>
<P><STRONG><a name="[45]"></a>drv_keyboard_scan</STRONG> (Thumb, 406 bytes, Stack size 56 bytes, drv_keyboard_matrix.o(i.drv_keyboard_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = drv_keyboard_scan
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_keyboard_keys_get
</UL>
<BR>[Address Reference Count : 2]<UL><LI> drv_keyboard_matrix.o(i.drv_keyboard_init)
<LI> drv_keyboard_matrix.o(i.drv_keyboard_interrupt_handler)
</UL>
<P><STRONG><a name="[44]"></a>drv_keyboard_scan_handler</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, drv_keyboard_matrix.o(i.drv_keyboard_scan_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = drv_keyboard_scan_handler &rArr; app_gpiote_user_enable &rArr; user_enable &rArr; nrf_drv_gpiote_in_event_enable &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpiote_user_enable
</UL>
<BR>[Address Reference Count : 3]<UL><LI> drv_keyboard_matrix.o(i.drv_keyboard_enable)
<LI> drv_keyboard_matrix.o(i.drv_keyboard_interrupt_handler)
<LI> drv_keyboard_matrix.o(i.drv_keyboard_scan_handler)
</UL>
<P><STRONG><a name="[f0]"></a>event_bus_log_statistics</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, event_bus.o(i.event_bus_log_statistics))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = event_bus_log_statistics &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> event_bus.o(pwr_mgmt_data3)
</UL>
<P><STRONG><a name="[47]"></a>event_process</STRONG> (Thumb, 456 bytes, Stack size 40 bytes, event_bus.o(i.event_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = event_process &rArr; event_type_str &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_cnt_get
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_free
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_4
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_5
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_cnt_diff_compute
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_type_str
</UL>
<BR>[Address Reference Count : 1]<UL><LI> event_bus.o(i.event_send)
</UL>
<P><STRONG><a name="[231]"></a>event_type_str</STRONG> (Thumb, 204 bytes, Stack size 8 bytes, event_bus.o(i.event_type_str))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = event_type_str &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_process
</UL>

<P><STRONG><a name="[49]"></a>m_acc_click_handler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, m_acc.o(i.m_acc_click_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = m_acc_click_handler &rArr; event_send &rArr; app_isched_event_put &rArr; nrf_queue_push &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_cnt_get
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_acc.o(i.m_acc_init)
</UL>
<P><STRONG><a name="[ed]"></a>m_acc_shutdown</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, m_acc.o(i.m_acc_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = m_acc_shutdown &rArr; drv_acc_mode_set &rArr; lis3dh_int_clear &rArr; twi_perform &rArr; nrf_twi_mngr_perform &rArr; start_pending_transaction &rArr; nrf_drv_twi_init &rArr; nrf_drv_common_irq_enable &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_acc_mode_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_acc.o(pwr_mgmt_data2)
</UL>
<P><STRONG><a name="[4d]"></a>m_audio_buffer_handler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, m_audio.o(i.m_audio_buffer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = m_audio_buffer_handler &rArr; app_isched_event_put &rArr; nrf_queue_push &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_isched_event_put
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_audio.o(i.m_audio_init)
</UL>
<P><STRONG><a name="[90]"></a>m_audio_cmd</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, m_audio.o(i.m_audio_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = m_audio_cmd &rArr; nrf_cli_help_print &rArr; nrf_cli_fprintf &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; unsigned_print &rArr; nrf_fprintf_buffer_flush &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_print
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> m_audio.o(.constdata)
<LI> m_audio.o(.constdata)
</UL>
<P><STRONG><a name="[91]"></a>m_audio_info_cmd</STRONG> (Thumb, 546 bytes, Stack size 64 bytes, m_audio.o(i.m_audio_info_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = m_audio_info_cmd &rArr; nrf_cli_fprintf &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; unsigned_print &rArr; nrf_fprintf_buffer_flush &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_audio_frame_pool_max_utilization_get
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_audio_frame_pool_current_utilization_get
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_audio.o(.constdata)
</UL>
<P><STRONG><a name="[4b]"></a>m_audio_log_gauges</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, m_audio.o(i.m_audio_log_gauges))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = m_audio_log_gauges &rArr; m_audio_loss_gauge_log &rArr; nrf_log_frontend_std_6 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_audio_loss_gauge_log
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_audio_cpu_gauge_log
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_audio_bitrate_gauge_log
</UL>
<BR>[Address Reference Count : 2]<UL><LI> m_audio.o(i.m_audio_disable)
<LI> m_audio.o(i.m_audio_shutdown)
</UL>
<P><STRONG><a name="[f1]"></a>m_audio_log_statistics</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, m_audio.o(i.m_audio_log_statistics))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = m_audio_log_statistics &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_audio_frame_pool_current_utilization_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_audio.o(pwr_mgmt_data3)
</UL>
<P><STRONG><a name="[4a]"></a>m_audio_process</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, m_audio.o(i.m_audio_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 3096<LI>Call Chain = m_audio_process &rArr; drv_audio_codec_encode &rArr; opus_encode &rArr; opus_encode_native &rArr; celt_encode_with_ec &rArr; quant_all_bands &rArr; quant_band_stereo &rArr; quant_band &rArr; quant_partition &rArr;  quant_partition (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_free
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_isched_event_put
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_audio_count_total
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_audio_count_lost
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_audio_codec_encode
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_audio_measure_cpu_usage_start
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_audio_measure_cpu_usage_end
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_audio_measure_bitrate
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_audio_frame_put
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_audio_frame_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_audio.o(i.m_audio_buffer_handler)
</UL>
<P><STRONG><a name="[4c]"></a>m_audio_reset_gauges</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, m_audio.o(i.m_audio_reset_gauges))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = m_audio_reset_gauges &rArr; m_audio_loss_gauge_reset &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_audio_loss_gauge_reset
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_audio_cpu_gauge_reset
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_audio_bitrate_gauge_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_audio.o(i.m_audio_enable)
</UL>
<P><STRONG><a name="[4e]"></a>m_audio_send</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, m_audio.o(i.m_audio_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = m_audio_send &rArr; m_coms_send_audio &rArr; m_coms_channel_enqueue &rArr; nrf_queue_push &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_audio_count_lost
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwr_mgmt_feed
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_send_audio
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_audio_frame_put
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_audio_count_discarded
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_audio.o(i.m_audio_process)
</UL>
<P><STRONG><a name="[e7]"></a>m_audio_shutdown</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, m_audio.o(i.m_audio_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = m_audio_shutdown &rArr; app_isched_event_put &rArr; nrf_queue_push &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_isched_event_put
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_audio_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_audio.o(pwr_mgmt_data1)
</UL>
<P><STRONG><a name="[51]"></a>m_batt_meas_process</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, m_batt_meas.o(i.m_batt_meas_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = m_batt_meas_process &rArr; event_send &rArr; app_isched_event_put &rArr; nrf_queue_push &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_batt_meas.o(i.m_batt_meas_saadc_event_handler)
</UL>
<P><STRONG><a name="[e8]"></a>m_batt_meas_shutdown</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, m_batt_meas.o(i.m_batt_meas_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = m_batt_meas_shutdown &rArr; nrf_drv_saadc_uninit &rArr; nrf_drv_saadc_limits_set &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_uninit
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_channel_uninit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_batt_meas.o(pwr_mgmt_data1)
</UL>
<P><STRONG><a name="[50]"></a>m_batt_meas_timeout_handler</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, m_batt_meas.o(i.m_batt_meas_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = m_batt_meas_timeout_handler &rArr; nrf_drv_saadc_buffer_convert &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_sample
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_buffer_convert
</UL>
<BR>[Address Reference Count : 2]<UL><LI> m_batt_meas.o(i.m_batt_meas_init)
<LI> m_batt_meas.o(i.m_batt_meas_saadc_event_handler)
</UL>
<P><STRONG><a name="[52]"></a>m_buzzer_ack</STRONG> (Thumb, 206 bytes, Stack size 16 bytes, m_buzzer.o(i.m_buzzer_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = m_buzzer_ack &rArr; nrf_pwr_mgmt_shutdown &rArr; app_sched_event_put &rArr; app_isched_event_put &rArr; nrf_queue_push &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_buzzer_enable
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_buzzer_disable
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwr_mgmt_shutdown
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_buzzer.o(i.m_buzzer_ack_handler)
</UL>
<P><STRONG><a name="[53]"></a>m_buzzer_ack_handler</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, m_buzzer.o(i.m_buzzer_ack_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = m_buzzer_ack_handler &rArr; app_isched_event_put &rArr; nrf_queue_push &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_isched_event_put
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_buzzer.o(i.m_buzzer_init)
</UL>
<P><STRONG><a name="[2a6]"></a>m_buzzer_play</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, m_buzzer.o(i.m_buzzer_play))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = m_buzzer_play &rArr; drv_buzzer_enable &rArr; nrf_drv_pwm_complex_playback &rArr; nrf_pwm_sequence_set &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_buzzer_enable
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_buzzer_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_buzzer_event_handler
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_buzzer_shutdown
</UL>

<P><STRONG><a name="[e9]"></a>m_buzzer_shutdown</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, m_buzzer.o(i.m_buzzer_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = m_buzzer_shutdown &rArr; m_buzzer_play &rArr; drv_buzzer_enable &rArr; nrf_drv_pwm_complex_playback &rArr; nrf_pwm_sequence_set &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_buzzer_play
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_buzzer.o(pwr_mgmt_data1)
</UL>
<P><STRONG><a name="[68]"></a>m_coms_audio_frame_free_func</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, m_coms.o(i.m_coms_audio_frame_free_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = m_coms_audio_frame_free_func &rArr; m_audio_frame_put &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_audio_frame_put
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_coms.o(i.m_coms_send_audio)
</UL>
<P><STRONG><a name="[92]"></a>m_coms_ble_evt_handler</STRONG> (Thumb, 1638 bytes, Stack size 40 bytes, m_coms.o(i.m_coms_ble_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = m_coms_ble_evt_handler &rArr; nrf_pwr_mgmt_shutdown &rArr; app_sched_event_put &rArr; app_isched_event_put &rArr; nrf_queue_push &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_process_data
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwr_mgmt_shutdown
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peer_id_get
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_nfc_get_tk
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_oobkey_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_coms.o(.constdata)
</UL>
<P><STRONG><a name="[2f2]"></a>m_coms_channel_enqueue</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, m_coms.o(i.m_coms_channel_enqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = m_coms_channel_enqueue &rArr; nrf_queue_push &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_free
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_push
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_generic_pop
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_enqueue_report
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_send_audio
</UL>

<P><STRONG><a name="[2f3]"></a>m_coms_channel_process</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, m_coms.o(i.m_coms_channel_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = m_coms_channel_process &rArr; nrf_queue_generic_pop &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_free
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_generic_pop
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_hid_report_send
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_process_keys
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_process_audio_hid
</UL>

<P><STRONG><a name="[67]"></a>m_coms_create_consumer_ctrl_report</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, m_coms.o(i.m_coms_create_consumer_ctrl_report))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = m_coms_create_consumer_ctrl_report &rArr; m_protocol_hid_state_page_it_next &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_protocol_hid_state_page_it_next
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_protocol_hid_state_page_it_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_coms.o(i.m_coms_event_handler)
</UL>
<P><STRONG><a name="[65]"></a>m_coms_create_keyboard_report</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, m_coms.o(i.m_coms_create_keyboard_report))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = m_coms_create_keyboard_report &rArr; m_protocol_hid_state_page_it_next &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_protocol_hid_state_page_it_next
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_protocol_hid_state_page_it_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_coms.o(i.m_coms_event_handler)
</UL>
<P><STRONG><a name="[66]"></a>m_coms_create_mouse_btn_report</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, m_coms.o(i.m_coms_create_mouse_btn_report))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = m_coms_create_mouse_btn_report &rArr; m_protocol_hid_state_page_it_next &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_protocol_hid_state_page_it_next
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_protocol_hid_state_page_it_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_coms.o(i.m_coms_event_handler)
</UL>
<P><STRONG><a name="[2f6]"></a>m_coms_enqueue_report</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, m_coms.o(i.m_coms_enqueue_report))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = m_coms_enqueue_report &rArr; m_coms_channel_enqueue &rArr; nrf_queue_push &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_free
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_alloc
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_channel_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_event_handler
</UL>

<P><STRONG><a name="[93]"></a>m_coms_hid_boot_mode_callback</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, m_coms.o(i.m_coms_hid_boot_mode_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = m_coms_hid_boot_mode_callback &rArr; app_error_handler &rArr;  app_error_fault_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_coms.o(.constdata)
</UL>
<P><STRONG><a name="[f2]"></a>m_coms_log_statistics</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, m_coms.o(i.m_coms_log_statistics))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = m_coms_log_statistics &rArr; nrf_queue_max_utilization_get &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_max_utilization_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_coms.o(pwr_mgmt_data3)
</UL>
<P><STRONG><a name="[94]"></a>m_coms_process_audio_hid</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, m_coms.o(i.m_coms_process_audio_hid))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = m_coms_process_audio_hid &rArr; m_coms_channel_process &rArr; nrf_queue_generic_pop &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_channel_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_coms.o(.constdata)
</UL>
<P><STRONG><a name="[2c7]"></a>m_coms_process_data</STRONG> (Thumb, 210 bytes, Stack size 56 bytes, m_coms.o(i.m_coms_process_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = m_coms_process_data &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_evt_handler
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_send_audio
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_event_handler
</UL>

<P><STRONG><a name="[96]"></a>m_coms_process_keys</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, m_coms.o(i.m_coms_process_keys))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = m_coms_process_keys &rArr; m_coms_channel_process &rArr; nrf_queue_generic_pop &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_channel_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_coms.o(.constdata)
</UL>
<P><STRONG><a name="[97]"></a>m_coms_process_wp_motion</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, m_coms.o(i.m_coms_process_wp_motion))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = m_coms_process_wp_motion &rArr; m_coms_ble_hid_report_send &rArr; m_coms_ble_hid_mouse_boot_report_send &rArr; ble_hids_boot_mouse_inp_rep_send &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_protocol_hid_state_get
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_hid_report_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_coms.o(.constdata)
</UL>
<P><STRONG><a name="[95]"></a>m_coms_process_xy_motion</STRONG> (Thumb, 228 bytes, Stack size 32 bytes, m_coms.o(i.m_coms_process_xy_motion))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = m_coms_process_xy_motion &rArr; m_coms_ble_hid_report_send &rArr; m_coms_ble_hid_mouse_boot_report_send &rArr; ble_hids_boot_mouse_inp_rep_send &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_protocol_hid_state_get
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_hid_report_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_coms.o(.constdata)
</UL>
<P><STRONG><a name="[64]"></a>m_coms_report_free_func</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, m_coms.o(i.m_coms_report_free_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = m_coms_report_free_func &rArr; nrf_balloc_free &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_coms.o(i.m_coms_enqueue_report)
</UL>
<P><STRONG><a name="[ea]"></a>m_coms_shutdown</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, m_coms.o(i.m_coms_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = m_coms_shutdown &rArr; m_coms_ble_shutdown &rArr; app_sched_event_put &rArr; app_isched_event_put &rArr; nrf_queue_push &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_shutdown
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_coms.o(pwr_mgmt_data1)
</UL>
<P><STRONG><a name="[5a]"></a>ble_hids_error_handler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, m_coms_ble.o(i.ble_hids_error_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_hids_error_handler &rArr; app_error_handler &rArr;  app_error_fault_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_coms_ble.o(i.m_coms_ble_init)
</UL>
<P><STRONG><a name="[59]"></a>ble_hids_evt_handler</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, m_coms_ble.o(i.ble_hids_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_hids_evt_handler &rArr; app_error_handler &rArr;  app_error_fault_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_coms_ble.o(i.m_coms_ble_init)
</UL>
<P><STRONG><a name="[63]"></a>ble_stack_disable</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, m_coms_ble.o(i.ble_stack_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = ble_stack_disable &rArr; nrf_sdh_disable_request &rArr; nrf_section_iter_init &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_disable_request
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_coms_ble.o(i.m_coms_ble_shutdown)
</UL>
<P><STRONG><a name="[5e]"></a>conn_params_error_handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, m_coms_ble.o(i.conn_params_error_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = conn_params_error_handler &rArr; app_error_handler &rArr;  app_error_fault_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_coms_ble.o(i.m_coms_ble_init)
</UL>
<P><STRONG><a name="[5c]"></a>gatt_evt_handler</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, m_coms_ble.o(i.gatt_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = gatt_evt_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_coms_ble.o(i.m_coms_ble_init)
</UL>
<P><STRONG><a name="[5d]"></a>ias_evt_handler</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, m_coms_ble.o(i.ias_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ias_evt_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_coms_ble.o(i.m_coms_ble_init)
</UL>
<P><STRONG><a name="[9a]"></a>m_coms_ble_cmd</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, m_coms_ble.o(i.m_coms_ble_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = m_coms_ble_cmd &rArr; nrf_cli_help_print &rArr; nrf_cli_fprintf &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; unsigned_print &rArr; nrf_fprintf_buffer_flush &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_print
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> m_coms_ble.o(.constdata)
<LI> m_coms_ble.o(.constdata)
</UL>
<P><STRONG><a name="[100]"></a>m_coms_ble_on_ble_evt</STRONG> (Thumb, 866 bytes, Stack size 72 bytes, m_coms_ble.o(i.m_coms_ble_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = m_coms_ble_on_ble_evt &rArr; m_coms_ble_shutdown &rArr; app_sched_event_put &rArr; app_isched_event_put &rArr; nrf_queue_push &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_task_create
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_init
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_uninit
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_adv_running
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_is_notification_enabled
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_sl_enable
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_m_coms_ble_c_51a43647__nrf_atomic_internal_add
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_m_coms_ble_c_51a43647__nrf_atomic_internal_mov
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peer_id_get
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_shutdown
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_coms_ble.o(sdh_ble_observers2)
</UL>
<P><STRONG><a name="[104]"></a>m_coms_ble_on_sys_evt</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, m_coms_ble.o(i.m_coms_ble_on_sys_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = m_coms_ble_on_sys_evt &rArr; m_coms_ble_shutdown &rArr; app_sched_event_put &rArr; app_isched_event_put &rArr; nrf_queue_push &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_is_busy
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_shutdown
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_coms_ble.o(sdh_soc_observers1)
</UL>
<P><STRONG><a name="[99]"></a>m_coms_ble_sl_disable_cmd</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, m_coms_ble.o(i.m_coms_ble_sl_disable_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = m_coms_ble_sl_disable_cmd &rArr; nrf_cli_help_print &rArr; nrf_cli_fprintf &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; unsigned_print &rArr; nrf_fprintf_buffer_flush &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_print
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_m_coms_ble_c_51a43647__nrf_atomic_internal_add
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_coms_ble.o(.constdata)
</UL>
<P><STRONG><a name="[98]"></a>m_coms_ble_sl_enable_cmd</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, m_coms_ble.o(i.m_coms_ble_sl_enable_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = m_coms_ble_sl_enable_cmd &rArr; nrf_cli_help_print &rArr; nrf_cli_fprintf &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; unsigned_print &rArr; nrf_fprintf_buffer_flush &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_print
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_sl_enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_coms_ble.o(.constdata)
</UL>
<P><STRONG><a name="[58]"></a>on_encrypt_timeout</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, m_coms_ble.o(i.on_encrypt_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = on_encrypt_timeout &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_conn_secure
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_coms_ble.o(i.m_coms_ble_init)
</UL>
<P><STRONG><a name="[5b]"></a>peer_manager_evt_handler</STRONG> (Thumb, 1754 bytes, Stack size 48 bytes, m_coms_ble.o(i.peer_manager_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = peer_manager_evt_handler &rArr; pm_local_database_has_changed &rArr; gcm_local_database_has_changed &rArr; pending_flags_check &rArr; gscm_local_db_cache_update &rArr; pdb_write_buf_store &rArr; write_buf_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_process &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_4
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_5
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_local_database_has_changed
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_conn_sec_params_reply
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_conn_sec_config_reply
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_gc
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_sl_enable
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peer_id_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_coms_ble.o(i.m_coms_ble_init)
</UL>
<P><STRONG><a name="[56]"></a>adv_start_handler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, m_coms_ble_adv.o(i.adv_start_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = adv_start_handler &rArr; m_coms_ble_adv_real_start &rArr; pm_peer_delete &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_process &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_adv_real_start
</UL>
<BR>[Address Reference Count : 4]<UL><LI> m_coms_ble_adv.o(i.m_coms_ble_adv_on_ble_evt)
<LI> m_coms_ble_adv.o(i.m_coms_ble_adv_on_sys_evt)
<LI> m_coms_ble_adv.o(i.m_coms_ble_adv_pm_evt_handler)
<LI> m_coms_ble_adv.o(i.set_lesc_key)
</UL>
<P><STRONG><a name="[2ac]"></a>m_coms_ble_adv_determine</STRONG> (Thumb, 720 bytes, Stack size 40 bytes, m_coms_ble_adv.o(i.m_coms_ble_adv_determine))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = m_coms_ble_adv_determine &rArr; m_coms_ble_lesc_generate_key &rArr; rng_monitor_request &rArr; app_isched_event_put &rArr; nrf_queue_push &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_lesc_public_key_set
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_lesc_generate_key
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_next_peer_id_get
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_adv_on_ble_evt
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_adv_start
</UL>

<P><STRONG><a name="[fb]"></a>m_coms_ble_adv_on_ble_evt</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, m_coms_ble_adv.o(i.m_coms_ble_adv_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = m_coms_ble_adv_on_ble_evt &rArr; m_coms_ble_adv_determine &rArr; m_coms_ble_lesc_generate_key &rArr; rng_monitor_request &rArr; app_isched_event_put &rArr; nrf_queue_push &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sched_event_put
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_adv_determine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_coms_ble_adv.o(sdh_ble_observers1)
</UL>
<P><STRONG><a name="[105]"></a>m_coms_ble_adv_on_sys_evt</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, m_coms_ble_adv.o(i.m_coms_ble_adv_on_sys_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = m_coms_ble_adv_on_sys_evt &rArr; app_sched_event_put &rArr; app_isched_event_put &rArr; nrf_queue_push &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sched_event_put
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_is_busy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_coms_ble_adv.o(sdh_soc_observers1)
</UL>
<P><STRONG><a name="[55]"></a>m_coms_ble_adv_pm_evt_handler</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, m_coms_ble_adv.o(i.m_coms_ble_adv_pm_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = m_coms_ble_adv_pm_evt_handler &rArr; m_coms_ble_lesc_generate_key &rArr; rng_monitor_request &rArr; app_isched_event_put &rArr; nrf_queue_push &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sched_event_put
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_lesc_public_key_set
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_lesc_generate_key
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_coms_ble_adv.o(i.m_coms_ble_adv_init)
</UL>
<P><STRONG><a name="[15a]"></a>m_coms_ble_adv_real_start</STRONG> (Thumb, 1440 bytes, Stack size 368 bytes, m_coms_ble_adv.o(i.m_coms_ble_adv_real_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 872<LI>Call Chain = m_coms_ble_adv_real_start &rArr; pm_peer_delete &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_process &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_6
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_whitelist_set
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_whitelist_get
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peer_ranks_get
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peer_delete
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peer_data_bonding_load
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_device_identities_list_set
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_set
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_addr_peer_ids_get
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_is_busy
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_start_handler
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_adv_start
</UL>

<P><STRONG><a name="[54]"></a>set_lesc_key</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, m_coms_ble_adv.o(i.set_lesc_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = set_lesc_key &rArr; app_sched_event_put &rArr; app_isched_event_put &rArr; nrf_queue_push &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sched_event_put
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_lesc_public_key_set
</UL>
<BR>[Address Reference Count : 2]<UL><LI> m_coms_ble_adv.o(i.m_coms_ble_adv_determine)
<LI> m_coms_ble_adv.o(i.m_coms_ble_adv_pm_evt_handler)
</UL>
<P><STRONG><a name="[3]"></a>m_coms_ble_dfu_fs_evt_handler</STRONG> (Thumb, 430 bytes, Stack size 56 bytes, m_coms_ble_dfu.o(i.m_coms_ble_dfu_fs_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = m_coms_ble_dfu_fs_evt_handler &rArr; nrf_pwr_mgmt_shutdown &rArr; app_sched_event_put &rArr; app_isched_event_put &rArr; nrf_queue_push &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwr_mgmt_shutdown
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___16_m_coms_ble_dfu_c_d6932032__nrf_atomic_internal_and
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_write
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_erase
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_coms_ble_dfu.o(fs_data)
</UL>
<P><STRONG><a name="[fc]"></a>m_coms_ble_dfu_on_ble_evt</STRONG> (Thumb, 618 bytes, Stack size 128 bytes, m_coms_ble_dfu.o(i.m_coms_ble_dfu_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = m_coms_ble_dfu_on_ble_evt &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___16_m_coms_ble_dfu_c_d6932032__nrf_atomic_internal_and
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___16_m_coms_ble_dfu_c_d6932032__nrf_atomic_internal_orr
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peer_data_bonding_load
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peer_id_get
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_id_addr_get
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_write
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc32_compute
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_is_indication_enabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_coms_ble_dfu.o(sdh_ble_observers1)
</UL>
<P><STRONG><a name="[e5]"></a>m_coms_ble_dfu_shutdown</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, m_coms_ble_dfu.o(i.m_coms_ble_dfu_shutdown))
<BR>[Address Reference Count : 1]<UL><LI> m_coms_ble_dfu.o(pwr_mgmt_data0)
</UL>
<P><STRONG><a name="[fd]"></a>m_coms_ble_hid_on_ble_evt</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, m_coms_ble_hid.o(i.m_coms_ble_hid_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = m_coms_ble_hid_on_ble_evt &rArr; ble_hids_on_ble_evt
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hids_on_ble_evt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_coms_ble_hid.o(sdh_ble_observers1)
</UL>
<P><STRONG><a name="[57]"></a>on_hids_evt</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, m_coms_ble_hid.o(i.on_hids_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = on_hids_evt &rArr; app_error_handler &rArr;  app_error_fault_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_coms_ble_hid.o(i.m_coms_ble_hid_init)
</UL>
<P><STRONG><a name="[2cb]"></a>security_mode_cccd_set</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, m_coms_ble_hid.o(i.security_mode_cccd_set))
<BR><BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_hid_init
</UL>

<P><STRONG><a name="[2cc]"></a>security_mode_set</STRONG> (Thumb, 94 bytes, Stack size 4 bytes, m_coms_ble_hid.o(i.security_mode_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = security_mode_set
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_hid_init
</UL>

<P><STRONG><a name="[60]"></a>m_coms_ble_lesc_calc_dh_key</STRONG> (Thumb, 340 bytes, Stack size 32 bytes, m_coms_ble_lesc.o(i.m_coms_ble_lesc_calc_dh_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 2752<LI>Call Chain = m_coms_ble_lesc_calc_dh_key &rArr; nrf_crypto_ecdh_shared_secret_compute &rArr; uECC_shared_secret &rArr; EccPoint_mult &rArr; XYcZ_addC &rArr; uECC_vli_modSquare_fast &rArr; uECC_vli_square
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_4
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_crypto_ecdh_shared_secret_compute
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___17_m_coms_ble_lesc_c_d078621f__nrf_atomic_internal_and
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_coms_ble_lesc.o(i.m_coms_ble_lesc_gen_data)
</UL>
<P><STRONG><a name="[61]"></a>m_coms_ble_lesc_calc_keys</STRONG> (Thumb, 726 bytes, Stack size 32 bytes, m_coms_ble_lesc.o(i.m_coms_ble_lesc_calc_keys))
<BR><BR>[Stack]<UL><LI>Max Depth = 2456<LI>Call Chain = m_coms_ble_lesc_calc_keys &rArr; nrf_crypto_ecc_key_pair_generate &rArr; uECC_make_key &rArr; EccPoint_compute_public_key &rArr; EccPoint_mult &rArr; XYcZ_addC &rArr; uECC_vli_modSquare_fast &rArr; uECC_vli_square
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_isched_event_put
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_4
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_crypto_ecc_public_key_to_raw
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_crypto_ecc_key_pair_generate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_coms_ble_lesc.o(i.m_coms_ble_lesc_gen_data)
</UL>
<P><STRONG><a name="[62]"></a>m_coms_ble_lesc_gen_data</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, m_coms_ble_lesc.o(i.m_coms_ble_lesc_gen_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = m_coms_ble_lesc_gen_data &rArr; app_isched_event_put &rArr; nrf_queue_push &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_isched_event_put
</UL>
<BR>[Address Reference Count : 2]<UL><LI> m_coms_ble_lesc.o(i.m_coms_ble_lesc_generate_key)
<LI> m_coms_ble_lesc.o(i.m_coms_ble_lesc_on_ble_evt)
</UL>
<P><STRONG><a name="[5f]"></a>m_coms_ble_lesc_notify</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, m_coms_ble_lesc.o(i.m_coms_ble_lesc_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = m_coms_ble_lesc_notify
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___17_m_coms_ble_lesc_c_d078621f__nrf_atomic_internal_and
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_coms_ble_lesc.o(i.m_coms_ble_lesc_calc_keys)
</UL>
<P><STRONG><a name="[f6]"></a>m_coms_ble_lesc_on_ble_evt</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, m_coms_ble_lesc.o(i.m_coms_ble_lesc_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = m_coms_ble_lesc_on_ble_evt &rArr; rng_monitor_request &rArr; app_isched_event_put &rArr; nrf_queue_push &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rng_monitor_request
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_crypto_ecc_public_key_from_raw
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___17_m_coms_ble_lesc_c_d078621f__nrf_atomic_internal_orr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_coms_ble_lesc.o(sdh_ble_observers0)
</UL>
<P><STRONG><a name="[f4]"></a>board_shutdown</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, m_init.o(i.board_shutdown))
<BR><BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_board_shutdown
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_init.o(pwr_mgmt_data4)
</UL>
<P><STRONG><a name="[69]"></a>m_ir_tx_ack_symbol</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, m_ir_tx.o(i.m_ir_tx_ack_symbol))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = m_ir_tx_ack_symbol &rArr; nrf_pwr_mgmt_shutdown &rArr; app_sched_event_put &rArr; app_isched_event_put &rArr; nrf_queue_push &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ir_send_symbol
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ir_disable
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwr_mgmt_shutdown
</UL>
<BR>[Address Reference Count : 2]<UL><LI> m_ir_tx.o(i.m_ir_tx_drv_ack_handler)
<LI> m_ir_tx.o(i.m_ir_tx_init)
</UL>
<P><STRONG><a name="[6a]"></a>m_ir_tx_drv_ack_handler</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, m_ir_tx.o(i.m_ir_tx_drv_ack_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = m_ir_tx_drv_ack_handler &rArr; app_isched_event_put &rArr; nrf_queue_push &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_isched_event_put
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_ir_tx.o(i.m_ir_tx_init)
</UL>
<P><STRONG><a name="[303]"></a>m_ir_tx_send_symbol</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, m_ir_tx.o(i.m_ir_tx_send_symbol))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = m_ir_tx_send_symbol &rArr; drv_ir_send_symbol &rArr; nrf_drv_pwm_simple_playback &rArr; nrf_pwm_sequence_set &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ir_send_symbol
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ir_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_ir_tx_shutdown
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_ir_tx_event_handler
</UL>

<P><STRONG><a name="[eb]"></a>m_ir_tx_shutdown</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, m_ir_tx.o(i.m_ir_tx_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = m_ir_tx_shutdown &rArr; m_ir_tx_send_symbol &rArr; drv_ir_send_symbol &rArr; nrf_drv_pwm_simple_playback &rArr; nrf_pwm_sequence_set &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_ir_tx_send_symbol
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_ir_tx.o(pwr_mgmt_data1)
</UL>
<P><STRONG><a name="[6c]"></a>m_keyboard_event_handler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, m_keyboard.o(i.m_keyboard_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = m_keyboard_event_handler &rArr; app_sched_event_put &rArr; app_isched_event_put &rArr; nrf_queue_push &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sched_event_put
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_keyboard.o(i.m_keyboard_init)
</UL>
<P><STRONG><a name="[6d]"></a>m_keyboard_held_timer_timeout_handler</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, m_keyboard.o(i.m_keyboard_held_timer_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = m_keyboard_held_timer_timeout_handler &rArr; event_send &rArr; app_isched_event_put &rArr; nrf_queue_push &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_keyboard.o(i.m_keyboard_init)
</UL>
<P><STRONG><a name="[6b]"></a>m_keyboard_process</STRONG> (Thumb, 760 bytes, Stack size 96 bytes, m_keyboard.o(i.m_keyboard_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = m_keyboard_process &rArr; event_send &rArr; app_isched_event_put &rArr; nrf_queue_push &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_cnt_get
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_push
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_generic_pop
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send
</UL>
<BR>[Address Reference Count : 2]<UL><LI> m_keyboard.o(i.m_keyboard_event_handler)
<LI> m_keyboard.o(i.m_keyboard_init)
</UL>
<P><STRONG><a name="[ec]"></a>m_keyboard_shutdown</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, m_keyboard.o(i.m_keyboard_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = m_keyboard_shutdown &rArr; drv_keyboard_shutdown &rArr; app_gpiote_user_disable &rArr; user_enable &rArr; nrf_drv_gpiote_in_event_enable &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_keyboard_shutdown
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_keyboard_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_keyboard.o(pwr_mgmt_data1)
</UL>
<P><STRONG><a name="[6f]"></a>m_nfc_callback</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, m_nfc.o(i.m_nfc_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = m_nfc_callback &rArr; app_sched_event_put &rArr; app_isched_event_put &rArr; nrf_queue_push &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sched_event_put
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_nfc.o(i.m_nfc_init)
</UL>
<P><STRONG><a name="[6e]"></a>m_nfc_handler</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, m_nfc.o(i.m_nfc_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = m_nfc_handler &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwr_mgmt_feed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_nfc.o(i.m_nfc_callback)
</UL>
<P><STRONG><a name="[70]"></a>m_nfc_prepare_pairing_keys</STRONG> (Thumb, 570 bytes, Stack size 88 bytes, m_nfc.o(i.m_nfc_prepare_pairing_keys))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = m_nfc_prepare_pairing_keys &rArr; nfc_ble_pair_default_msg_encode &rArr; nfc_ble_full_handover_select_msg_encode &rArr; nfc_ndef_msg_encode &rArr; nfc_ndef_record_encode &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rng_monitor_request
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_4
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_6
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rng_rand
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_t2t_payload_set
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_t2t_emulation_start
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_ble_pair_default_msg_encode
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_coms_ble_lesc_generate_oob_data
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_nfc_event_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_nfc.o(i.m_nfc_prepare_pairing_keys)
</UL>
<P><STRONG><a name="[e6]"></a>m_nfc_shutdown</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, m_nfc.o(i.m_nfc_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = m_nfc_shutdown &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_t2t_emulation_stop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_nfc.o(pwr_mgmt_data0)
</UL>
<P><STRONG><a name="[71]"></a>m_protocol_hid_keymap_compare</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, m_protocol_hid.o(i.m_protocol_hid_keymap_compare))
<BR>[Address Reference Count : 1]<UL><LI> m_protocol_hid.o(i.m_protocol_hid_key_event_handler)
</UL>
<P><STRONG><a name="[317]"></a>m_protocol_hid_state_enqueue</STRONG> (Thumb, 260 bytes, Stack size 24 bytes, m_protocol_hid_state.o(i.m_protocol_hid_state_enqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = m_protocol_hid_state_enqueue &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_cnt_get
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_protocol_hid_state_eventq_cleanup
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_protocol_hid_state_update
</UL>

<P><STRONG><a name="[316]"></a>m_protocol_hid_state_eventq_cleanup</STRONG> (Thumb, 292 bytes, Stack size 32 bytes, m_protocol_hid_state.o(i.m_protocol_hid_state_eventq_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = m_protocol_hid_state_eventq_cleanup &rArr; nrf_log_frontend_std_2 &rArr;  std_n (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_cnt_diff_compute
</UL>
<BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_protocol_hid_state_enqueue
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_protocol_hid_state_connect
</UL>

<P><STRONG><a name="[f3]"></a>m_protocol_hid_state_log_statistics</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, m_protocol_hid_state.o(i.m_protocol_hid_state_log_statistics))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = m_protocol_hid_state_log_statistics &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_protocol_hid_state.o(pwr_mgmt_data3)
</UL>
<P><STRONG><a name="[72]"></a>m_protocol_hid_state_report_issued</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, m_protocol_hid_state.o(i.m_protocol_hid_state_report_issued))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = m_protocol_hid_state_report_issued &rArr; event_send &rArr; app_isched_event_put &rArr; nrf_queue_push &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_isched_event_put
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_protocol_hid_state_set_value
</UL>
<BR>[Address Reference Count : 3]<UL><LI> m_protocol_hid_state.o(i.m_protocol_hid_state_report_issued)
<LI> m_protocol_hid_state.o(i.m_protocol_hid_state_connect)
<LI> m_protocol_hid_state.o(i.m_protocol_hid_state_update)
</UL>
<P><STRONG><a name="[318]"></a>m_protocol_hid_state_set_value</STRONG> (Thumb, 300 bytes, Stack size 48 bytes, m_protocol_hid_state.o(i.m_protocol_hid_state_set_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = m_protocol_hid_state_set_value &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsearch
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_protocol_hid_state_report_issued
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_protocol_hid_state_update
</UL>

<P><STRONG><a name="[73]"></a>m_protocol_hid_state_usage_compare</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, m_protocol_hid_state.o(i.m_protocol_hid_state_usage_compare))
<BR>[Address Reference Count : 2]<UL><LI> m_protocol_hid_state.o(i.m_protocol_hid_state_get)
<LI> m_protocol_hid_state.o(i.m_protocol_hid_state_set_value)
</UL>
<P><STRONG><a name="[74]"></a>m_protocol_hid_state_usage_page_compare</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, m_protocol_hid_state.o(i.m_protocol_hid_state_usage_page_compare))
<BR>[Address Reference Count : 1]<UL><LI> m_protocol_hid_state.o(i.m_protocol_hid_state_page_it_init)
</UL>
<P><STRONG><a name="[75]"></a>m_protocol_ir_keymap_compare</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, m_protocol_ir.o(i.m_protocol_ir_keymap_compare))
<BR>[Address Reference Count : 1]<UL><LI> m_protocol_ir.o(i.m_protocol_ir_event_handler)
</UL>
<P><STRONG><a name="[17c]"></a>uuid_list_encode</STRONG> (Thumb, 356 bytes, Stack size 64 bytes, ble_advdata.o(i.uuid_list_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = uuid_list_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_encode
</UL>

<P><STRONG><a name="[f7]"></a>ble_evt_handler</STRONG> (Thumb, 536 bytes, Stack size 40 bytes, ble_conn_params.o(i.ble_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = ble_evt_handler &rArr; app_timer_start &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_is_notification_enabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_conn_params.o(sdh_ble_observers0)
</UL>
<P><STRONG><a name="[3d]"></a>update_timeout_handler</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, ble_conn_params.o(i.update_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = update_timeout_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_conn_params.o(i.ble_conn_params_init)
</UL>
<P><STRONG><a name="[f8]"></a>ble_evt_handler</STRONG> (Thumb, 276 bytes, Stack size 168 bytes, ble_conn_state.o(i.ble_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = ble_evt_handler &rArr; sdk_mapped_flags_key_list_get &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_update_by_key
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_key_list_get
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_first_key_index_get
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_bulk_update_by_key
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_conn_state.o(sdh_ble_observers0)
</UL>
<P><STRONG><a name="[251]"></a>local_db_apply_in_evt</STRONG> (Thumb, 180 bytes, Stack size 72 bytes, gatt_cache_manager.o(i.local_db_apply_in_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = local_db_apply_in_evt &rArr; gscm_local_db_cache_apply &rArr; pdb_peer_data_ptr_get &rArr; pds_peer_data_read &rArr; fds_record_find &rArr; record_find
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_local_db_cache_apply
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_im_evt_handler
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ble_evt_handler
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pending_flags_check
</UL>

<P><STRONG><a name="[254]"></a>pending_flags_check</STRONG> (Thumb, 490 bytes, Stack size 136 bytes, gatt_cache_manager.o(i.pending_flags_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = pending_flags_check &rArr; gscm_local_db_cache_update &rArr; pdb_write_buf_store &rArr; write_buf_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_process &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_unlock
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_lock
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_service_changed_ind_send
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_local_db_cache_update
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_db_change_notification_done
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_apply_in_evt
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_collection
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_conn_handles
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_pdb_evt_handler
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_local_database_has_changed
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ble_evt_handler
</UL>

<P><STRONG><a name="[27f]"></a>peers_id_keys_get</STRONG> (Thumb, 220 bytes, Stack size 144 bytes, id_manager.o(i.peers_id_keys_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = peers_id_keys_get &rArr; pds_peer_data_read &rArr; fds_record_find &rArr; record_find
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_read
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_whitelist_set
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_whitelist_get
</UL>

<P><STRONG><a name="[86]"></a>fds_evt_handler</STRONG> (Thumb, 234 bytes, Stack size 48 bytes, peer_data_storage.o(i.fds_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = fds_evt_handler &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_process &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_free
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_delete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> peer_data_storage.o(i.pds_init)
</UL>
<P><STRONG><a name="[235]"></a>peer_data_delete</STRONG> (Thumb, 164 bytes, Stack size 72 bytes, peer_data_storage.o(i.peer_data_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = peer_data_delete &rArr; fds_file_delete &rArr; queue_process &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_get_next_deleted
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_free
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_find_in_file
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_file_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_id_free
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_evt_handler
</UL>

<P><STRONG><a name="[391]"></a>write_buffer_record_find</STRONG> (Thumb, 104 bytes, Stack size 12 bytes, peer_database.o(i.write_buffer_record_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = write_buffer_record_find
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_free
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_store
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_release
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_get
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_store_prepare
</UL>

<P><STRONG><a name="[fe]"></a>ble_evt_handler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, peer_manager.o(i.ble_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = ble_evt_handler &rArr; sm_ble_evt_handler &rArr; smd_ble_evt_handler &rArr; link_secure_failure &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_process &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_ble_evt_handler
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ble_evt_handler
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_ble_evt_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> peer_manager.o(sdh_ble_observers1)
</UL>
<P><STRONG><a name="[3b5]"></a>rank_vars_update</STRONG> (Thumb, 166 bytes, Stack size 56 bytes, peer_manager.o(i.rank_vars_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = rank_vars_update &rArr; pdb_peer_data_load &rArr; pds_peer_data_read &rArr; fds_record_find &rArr; record_find
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_next_peer_id_get
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_data_load
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pdb_evt_handler
</UL>

<P><STRONG><a name="[287]"></a>link_secure_failure</STRONG> (Thumb, 292 bytes, Stack size 56 bytes, security_dispatcher.o(i.link_secure_failure))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = link_secure_failure &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_process &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_free
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_release
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_ble_evt_handler
</UL>

<P><STRONG><a name="[285]"></a>link_secure</STRONG> (Thumb, 352 bytes, Stack size 88 bytes, security_manager.o(i.link_secure))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = link_secure &rArr; smd_link_secure &rArr; ble_conn_state_role &rArr; sdk_mapped_flags_get_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_link_secure
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_link_secure
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_ble_evt_handler
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_pdb_evt_handler
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_smd_evt_handler
</UL>

<P><STRONG><a name="[382]"></a>params_reply_pending_process</STRONG> (Thumb, 320 bytes, Stack size 144 bytes, security_manager.o(i.params_reply_pending_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = params_reply_pending_process &rArr; smd_params_reply &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_process &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_collection
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_conn_handles
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_pdb_evt_handler
</UL>

<P><STRONG><a name="[3c4]"></a>sec_params_verify</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, security_manager.o(i.sec_params_verify))
<BR><BR>[Called By]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_sec_params_set
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_sec_params_reply
</UL>

<P><STRONG><a name="[3c6]"></a>smd_params_reply_perform</STRONG> (Thumb, 244 bytes, Stack size 72 bytes, security_manager.o(i.smd_params_reply_perform))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = smd_params_reply_perform &rArr; smd_params_reply &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_process &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_smd_evt_handler
</UL>

<P><STRONG><a name="[18c]"></a>char_add</STRONG> (Thumb, 156 bytes, Stack size 80 bytes, ble_dis.o(i.char_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = char_add &rArr; app_error_handler &rArr;  app_error_fault_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dis_init
</UL>

<P><STRONG><a name="[196]"></a>boot_inp_rep_char_add</STRONG> (Thumb, 204 bytes, Stack size 72 bytes, ble_hids.o(i.boot_inp_rep_char_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = boot_inp_rep_char_add
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hids_init
</UL>

<P><STRONG><a name="[195]"></a>rep_char_add</STRONG> (Thumb, 312 bytes, Stack size 96 bytes, ble_hids.o(i.rep_char_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = rep_char_add
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_report_ref_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hids_init
</UL>

<P><STRONG><a name="[ad]"></a>nrf_mpu_cmd_dump</STRONG> (Thumb, 170 bytes, Stack size 56 bytes, nrf_mpu.o(i.nrf_mpu_cmd_dump))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = nrf_mpu_cmd_dump &rArr; nrf_cli_help_print &rArr; nrf_cli_fprintf &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; unsigned_print &rArr; nrf_fprintf_buffer_flush &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_print
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_mpu.o(.constdata)
</UL>
<P><STRONG><a name="[ae]"></a>nrf_mpu_cmd_info</STRONG> (Thumb, 458 bytes, Stack size 56 bytes, nrf_mpu.o(i.nrf_mpu_cmd_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = nrf_mpu_cmd_info &rArr; nrf_cli_help_print &rArr; nrf_cli_fprintf &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; unsigned_print &rArr; nrf_fprintf_buffer_flush &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_print
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_mpu.o(.constdata)
</UL>
<P><STRONG><a name="[af]"></a>nrf_mpu_cmd_unknown</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, nrf_mpu.o(i.nrf_mpu_cmd_unknown))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = nrf_mpu_cmd_unknown &rArr; nrf_cli_help_print &rArr; nrf_cli_fprintf &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; unsigned_print &rArr; nrf_fprintf_buffer_flush &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_print
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_mpu.o(.constdata)
</UL>
<P><STRONG><a name="[80]"></a>rng_func</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, nrf_crypto_sw_rng.o(i.rng_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = rng_func &rArr; nrf_drv_rng_rand &rArr; nrf_queue_read &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rng_bytes_available
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rng_rand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_crypto_sw_rng.o(i.nrf_crypto_rng_init)
</UL>
<P><STRONG><a name="[108]"></a>sd_state_evt_handler</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, nrf_drv_clock.o(i.sd_state_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = sd_state_evt_handler &rArr; nrf_drv_common_irq_enable &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_is_enabled
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_drv_clock.o(sdh_state_observers0)
</UL>
<P><STRONG><a name="[102]"></a>soc_evt_handler</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, nrf_drv_clock.o(i.soc_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = soc_evt_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_drv_clock.o(sdh_soc_observers0)
</UL>
<P><STRONG><a name="[357]"></a>nrf_pwm_sequence_set</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, nrf_drv_pwm.o(i.nrf_pwm_sequence_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = nrf_pwm_sequence_set &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_pwm_simple_playback
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_pwm_complex_playback
</UL>

<P><STRONG><a name="[109]"></a>sd_state_evt_handler</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, nrf_drv_rng.o(i.sd_state_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = sd_state_evt_handler &rArr; nrf_drv_common_irq_enable &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_is_enabled
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_drv_rng.o(sdh_state_observers0)
</UL>
<P><STRONG><a name="[150]"></a>irq_handler_twim</STRONG> (Thumb, 332 bytes, Stack size 40 bytes, nrf_drv_twi.o(i.irq_handler_twim))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = irq_handler_twim &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler
</UL>

<P><STRONG><a name="[360]"></a>nrf_delay_us</STRONG> (Thumb, 134 bytes, Stack size 0 bytes, nrf_drv_twi.o(i.nrf_delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_init
</UL>

<P><STRONG><a name="[16a]"></a>user_enable</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, app_gpiote.o(i.user_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = user_enable &rArr; nrf_drv_gpiote_in_event_enable &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpiote_user_enable
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpiote_user_disable
</UL>

<P><STRONG><a name="[151]"></a>nrf_delay_us</STRONG> (Thumb, 134 bytes, Stack size 0 bytes, app_timer.o(i.nrf_delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI0_EGU0_IRQHandler
</UL>

<P><STRONG><a name="[39]"></a>timeout_handler_scheduled_exec</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, app_timer.o(i.timeout_handler_scheduled_exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = timeout_handler_scheduled_exec &rArr; app_error_handler &rArr;  app_error_fault_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_timer.o(i.RTC1_IRQHandler)
</UL>
<P><STRONG><a name="[4]"></a>fs_event_handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fds.o(i.fs_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = fs_event_handler &rArr; queue_process &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fds.o(fs_data)
</UL>
<P><STRONG><a name="[24d]"></a>gc_record_find_next</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, fds.o(i.gc_record_find_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gc_record_find_next &rArr; nrf_fstorage_write
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_write
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_erase
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_next
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[239]"></a>queue_process</STRONG> (Thumb, 1610 bytes, Stack size 80 bytes, fds.o(i.queue_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = queue_process &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_write
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_erase
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_get
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_free
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___5_fds_c_m_fs__nrf_atomic_internal_sub
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_by_desc
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_record_find_next
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_gc
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_init
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_file_delete
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_event_handler
</UL>

<P><STRONG><a name="[242]"></a>record_find</STRONG> (Thumb, 362 bytes, Stack size 32 bytes, fds.o(i.record_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = record_find
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_find_in_file
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_find_by_key
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_find
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[240]"></a>record_find_by_desc</STRONG> (Thumb, 306 bytes, Stack size 28 bytes, fds.o(i.record_find_by_desc))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = record_find_by_desc
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_open
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_close
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[24e]"></a>record_find_next</STRONG> (Thumb, 110 bytes, Stack size 4 bytes, fds.o(i.record_find_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = record_find_next
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_record_find_next
</UL>

<P><STRONG><a name="[247]"></a>write_enqueue</STRONG> (Thumb, 390 bytes, Stack size 72 bytes, fds.o(i.write_enqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = write_enqueue &rArr; queue_process &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_put
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_alloc
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___5_fds_c_m_fs__nrf_atomic_internal_add
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_write_reserved
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_write
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_update
</UL>

<P><STRONG><a name="[1c2]"></a>char_insert</STRONG> (Thumb, 518 bytes, Stack size 24 bytes, nrf_cli.o(i.char_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = char_insert &rArr; nrf_cli_fprintf &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; unsigned_print &rArr; nrf_fprintf_buffer_flush &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiline_console_data_check
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_state_collect
</UL>

<P><STRONG><a name="[1ca]"></a>cli_log_entry_process</STRONG> (Thumb, 360 bytes, Stack size 80 bytes, nrf_cli.o(i.cli_log_entry_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = cli_log_entry_process &rArr; nrf_cli_fprintf &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; unsigned_print &rArr; nrf_fprintf_buffer_flush &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_generic_pop
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_read
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_put
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_std_entry_process
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_hexdump_entry_process
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiline_console_data_check
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_task
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_cli_put
</UL>

<P><STRONG><a name="[1cf]"></a>cli_state_collect</STRONG> (Thumb, 3844 bytes, Stack size 192 bytes, nrf_cli.o(i.cli_state_collect))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = cli_state_collect &rArr; history_handle &rArr; nrf_cli_fprintf &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; unsigned_print &rArr; nrf_fprintf_buffer_flush &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwr_mgmt_feed
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_write
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_read
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_free
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_alloc
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiline_console_data_check
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_argv
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;history_handle
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_position_synchronize
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;completion_insert
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_get
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_insert
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_task
</UL>

<P><STRONG><a name="[7d]"></a>cli_transport_evt_handler</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, nrf_cli.o(i.cli_transport_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = cli_transport_evt_handler &rArr; task_events_set &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_events_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_cli.o(i.nrf_cli_init)
</UL>
<P><STRONG><a name="[1dc]"></a>cli_write</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, nrf_cli.o(i.cli_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = cli_write &rArr; task_events_wait &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_events_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_print_stream
</UL>

<P><STRONG><a name="[1d6]"></a>cmd_get</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, nrf_cli.o(i.cmd_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = cmd_get &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_print
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_state_collect
</UL>

<P><STRONG><a name="[1d8]"></a>completion_insert</STRONG> (Thumb, 238 bytes, Stack size 24 bytes, nrf_cli.o(i.completion_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = completion_insert &rArr; nrf_cli_fprintf &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; unsigned_print &rArr; nrf_fprintf_buffer_flush &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_position_synchronize
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_state_collect
</UL>

<P><STRONG><a name="[1f2]"></a>cursor_home_position_move</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, nrf_cli.o(i.cursor_home_position_move))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = cursor_home_position_move &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; unsigned_print &rArr; nrf_fprintf_buffer_flush &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiline_console_data_check
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;history_handle
</UL>

<P><STRONG><a name="[1f3]"></a>cursor_position_get</STRONG> (Thumb, 510 bytes, Stack size 48 bytes, nrf_cli.o(i.cursor_position_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = cursor_position_get &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; unsigned_print &rArr; nrf_fprintf_buffer_flush &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_buffer_flush
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_cmd_resize
</UL>

<P><STRONG><a name="[1d9]"></a>cursor_position_synchronize</STRONG> (Thumb, 206 bytes, Stack size 16 bytes, nrf_cli.o(i.cursor_position_synchronize))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = cursor_position_synchronize &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; unsigned_print &rArr; nrf_fprintf_buffer_flush &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiline_console_data_check
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_task
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;completion_insert
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_state_collect
</UL>

<P><STRONG><a name="[24c]"></a>format_offset_string_print</STRONG> (Thumb, 604 bytes, Stack size 48 bytes, nrf_cli.o(i.format_offset_string_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = format_offset_string_print &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; unsigned_print &rArr; nrf_fprintf_buffer_flush &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_events_wait
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_buffer_flush
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_print
</UL>

<P><STRONG><a name="[1da]"></a>history_handle</STRONG> (Thumb, 438 bytes, Stack size 32 bytes, nrf_cli.o(i.history_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = history_handle &rArr; nrf_cli_fprintf &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; unsigned_print &rArr; nrf_fprintf_buffer_flush &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_read
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_home_position_move
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_state_collect
</UL>

<P><STRONG><a name="[1d5]"></a>make_argv</STRONG> (Thumb, 416 bytes, Stack size 40 bytes, nrf_cli.o(i.make_argv))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = make_argv &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_state_collect
</UL>

<P><STRONG><a name="[1c4]"></a>multiline_console_data_check</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, nrf_cli.o(i.multiline_console_data_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = multiline_console_data_check
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_position_synchronize
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_home_position_move
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_state_collect
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_log_entry_process
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_insert
</UL>

<P><STRONG><a name="[344]"></a>nrf_cli_build_in_cmd_common_executed</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, nrf_cli.o(i.nrf_cli_build_in_cmd_common_executed))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = nrf_cli_build_in_cmd_common_executed &rArr; nrf_cli_help_print &rArr; nrf_cli_fprintf &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; unsigned_print &rArr; nrf_fprintf_buffer_flush &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_print
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_cmd_cli_stats_reset
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_cmd_cli_stats_get
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_cmd_cli_stats
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_cmd_resize_default
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_cmd_resize
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_cmd_history
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_cmd_echo_on
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_cmd_echo_off
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_cmd_echo
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_cmd_colors_on
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_cmd_colors_off
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_cmd_colors
</UL>

<P><STRONG><a name="[b3]"></a>nrf_cli_cmd_clear</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, nrf_cli.o(i.nrf_cli_cmd_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = nrf_cli_cmd_clear &rArr; nrf_cli_help_print &rArr; nrf_cli_fprintf &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; unsigned_print &rArr; nrf_fprintf_buffer_flush &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_print
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_cli.o(.constdata)
</UL>
<P><STRONG><a name="[b6]"></a>nrf_cli_cmd_colors</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, nrf_cli.o(i.nrf_cli_cmd_colors))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = nrf_cli_cmd_colors &rArr; nrf_cli_build_in_cmd_common_executed &rArr; nrf_cli_help_print &rArr; nrf_cli_fprintf &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; unsigned_print &rArr; nrf_fprintf_buffer_flush &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_print
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_build_in_cmd_common_executed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_cli.o(.constdata)
</UL>
<P><STRONG><a name="[b4]"></a>nrf_cli_cmd_colors_off</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, nrf_cli.o(i.nrf_cli_cmd_colors_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = nrf_cli_cmd_colors_off &rArr; nrf_cli_build_in_cmd_common_executed &rArr; nrf_cli_help_print &rArr; nrf_cli_fprintf &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; unsigned_print &rArr; nrf_fprintf_buffer_flush &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_build_in_cmd_common_executed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_cli.o(.constdata)
</UL>
<P><STRONG><a name="[b5]"></a>nrf_cli_cmd_colors_on</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, nrf_cli.o(i.nrf_cli_cmd_colors_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = nrf_cli_cmd_colors_on &rArr; nrf_cli_build_in_cmd_common_executed &rArr; nrf_cli_help_print &rArr; nrf_cli_fprintf &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; unsigned_print &rArr; nrf_fprintf_buffer_flush &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_build_in_cmd_common_executed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_cli.o(.constdata)
</UL>
<P><STRONG><a name="[b9]"></a>nrf_cli_cmd_echo</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, nrf_cli.o(i.nrf_cli_cmd_echo))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = nrf_cli_cmd_echo &rArr; nrf_cli_build_in_cmd_common_executed &rArr; nrf_cli_help_print &rArr; nrf_cli_fprintf &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; unsigned_print &rArr; nrf_fprintf_buffer_flush &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_build_in_cmd_common_executed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_cli.o(.constdata)
</UL>
<P><STRONG><a name="[b7]"></a>nrf_cli_cmd_echo_off</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, nrf_cli.o(i.nrf_cli_cmd_echo_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = nrf_cli_cmd_echo_off &rArr; nrf_cli_build_in_cmd_common_executed &rArr; nrf_cli_help_print &rArr; nrf_cli_fprintf &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; unsigned_print &rArr; nrf_fprintf_buffer_flush &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_build_in_cmd_common_executed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_cli.o(.constdata)
</UL>
<P><STRONG><a name="[b8]"></a>nrf_cli_cmd_echo_on</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, nrf_cli.o(i.nrf_cli_cmd_echo_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = nrf_cli_cmd_echo_on &rArr; nrf_cli_build_in_cmd_common_executed &rArr; nrf_cli_help_print &rArr; nrf_cli_fprintf &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; unsigned_print &rArr; nrf_fprintf_buffer_flush &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_build_in_cmd_common_executed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_cli.o(.constdata)
</UL>
<P><STRONG><a name="[ba]"></a>nrf_cli_cmd_history</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, nrf_cli.o(i.nrf_cli_cmd_history))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = nrf_cli_cmd_history &rArr; nrf_cli_build_in_cmd_common_executed &rArr; nrf_cli_help_print &rArr; nrf_cli_fprintf &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; unsigned_print &rArr; nrf_fprintf_buffer_flush &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_read
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_build_in_cmd_common_executed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_cli.o(.constdata)
</UL>
<P><STRONG><a name="[bc]"></a>nrf_cli_cmd_resize</STRONG> (Thumb, 276 bytes, Stack size 32 bytes, nrf_cli.o(i.nrf_cli_cmd_resize))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = nrf_cli_cmd_resize &rArr; nrf_cli_build_in_cmd_common_executed &rArr; nrf_cli_help_print &rArr; nrf_cli_fprintf &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; unsigned_print &rArr; nrf_fprintf_buffer_flush &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_build_in_cmd_common_executed
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_position_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_cli.o(.constdata)
</UL>
<P><STRONG><a name="[bb]"></a>nrf_cli_cmd_resize_default</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, nrf_cli.o(i.nrf_cli_cmd_resize_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = nrf_cli_cmd_resize_default &rArr; nrf_cli_build_in_cmd_common_executed &rArr; nrf_cli_help_print &rArr; nrf_cli_fprintf &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; unsigned_print &rArr; nrf_fprintf_buffer_flush &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_build_in_cmd_common_executed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_cli.o(.constdata)
</UL>
<P><STRONG><a name="[b2]"></a>nrf_log_backend_cli_flush</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nrf_cli.o(i.nrf_log_backend_cli_flush))
<BR>[Address Reference Count : 1]<UL><LI> nrf_cli.o(.constdata)
</UL>
<P><STRONG><a name="[b1]"></a>nrf_log_backend_cli_panic_set</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, nrf_cli.o(i.nrf_log_backend_cli_panic_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_log_backend_cli_panic_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_cli.o(.constdata)
</UL>
<P><STRONG><a name="[b0]"></a>nrf_log_backend_cli_put</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, nrf_cli.o(i.nrf_log_backend_cli_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = nrf_log_backend_cli_put &rArr; cli_log_entry_process &rArr; nrf_cli_fprintf &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; unsigned_print &rArr; nrf_fprintf_buffer_flush &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_push
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_events_set
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_get
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_log_entry_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_cli.o(.constdata)
</UL>
<P><STRONG><a name="[7e]"></a>string_cmp</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, nrf_cli.o(i.string_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = string_cmp &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_cli.o(i.nrf_cli_init)
</UL>
<P><STRONG><a name="[c2]"></a>cli_ble_uart_enable</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, nrf_cli_ble_uart.o(i.cli_ble_uart_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cli_ble_uart_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_cli_ble_uart.o(.constdata)
</UL>
<P><STRONG><a name="[c0]"></a>cli_ble_uart_init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, nrf_cli_ble_uart.o(i.cli_ble_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cli_ble_uart_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ringbuf_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_cli_ble_uart.o(.constdata)
</UL>
<P><STRONG><a name="[c4]"></a>cli_ble_uart_read</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, nrf_cli_ble_uart.o(i.cli_ble_uart_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = cli_ble_uart_read &rArr; nrf_ringbuf_cpy_get &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ringbuf_cpy_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_cli_ble_uart.o(.constdata)
</UL>
<P><STRONG><a name="[c1]"></a>cli_ble_uart_uninit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrf_cli_ble_uart.o(i.cli_ble_uart_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = cli_ble_uart_uninit &rArr; app_timer_stop &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_cli_ble_uart.o(.constdata)
</UL>
<P><STRONG><a name="[c3]"></a>cli_ble_uart_write</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, nrf_cli_ble_uart.o(i.cli_ble_uart_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = cli_ble_uart_write &rArr; nrf_ringbuf_cpy_put &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ringbuf_cpy_put
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_cli_ble_uart.o(.constdata)
</UL>
<P><STRONG><a name="[7c]"></a>nus_data_handler</STRONG> (Thumb, 250 bytes, Stack size 24 bytes, nrf_cli_ble_uart.o(i.nus_data_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = nus_data_handler &rArr; nrf_ringbuf_cpy_put &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_eff_mtu_get
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_string_send
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ringbuf_get
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ringbuf_free
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ringbuf_cpy_put
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_cli_ble_uart.o(i.nrf_cli_ble_uart_service_init)
</UL>
<P><STRONG><a name="[3e]"></a>timer_handler</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, nrf_cli_ble_uart.o(i.timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = timer_handler &rArr; nrf_ringbuf_get &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_eff_mtu_get
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_string_send
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ringbuf_get
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ringbuf_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_cli_ble_uart.o(i.cli_ble_uart_enable)
</UL>
<P><STRONG><a name="[c7]"></a>cli_rtt_enable</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, nrf_cli_rtt.o(i.cli_rtt_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = cli_rtt_enable &rArr; app_timer_start &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_cli_rtt.o(.constdata)
</UL>
<P><STRONG><a name="[c5]"></a>cli_rtt_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, nrf_cli_rtt.o(i.cli_rtt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cli_rtt_init &rArr; SEGGER_RTT_Init &rArr; _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_cli_rtt.o(.constdata)
</UL>
<P><STRONG><a name="[c9]"></a>cli_rtt_read</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, nrf_cli_rtt.o(i.cli_rtt_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = cli_rtt_read &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_cli_rtt.o(.constdata)
</UL>
<P><STRONG><a name="[c6]"></a>cli_rtt_uninit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrf_cli_rtt.o(i.cli_rtt_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = cli_rtt_uninit &rArr; app_timer_stop &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_cli_rtt.o(.constdata)
</UL>
<P><STRONG><a name="[c8]"></a>cli_rtt_write</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, nrf_cli_rtt.o(i.cli_rtt_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = cli_rtt_write &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_cli_rtt.o(.constdata)
</UL>
<P><STRONG><a name="[3f]"></a>timer_handler</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, nrf_cli_rtt.o(i.timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = timer_handler &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_HasData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_cli_rtt.o(i.cli_rtt_enable)
</UL>
<P><STRONG><a name="[363]"></a>unsigned_print</STRONG> (Thumb, 244 bytes, Stack size 40 bytes, nrf_fprintf_format.o(i.unsigned_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = unsigned_print &rArr; nrf_fprintf_buffer_flush &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_buffer_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_fmt
</UL>

<P><STRONG><a name="[ce]"></a>erase</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, nrf_fstorage_sd.o(i.erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = erase &rArr; queue_process &rArr; nrf_fstorage_sys_evt_handler &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_put
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_alloc
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___17_nrf_fstorage_sd_c_6e7dbfe9__nrf_atomic_internal_mov
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_sd.o(.constdata)
</UL>
<P><STRONG><a name="[ca]"></a>init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, nrf_fstorage_sd.o(i.init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = init
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_is_enabled
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_init
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___17_nrf_fstorage_sd_c_6e7dbfe9__nrf_atomic_internal_orr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_sd.o(.constdata)
</UL>
<P><STRONG><a name="[d1]"></a>is_busy</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrf_fstorage_sd.o(i.is_busy))
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_sd.o(.constdata)
</UL>
<P><STRONG><a name="[22e]"></a>queue_process</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, nrf_fstorage_sd.o(i.queue_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = queue_process &rArr; nrf_fstorage_sys_evt_handler &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_get
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_sys_evt_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_sys_evt_handler
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_sdh_state_handler
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase
</UL>

<P><STRONG><a name="[cc]"></a>read</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrf_fstorage_sd.o(i.read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_sd.o(.constdata)
</UL>
<P><STRONG><a name="[cf]"></a>rmap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nrf_fstorage_sd.o(i.rmap))
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_sd.o(.constdata)
</UL>
<P><STRONG><a name="[cb]"></a>uninit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, nrf_fstorage_sd.o(i.uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uninit &rArr; nrf_atfifo_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_sd.o(.constdata)
</UL>
<P><STRONG><a name="[d0]"></a>wmap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nrf_fstorage_sd.o(i.wmap))
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_sd.o(.constdata)
</UL>
<P><STRONG><a name="[cd]"></a>write</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, nrf_fstorage_sd.o(i.write))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = write &rArr; queue_process &rArr; nrf_fstorage_sys_evt_handler &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_put
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_alloc
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___17_nrf_fstorage_sd_c_6e7dbfe9__nrf_atomic_internal_mov
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_sd.o(.constdata)
</UL>
<P><STRONG><a name="[81]"></a>nrf_pwr_mgmt_timeout_handler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, nrf_pwr_mgmt.o(i.nrf_pwr_mgmt_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = nrf_pwr_mgmt_timeout_handler &rArr; nrf_pwr_mgmt_shutdown &rArr; app_sched_event_put &rArr; app_isched_event_put &rArr; nrf_queue_push &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwr_mgmt_shutdown
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_pwr_mgmt.o(i.nrf_pwr_mgmt_init)
</UL>
<P><STRONG><a name="[82]"></a>scheduler_shutdown_handler</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, nrf_pwr_mgmt.o(i.scheduler_shutdown_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = scheduler_shutdown_handler &rArr; nrf_section_iter_next &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_panic
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_is_enabled
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_next
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_pwr_mgmt.o(i.nrf_pwr_mgmt_shutdown)
</UL>
<P><STRONG><a name="[d2]"></a>internal_transaction_cb</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrf_twi_mngr.o(i.internal_transaction_cb))
<BR>[Address Reference Count : 1]<UL><LI> nrf_twi_mngr.o(.constdata)
</UL>
<P><STRONG><a name="[373]"></a>start_pending_transaction</STRONG> (Thumb, 422 bytes, Stack size 40 bytes, nrf_twi_mngr.o(i.start_pending_transaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = start_pending_transaction &rArr; nrf_drv_twi_init &rArr; nrf_drv_common_irq_enable &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_generic_pop
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_xfer
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_uninit
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_init
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_enable
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twi_mngr_perform
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_event_handler
</UL>

<P><STRONG><a name="[3c9]"></a>start_transfer</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, nrf_twi_mngr.o(i.start_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = start_transfer &rArr; nrf_drv_twi_xfer &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_event_handler
</UL>

<P><STRONG><a name="[84]"></a>twi_event_handler</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, nrf_twi_mngr.o(i.twi_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = twi_event_handler &rArr; start_pending_transaction &rArr; nrf_drv_twi_init &rArr; nrf_drv_common_irq_enable &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_transfer
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pending_transaction
</UL>
<BR>[Address Reference Count : 2]<UL><LI> nrf_twi_mngr.o(i.start_pending_transaction)
<LI> nrf_twi_mngr.o(i.nrf_twi_mngr_init)
</UL>
<P><STRONG><a name="[d3]"></a>task_mnanager_info</STRONG> (Thumb, 312 bytes, Stack size 64 bytes, task_manager.o(i.task_mnanager_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = task_mnanager_info &rArr; nrf_cli_fprintf &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; unsigned_print &rArr; nrf_fprintf_buffer_flush &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_manager.o(.constdata)
</UL>
<P><STRONG><a name="[19c]"></a>buf_prealloc</STRONG> (Thumb, 312 bytes, Stack size 48 bytes, nrf_log_frontend.o(i.buf_prealloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 52 + In Cycle
<LI>Call Chain = buf_prealloc &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___18_nrf_log_frontend_c_bc460776__nrf_atomic_internal_and
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___18_nrf_log_frontend_c_bc460776__nrf_atomic_internal_orr
</UL>
<BR>[Called By]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>

<P><STRONG><a name="[da]"></a>log_cmd</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, nrf_log_frontend.o(i.log_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = log_cmd &rArr; nrf_cli_help_print &rArr; nrf_cli_fprintf &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; unsigned_print &rArr; nrf_fprintf_buffer_flush &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_print
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_frontend.o(.constdata)
</UL>
<P><STRONG><a name="[d6]"></a>log_ctrl</STRONG> (Thumb, 608 bytes, Stack size 64 bytes, nrf_log_frontend.o(i.log_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = log_ctrl &rArr; nrf_cli_fprintf &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; unsigned_print &rArr; nrf_fprintf_buffer_flush &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_module_filter_get
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_frontend.o(.constdata)
</UL>
<P><STRONG><a name="[d7]"></a>log_go</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrf_log_frontend.o(i.log_go))
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_frontend.o(.constdata)
</UL>
<P><STRONG><a name="[d8]"></a>log_halt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrf_log_frontend.o(i.log_halt))
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_frontend.o(.constdata)
</UL>
<P><STRONG><a name="[d9]"></a>log_status</STRONG> (Thumb, 200 bytes, Stack size 56 bytes, nrf_log_frontend.o(i.log_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = log_status &rArr; nrf_cli_fprintf &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; unsigned_print &rArr; nrf_fprintf_buffer_flush &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_module_filter_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_frontend.o(.constdata)
</UL>
<P><STRONG><a name="[d4]"></a>module_name_get</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, nrf_log_frontend.o(i.module_name_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = module_name_get &rArr; nrf_log_module_name_get
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_module_name_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_frontend.o(.constdata)
</UL>
<P><STRONG><a name="[d5]"></a>severity_lvl_get</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_log_frontend.o(i.severity_lvl_get))
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_frontend.o(.constdata)
</UL>
<P><STRONG><a name="[366]"></a>std_n</STRONG> (Thumb, 232 bytes, Stack size 40 bytes, nrf_log_frontend.o(i.std_n))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + In Cycle
<LI>Call Chain = std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_3
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_4
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_5
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_6
</UL>

<P><STRONG><a name="[269]"></a>hal_nfc_internal_bytes_setup</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, hal_nfc_t2t.o(i.hal_nfc_internal_bytes_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = hal_nfc_internal_bytes_setup &rArr; nfc_t2t_internal_set
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_t2t_internal_set
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memset4_4
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nfc_setup
</UL>

<P><STRONG><a name="[48]"></a>nrf_nfct_clock_event_handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hal_nfc_t2t.o(i.nrf_nfct_clock_event_handler))
<BR>[Address Reference Count : 1]<UL><LI> hal_nfc_t2t.o(i.hal_nfc_setup)
</UL>
<P><STRONG><a name="[14a]"></a>_DoInit</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, segger_rtt.o(i._DoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy4_7
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Read
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Init
</UL>

<P><STRONG><a name="[14f]"></a>_WriteBlocking</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, segger_rtt.o(i._WriteBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[3a]"></a>appsh_events_poll</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, nrf_sdh.o(i.appsh_events_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = appsh_events_poll &rArr; nrf_section_iter_init &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_next
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_sdh.o(i.SWI2_EGU2_IRQHandler)
</UL>
<P><STRONG><a name="[106]"></a>nrf_sdh_ble_evts_poll</STRONG> (Thumb, 82 bytes, Stack size 88 bytes, nrf_sdh_ble.o(i.nrf_sdh_ble_evts_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = nrf_sdh_ble_evts_poll &rArr; nrf_section_iter_init &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_next
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_sdh_ble.o(sdh_stack_observers0)
</UL>
<P><STRONG><a name="[107]"></a>nrf_sdh_soc_evts_poll</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, nrf_sdh_soc.o(i.nrf_sdh_soc_evts_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = nrf_sdh_soc_evts_poll &rArr; nrf_section_iter_init &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_next
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_sdh_soc.o(sdh_stack_observers0)
</UL>
<P><STRONG><a name="[7b]"></a>halNfcCallback</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, nfc_t2t_lib.o(i.halNfcCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = halNfcCallback &rArr; nfcHandleT2ReadCommand &rArr; nfcPrepareTxBuffer &rArr; nfcAddBytesToBuffer &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcResetReadState
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcHandleT2ReadCommand
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcChangeState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nfc_t2t_lib.o(i.nfc_t2t_setup)
</UL>
<P><STRONG><a name="[32d]"></a>nfcAddBytesToBuffer</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, nfc_t2t_lib.o(i.nfcAddBytesToBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nfcAddBytesToBuffer &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcPrepareTxBuffer
</UL>

<P><STRONG><a name="[32e]"></a>nfcAddFixedValueToBuffer</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, nfc_t2t_lib.o(i.nfcAddFixedValueToBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nfcAddFixedValueToBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcPrepareTxBuffer
</UL>

<P><STRONG><a name="[33c]"></a>nfcCalculateAddresses</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, nfc_t2t_lib.o(i.nfcCalculateAddresses))
<BR><BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_t2t_payload_set
</UL>

<P><STRONG><a name="[266]"></a>nfcChangeState</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, nfc_t2t_lib.o(i.nfcChangeState))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nfcChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_t2t_setup
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_t2t_emulation_stop
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_t2t_emulation_start
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcRegisterPayload
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcHandleT2ReadCommand
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halNfcCallback
</UL>

<P><STRONG><a name="[267]"></a>nfcHandleT2ReadCommand</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, nfc_t2t_lib.o(i.nfcHandleT2ReadCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nfcHandleT2ReadCommand &rArr; nfcPrepareTxBuffer &rArr; nfcAddBytesToBuffer &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nfc_send
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcUpdateReadState
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcPrepareTxBuffer
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halNfcCallback
</UL>

<P><STRONG><a name="[33b]"></a>nfcPrepareInternalBytes</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nfc_t2t_lib.o(i.nfcPrepareInternalBytes))
<BR><BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_t2t_setup
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_t2t_internal_set
</UL>

<P><STRONG><a name="[32f]"></a>nfcPrepareTxBuffer</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, nfc_t2t_lib.o(i.nfcPrepareTxBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nfcPrepareTxBuffer &rArr; nfcAddBytesToBuffer &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcAddFixedValueToBuffer
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcAddBytesToBuffer
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcHandleT2ReadCommand
</UL>

<P><STRONG><a name="[332]"></a>nfcRegisterPayload</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, nfc_t2t_lib.o(i.nfcRegisterPayload))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nfcRegisterPayload &rArr; nfcChangeState
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_t2t_payload_set
</UL>

<P><STRONG><a name="[268]"></a>nfcResetReadState</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, nfc_t2t_lib.o(i.nfcResetReadState))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nfcResetReadState
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_t2t_payload_set
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halNfcCallback
</UL>

<P><STRONG><a name="[331]"></a>nfcUpdateReadState</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, nfc_t2t_lib.o(i.nfcUpdateReadState))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nfcUpdateReadState
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcHandleT2ReadCommand
</UL>

<P><STRONG><a name="[12b]"></a>bcopy</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uECC.c.o(.text.bcopy))
<BR><BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bcopy
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_shared_secret
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bcopy
</UL>

<P><STRONG><a name="[135]"></a>uECC_vli_cmp_unsafe</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, uECC.c.o(.text.uECC_vli_cmp_unsafe))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = uECC_vli_cmp_unsafe
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modInv
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modAdd
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast_secp160r1
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast_secp256r1
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast_secp224r1
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast_secp192r1
</UL>

<P><STRONG><a name="[11d]"></a>regularize_k</STRONG> (Thumb, 90 bytes, Stack size 96 bytes, uECC.c.o(.text.regularize_k))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = regularize_k &rArr; uECC_vli_add
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_testBit
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_add
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_shared_secret
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_compute_public_key
</UL>

<P><STRONG><a name="[e2]"></a>vli_mmod_fast_secp192r1</STRONG> (Thumb, 148 bytes, Stack size 192 bytes, uECC.c.o(.text.vli_mmod_fast_secp192r1))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = vli_mmod_fast_secp192r1 &rArr; uECC_vli_sub
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_set
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_sub
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_add
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_cmp_unsafe
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uECC.c.o(.rodata.curve_secp192r1)
</UL>
<P><STRONG><a name="[e3]"></a>vli_mmod_fast_secp224r1</STRONG> (Thumb, 220 bytes, Stack size 224 bytes, uECC.c.o(.text.vli_mmod_fast_secp224r1))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = vli_mmod_fast_secp224r1 &rArr; uECC_vli_sub
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_set
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_sub
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_add
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_cmp_unsafe
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uECC.c.o(.rodata.curve_secp224r1)
</UL>
<P><STRONG><a name="[e4]"></a>vli_mmod_fast_secp256r1</STRONG> (Thumb, 432 bytes, Stack size 224 bytes, uECC.c.o(.text.vli_mmod_fast_secp256r1))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = vli_mmod_fast_secp256r1 &rArr; uECC_vli_sub
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_set
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_sub
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_add
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_cmp_unsafe
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uECC.c.o(.rodata.curve_secp256r1)
</UL>
<P><STRONG><a name="[136]"></a>vli_modInv_update</STRONG> (Thumb, 58 bytes, Stack size 96 bytes, uECC.c.o(.text.vli_modInv_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = vli_modInv_update &rArr; uECC_vli_add
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_rshift1
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_add
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modInv
</UL>

<P><STRONG><a name="[12e]"></a>omega_mult_secp160r1</STRONG> (Thumb, 66 bytes, Stack size 64 bytes, uECC.c.o(.text.omega_mult_secp160r1))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = omega_mult_secp160r1 &rArr; uECC_vli_add
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_rshift1
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_set
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_add
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast_secp160r1
</UL>

<P><STRONG><a name="[e1]"></a>vli_mmod_fast_secp160r1</STRONG> (Thumb, 132 bytes, Stack size 224 bytes, uECC.c.o(.text.vli_mmod_fast_secp160r1))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = vli_mmod_fast_secp160r1 &rArr; omega_mult_secp160r1 &rArr; uECC_vli_add
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_clear
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_sub
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_add
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;omega_mult_secp160r1
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_cmp_unsafe
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uECC.c.o(.rodata.curve_secp160r1)
</UL>
<P><STRONG><a name="[e0]"></a>x_side_default</STRONG> (Thumb, 90 bytes, Stack size 256 bytes, uECC.c.o(.text.x_side_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = x_side_default &rArr; uECC_vli_modSquare_fast &rArr; uECC_vli_square
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modSquare_fast
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modMult_fast
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modSub
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modAdd
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Address Reference Count : 4]<UL><LI> uECC.c.o(.rodata.curve_secp192r1)
<LI> uECC.c.o(.rodata.curve_secp256r1)
<LI> uECC.c.o(.rodata.curve_secp160r1)
<LI> uECC.c.o(.rodata.curve_secp224r1)
</UL>
<P><STRONG><a name="[df]"></a>double_jacobian_default</STRONG> (Thumb, 340 bytes, Stack size 416 bytes, uECC.c.o(.text.double_jacobian_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = double_jacobian_default &rArr; uECC_vli_modSquare_fast &rArr; uECC_vli_square
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modSquare_fast
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modMult_fast
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modSub
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modAdd
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_rshift1
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_set
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_isZero
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_add
</UL>
<BR>[Address Reference Count : 4]<UL><LI> uECC.c.o(.rodata.curve_secp192r1)
<LI> uECC.c.o(.rodata.curve_secp256r1)
<LI> uECC.c.o(.rodata.curve_secp160r1)
<LI> uECC.c.o(.rodata.curve_secp224r1)
</UL>
<P><STRONG><a name="[124]"></a>XYcZ_addC</STRONG> (Thumb, 280 bytes, Stack size 544 bytes, uECC.c.o(.text.XYcZ_addC))
<BR><BR>[Stack]<UL><LI>Max Depth = 1008<LI>Call Chain = XYcZ_addC &rArr; uECC_vli_modSquare_fast &rArr; uECC_vli_square
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modSquare_fast
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modMult_fast
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modSub
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modAdd
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_set
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_mult
</UL>

<P><STRONG><a name="[125]"></a>XYcZ_add</STRONG> (Thumb, 202 bytes, Stack size 288 bytes, uECC.c.o(.text.XYcZ_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = XYcZ_add &rArr; uECC_vli_modSquare_fast &rArr; uECC_vli_square
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modSquare_fast
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modMult_fast
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modSub
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_set
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_mult
</UL>

<P><STRONG><a name="[122]"></a>apply_z</STRONG> (Thumb, 62 bytes, Stack size 224 bytes, uECC.c.o(.text.apply_z))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = apply_z &rArr; uECC_vli_modSquare_fast &rArr; uECC_vli_square
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modSquare_fast
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modMult_fast
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_mult
</UL>

<P><STRONG><a name="[11e]"></a>EccPoint_mult</STRONG> (Thumb, 418 bytes, Stack size 896 bytes, uECC.c.o(.text.EccPoint_mult))
<BR><BR>[Stack]<UL><LI>Max Depth = 1904<LI>Call Chain = EccPoint_mult &rArr; XYcZ_addC &rArr; uECC_vli_modSquare_fast &rArr; uECC_vli_square
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modInv
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modMult_fast
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modSub
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_set
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_testBit
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_clear
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_z
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYcZ_add
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYcZ_addC
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_shared_secret
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_compute_public_key
</UL>

<P><STRONG><a name="[11c]"></a>EccPoint_compute_public_key</STRONG> (Thumb, 86 bytes, Stack size 384 bytes, uECC.c.o(.text.EccPoint_compute_public_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 2288<LI>Call Chain = EccPoint_compute_public_key &rArr; EccPoint_mult &rArr; XYcZ_addC &rArr; uECC_vli_modSquare_fast &rArr; uECC_vli_square
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_isZero
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_mult
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regularize_k
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_make_key
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
